!function e(t,n,r){function i(s,a){if(!n[s]){if(!t[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(o)return o(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[s]={exports:{}};t[s][0].call(c.exports,function(e){var n=t[s][1][e];return i(n?n:e)},c,c.exports,e,t,n,r)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;s<r.length;s++)i(r[s]);return i}({"./src/javascripts/bundle.js":[function(e){(function(t){t.$=e("jquery"),t.rwdSlider=e("./rwdSlider.js"),t.demo=e("./demo")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./demo":"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/demo.js","./rwdSlider.js":"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/rwdSlider.js",jquery:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/jquery/dist/jquery.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/browserify/lib/_empty.js":[function(){},{}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/browserify/node_modules/path-browserify/index.js":[function(e,t,n){(function(e){function t(e,t){for(var n=0,r=e.length-1;r>=0;r--){var i=e[r];"."===i?e.splice(r,1):".."===i?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;n)e.unshift("..");return e}function r(e,t){if(e.filter)return e.filter(t);for(var n=[],r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}var i=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,o=function(e){return i.exec(e).slice(1)};n.resolve=function(){for(var n="",i=!1,o=arguments.length-1;o>=-1&&!i;o--){var s=o>=0?arguments[o]:e.cwd();if("string"!=typeof s)throw new TypeError("Arguments to path.resolve must be strings");s&&(n=s+"/"+n,i="/"===s.charAt(0))}return n=t(r(n.split("/"),function(e){return!!e}),!i).join("/"),(i?"/":"")+n||"."},n.normalize=function(e){var i=n.isAbsolute(e),o="/"===s(e,-1);return e=t(r(e.split("/"),function(e){return!!e}),!i).join("/"),e||i||(e="."),e&&o&&(e+="/"),(i?"/":"")+e},n.isAbsolute=function(e){return"/"===e.charAt(0)},n.join=function(){var e=Array.prototype.slice.call(arguments,0);return n.normalize(r(e,function(e){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},n.relative=function(e,t){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;n>=0&&""===e[n];n--);return t>n?[]:e.slice(t,n-t+1)}e=n.resolve(e).substr(1),t=n.resolve(t).substr(1);for(var i=r(e.split("/")),o=r(t.split("/")),s=Math.min(i.length,o.length),a=s,u=0;s>u;u++)if(i[u]!==o[u]){a=u;break}for(var l=[],u=a;u<i.length;u++)l.push("..");return l=l.concat(o.slice(a)),l.join("/")},n.sep="/",n.delimiter=":",n.dirname=function(e){var t=o(e),n=t[0],r=t[1];return n||r?(r&&(r=r.substr(0,r.length-1)),n+r):"."},n.basename=function(e,t){var n=o(e)[2];return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},n.extname=function(e){return o(e)[3]};var s="b"==="ab".substr(-1)?function(e,t,n){return e.substr(t,n)}:function(e,t,n){return 0>t&&(t=e.length+t),e.substr(t,n)}}).call(this,e("_process"))},{_process:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/browserify/node_modules/process/browser.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/browserify/node_modules/process/browser.js":[function(e,t){function n(){if(!s){s=!0;for(var e,t=o.length;t;){e=o,o=[];for(var n=-1;++n<t;)e[n]();t=o.length}s=!1}}function r(){}var i=t.exports={},o=[],s=!1;i.nextTick=function(e){o.push(e),s||setTimeout(n,0)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.on=r,i.addListener=r,i.once=r,i.off=r,i.removeListener=r,i.removeAllListeners=r,i.emit=r,i.binding=function(){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},{}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars.js":[function(e,t,n){(function(t){"use strict";var r=e("./handlebars.runtime")["default"],i=e("./handlebars/compiler/ast")["default"],o=e("./handlebars/compiler/base").parser,s=e("./handlebars/compiler/base").parse,a=e("./handlebars/compiler/compiler").Compiler,u=e("./handlebars/compiler/compiler").compile,l=e("./handlebars/compiler/compiler").precompile,c=e("./handlebars/compiler/javascript-compiler")["default"],p=r.create,d=function(){var e=p();return e.compile=function(t,n){return u(t,n,e)},e.precompile=function(t,n){return l(t,n,e)},e.AST=i,e.Compiler=a,e.JavaScriptCompiler=c,e.Parser=o,e.parse=s,e};r=d(),r.create=d;var h="undefined"!=typeof t?t:window,f=h.Handlebars;r.noConflict=function(){h.Handlebars===r&&(h.Handlebars=f)},r["default"]=r,n["default"]=r}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./handlebars.runtime":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars.runtime.js","./handlebars/compiler/ast":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js","./handlebars/compiler/base":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/base.js","./handlebars/compiler/compiler":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js","./handlebars/compiler/javascript-compiler":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars.runtime.js":[function(e,t,n){(function(t){"use strict";var r=e("./handlebars/base"),i=e("./handlebars/safe-string")["default"],o=e("./handlebars/exception")["default"],s=e("./handlebars/utils"),a=e("./handlebars/runtime"),u=function(){var e=new r.HandlebarsEnvironment;return s.extend(e,r),e.SafeString=i,e.Exception=o,e.Utils=s,e.escapeExpression=s.escapeExpression,e.VM=a,e.template=function(t){return a.template(t,e)},e},l=u();l.create=u;var c="undefined"!=typeof t?t:window,p=c.Handlebars;l.noConflict=function(){c.Handlebars===l&&(c.Handlebars=p)},l["default"]=l,n["default"]=l}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./handlebars/base":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/base.js","./handlebars/exception":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js","./handlebars/runtime":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/runtime.js","./handlebars/safe-string":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/safe-string.js","./handlebars/utils":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/base.js":[function(e,t,n){"use strict";function r(e,t){this.helpers=e||{},this.partials=t||{},i(this)}function i(e){e.registerHelper("helperMissing",function(){if(1===arguments.length)return void 0;throw new s("Missing helper: '"+arguments[arguments.length-1].name+"'")}),e.registerHelper("blockHelperMissing",function(t,n){var r=n.inverse,i=n.fn;if(t===!0)return i(this);if(t===!1||null==t)return r(this);if(c(t))return t.length>0?(n.ids&&(n.ids=[n.name]),e.helpers.each(t,n)):r(this);if(n.data&&n.ids){var s=g(n.data);s.contextPath=o.appendContextPath(n.data.contextPath,n.name),n={data:s}}return i(t,n)}),e.registerHelper("each",function(e,t){function n(t,n,s){r&&(r.key=t,r.index=n,r.first=0===n,r.last=!!s,i&&(r.contextPath=i+t)),d+=a(e[t],{data:r,blockParams:o.blockParams([e[t],t],[i+t,null])})}if(!t)throw new s("Must pass iterator to #each");var r,i,a=t.fn,u=t.inverse,l=0,d="";if(t.data&&t.ids&&(i=o.appendContextPath(t.data.contextPath,t.ids[0])+"."),p(e)&&(e=e.call(this)),t.data&&(r=g(t.data)),e&&"object"==typeof e)if(c(e))for(var h=e.length;h>l;l++)n(l,l,l===e.length-1);else{var f;for(var m in e)e.hasOwnProperty(m)&&(f&&n(f,l-1),f=m,l++);f&&n(f,l-1,!0)}return 0===l&&(d=u(this)),d}),e.registerHelper("if",function(e,t){return p(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||o.isEmpty(e)?t.inverse(this):t.fn(this)}),e.registerHelper("unless",function(t,n){return e.helpers["if"].call(this,t,{fn:n.inverse,inverse:n.fn,hash:n.hash})}),e.registerHelper("with",function(e,t){p(e)&&(e=e.call(this));var n=t.fn;if(o.isEmpty(e))return t.inverse(this);if(t.data&&t.ids){var r=g(t.data);r.contextPath=o.appendContextPath(t.data.contextPath,t.ids[0]),t={data:r}}return n(e,t)}),e.registerHelper("log",function(t,n){var r=n.data&&null!=n.data.level?parseInt(n.data.level,10):1;e.log(r,t)}),e.registerHelper("lookup",function(e,t){return e&&e[t]})}var o=e("./utils"),s=e("./exception")["default"],a="3.0.0";n.VERSION=a;var u=6;n.COMPILER_REVISION=u;var l={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1"};n.REVISION_CHANGES=l;var c=o.isArray,p=o.isFunction,d=o.toString,h="[object Object]";n.HandlebarsEnvironment=r,r.prototype={constructor:r,logger:f,log:m,registerHelper:function(e,t){if(d.call(e)===h){if(t)throw new s("Arg not supported with multiple helpers");o.extend(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if(d.call(e)===h)o.extend(this.partials,e);else{if("undefined"==typeof t)throw new s("Attempting to register a partial as undefined");this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]}};var f={methodMap:{0:"debug",1:"info",2:"warn",3:"error"},DEBUG:0,INFO:1,WARN:2,ERROR:3,level:1,log:function(e,t){if("undefined"!=typeof console&&f.level<=e){var n=f.methodMap[e];(console[n]||console.log).call(console,t)}}};n.logger=f;var m=f.log;n.log=m;var g=function(e){var t=o.extend({},e);return t._parent=e,t};n.createFrame=g},{"./exception":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js","./utils":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js":[function(e,t,n){"use strict";var r={Program:function(e,t,n,r){this.loc=r,this.type="Program",this.body=e,this.blockParams=t,this.strip=n},MustacheStatement:function(e,t,n,r,i,o){this.loc=o,this.type="MustacheStatement",this.path=e,this.params=t||[],this.hash=n,this.escaped=r,this.strip=i},BlockStatement:function(e,t,n,r,i,o,s,a,u){this.loc=u,this.type="BlockStatement",this.path=e,this.params=t||[],this.hash=n,this.program=r,this.inverse=i,this.openStrip=o,this.inverseStrip=s,this.closeStrip=a},PartialStatement:function(e,t,n,r,i){this.loc=i,this.type="PartialStatement",this.name=e,this.params=t||[],this.hash=n,this.indent="",this.strip=r},ContentStatement:function(e,t){this.loc=t,this.type="ContentStatement",this.original=this.value=e},CommentStatement:function(e,t,n){this.loc=n,this.type="CommentStatement",this.value=e,this.strip=t},SubExpression:function(e,t,n,r){this.loc=r,this.type="SubExpression",this.path=e,this.params=t||[],this.hash=n},PathExpression:function(e,t,n,r,i){this.loc=i,this.type="PathExpression",this.data=e,this.original=r,this.parts=n,this.depth=t},StringLiteral:function(e,t){this.loc=t,this.type="StringLiteral",this.original=this.value=e},NumberLiteral:function(e,t){this.loc=t,this.type="NumberLiteral",this.original=this.value=Number(e)},BooleanLiteral:function(e,t){this.loc=t,this.type="BooleanLiteral",this.original=this.value="true"===e},Hash:function(e,t){this.loc=t,this.type="Hash",this.pairs=e},HashPair:function(e,t,n){this.loc=n,this.type="HashPair",this.key=e,this.value=t},helpers:{helperExpression:function(e){return!("SubExpression"!==e.type&&!e.params.length&&!e.hash)},scopedId:function(e){return/^\.|this\b/.test(e.original)},simpleId:function(e){return 1===e.parts.length&&!r.helpers.scopedId(e)&&!e.depth}}};n["default"]=r},{}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/base.js":[function(e,t,n){"use strict";function r(e,t){if("Program"===e.type)return e;i.yy=l,l.locInfo=function(e){return new l.SourceLocation(t&&t.srcName,e)};var n=new s;return n.accept(i.parse(e))}var i=e("./parser")["default"],o=e("./ast")["default"],s=e("./whitespace-control")["default"],a=e("./helpers"),u=e("../utils").extend;n.parser=i;var l={};u(l,a,o),n.parse=r},{"../utils":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js","./ast":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js","./helpers":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js","./parser":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js","./whitespace-control":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js":[function(e,t,n){"use strict";function r(e,t,n){if(o(e)){for(var r=[],i=0,s=e.length;s>i;i++)r.push(t.wrap(e[i],n));return r}return"boolean"==typeof e||"number"==typeof e?e+"":e}function i(e){this.srcFile=e,this.source=[]}var o=e("../utils").isArray;try{var s=e("source-map"),a=s.SourceNode}catch(u){a=function(e,t,n,r){this.src="",r&&this.add(r)},a.prototype={add:function(e){o(e)&&(e=e.join("")),this.src+=e},prepend:function(e){o(e)&&(e=e.join("")),this.src=e+this.src},toStringWithSourceMap:function(){return{code:this.toString()}},toString:function(){return this.src}}}i.prototype={prepend:function(e,t){this.source.unshift(this.wrap(e,t))},push:function(e,t){this.source.push(this.wrap(e,t))},merge:function(){var e=this.empty();return this.each(function(t){e.add(["  ",t,"\n"])}),e},each:function(e){for(var t=0,n=this.source.length;n>t;t++)e(this.source[t])},empty:function(e){return e=e||this.currentLocation||{start:{}},new a(e.start.line,e.start.column,this.srcFile)},wrap:function(e,t){return e instanceof a?e:(t=t||this.currentLocation||{start:{}},e=r(e,this,t),new a(t.start.line,t.start.column,this.srcFile,e))},functionCall:function(e,t,n){return n=this.generateList(n),this.wrap([e,t?"."+t+"(":"(",n,")"])},quotedString:function(e){return'"'+(e+"").replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")+'"'},objectLiteral:function(e){var t=[];for(var n in e)if(e.hasOwnProperty(n)){var i=r(e[n],this);"undefined"!==i&&t.push([this.quotedString(n),":",i])}var o=this.generateList(t);return o.prepend("{"),o.add("}"),o},generateList:function(e,t){for(var n=this.empty(t),i=0,o=e.length;o>i;i++)i&&n.add(","),n.add(r(e[i],this,t));return n},generateArray:function(e,t){var n=this.generateList(e,t);return n.prepend("["),n.add("]"),n}},n["default"]=i},{"../utils":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js","source-map":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js":[function(e,t,n){"use strict";function r(){}function i(e,t,n){if(null==e||"string"!=typeof e&&"Program"!==e.type)throw new u("You must pass a string or Handlebars AST to Handlebars.precompile. You passed "+e);t=t||{},"data"in t||(t.data=!0),t.compat&&(t.useDepths=!0);var r=n.parse(e,t),i=(new n.Compiler).compile(r,t);return(new n.JavaScriptCompiler).compile(i,t)}function o(e,t,n){function r(){var r=n.parse(e,t),i=(new n.Compiler).compile(r,t),o=(new n.JavaScriptCompiler).compile(i,t,void 0,!0);return n.template(o)}if(null==e||"string"!=typeof e&&"Program"!==e.type)throw new u("You must pass a string or Handlebars AST to Handlebars.compile. You passed "+e);t=t||{},"data"in t||(t.data=!0),t.compat&&(t.useDepths=!0);var i,o=function(e,t){return i||(i=r()),i.call(this,e,t)};return o._setup=function(e){return i||(i=r()),i._setup(e)},o._child=function(e,t,n,o){return i||(i=r()),i._child(e,t,n,o)},o}function s(e,t){if(e===t)return!0;if(l(e)&&l(t)&&e.length===t.length){for(var n=0;n<e.length;n++)if(!s(e[n],t[n]))return!1;return!0}}function a(e){if(!e.path.parts){var t=e.path;e.path=new p.PathExpression(!1,0,[t.original+""],t.original+"",t.log)}}var u=e("../exception")["default"],l=e("../utils").isArray,c=e("../utils").indexOf,p=e("./ast")["default"],d=[].slice;n.Compiler=r,r.prototype={compiler:r,equals:function(e){var t=this.opcodes.length;if(e.opcodes.length!==t)return!1;for(var n=0;t>n;n++){var r=this.opcodes[n],i=e.opcodes[n];if(r.opcode!==i.opcode||!s(r.args,i.args))return!1}for(t=this.children.length,n=0;t>n;n++)if(!this.children[n].equals(e.children[n]))return!1;return!0},guid:0,compile:function(e,t){this.sourceNode=[],this.opcodes=[],this.children=[],this.options=t,this.stringParams=t.stringParams,this.trackIds=t.trackIds,t.blockParams=t.blockParams||[];var n=t.knownHelpers;if(t.knownHelpers={helperMissing:!0,blockHelperMissing:!0,each:!0,"if":!0,unless:!0,"with":!0,log:!0,lookup:!0},n)for(var r in n)t.knownHelpers[r]=n[r];return this.accept(e)},compileProgram:function(e){var t=(new this.compiler).compile(e,this.options),n=this.guid++;return this.usePartial=this.usePartial||t.usePartial,this.children[n]=t,this.useDepths=this.useDepths||t.useDepths,n},accept:function(e){this.sourceNode.unshift(e);var t=this[e.type](e);return this.sourceNode.shift(),t},Program:function(e){this.options.blockParams.unshift(e.blockParams);for(var t=e.body,n=0,r=t.length;r>n;n++)this.accept(t[n]);return this.options.blockParams.shift(),this.isSimple=1===r,this.blockParams=e.blockParams?e.blockParams.length:0,this},BlockStatement:function(e){a(e);var t=e.program,n=e.inverse;t=t&&this.compileProgram(t),n=n&&this.compileProgram(n);var r=this.classifySexpr(e);"helper"===r?this.helperSexpr(e,t,n):"simple"===r?(this.simpleSexpr(e),this.opcode("pushProgram",t),this.opcode("pushProgram",n),this.opcode("emptyHash"),this.opcode("blockValue",e.path.original)):(this.ambiguousSexpr(e,t,n),this.opcode("pushProgram",t),this.opcode("pushProgram",n),this.opcode("emptyHash"),this.opcode("ambiguousBlockValue")),this.opcode("append")},PartialStatement:function(e){this.usePartial=!0;var t=e.params;if(t.length>1)throw new u("Unsupported number of partial arguments: "+t.length,e);t.length||t.push({type:"PathExpression",parts:[],depth:0});var n=e.name.original,r="SubExpression"===e.name.type;r&&this.accept(e.name),this.setupFullMustacheParams(e,void 0,void 0,!0);var i=e.indent||"";this.options.preventIndent&&i&&(this.opcode("appendContent",i),i=""),this.opcode("invokePartial",r,n,i),this.opcode("append")},MustacheStatement:function(e){this.SubExpression(e),this.opcode(e.escaped&&!this.options.noEscape?"appendEscaped":"append")},ContentStatement:function(e){e.value&&this.opcode("appendContent",e.value)},CommentStatement:function(){},SubExpression:function(e){a(e);var t=this.classifySexpr(e);"simple"===t?this.simpleSexpr(e):"helper"===t?this.helperSexpr(e):this.ambiguousSexpr(e)},ambiguousSexpr:function(e,t,n){var r=e.path,i=r.parts[0],o=null!=t||null!=n;this.opcode("getContext",r.depth),this.opcode("pushProgram",t),this.opcode("pushProgram",n),this.accept(r),this.opcode("invokeAmbiguous",i,o)},simpleSexpr:function(e){this.accept(e.path),this.opcode("resolvePossibleLambda")},helperSexpr:function(e,t,n){var r=this.setupFullMustacheParams(e,t,n),i=e.path,o=i.parts[0];if(this.options.knownHelpers[o])this.opcode("invokeKnownHelper",r.length,o);else{if(this.options.knownHelpersOnly)throw new u("You specified knownHelpersOnly, but used the unknown helper "+o,e);i.falsy=!0,this.accept(i),this.opcode("invokeHelper",r.length,i.original,p.helpers.simpleId(i))}},PathExpression:function(e){this.addDepth(e.depth),this.opcode("getContext",e.depth);var t=e.parts[0],n=p.helpers.scopedId(e),r=!e.depth&&!n&&this.blockParamIndex(t);r?this.opcode("lookupBlockParam",r,e.parts):t?e.data?(this.options.data=!0,this.opcode("lookupData",e.depth,e.parts)):this.opcode("lookupOnContext",e.parts,e.falsy,n):this.opcode("pushContext")},StringLiteral:function(e){this.opcode("pushString",e.value)},NumberLiteral:function(e){this.opcode("pushLiteral",e.value)},BooleanLiteral:function(e){this.opcode("pushLiteral",e.value)},Hash:function(e){var t,n,r=e.pairs;for(this.opcode("pushHash"),t=0,n=r.length;n>t;t++)this.pushParam(r[t].value);for(;t--;)this.opcode("assignToHash",r[t].key);this.opcode("popHash")},opcode:function(e){this.opcodes.push({opcode:e,args:d.call(arguments,1),loc:this.sourceNode[0].loc})},addDepth:function(e){e&&(this.useDepths=!0)},classifySexpr:function(e){var t=p.helpers.simpleId(e.path),n=t&&!!this.blockParamIndex(e.path.parts[0]),r=!n&&p.helpers.helperExpression(e),i=!n&&(r||t),o=this.options;if(i&&!r){var s=e.path.parts[0];o.knownHelpers[s]?r=!0:o.knownHelpersOnly&&(i=!1)}return r?"helper":i?"ambiguous":"simple"},pushParams:function(e){for(var t=0,n=e.length;n>t;t++)this.pushParam(e[t])},pushParam:function(e){var t=null!=e.value?e.value:e.original||"";if(this.stringParams)t.replace&&(t=t.replace(/^(\.?\.\/)*/g,"").replace(/\//g,".")),e.depth&&this.addDepth(e.depth),this.opcode("getContext",e.depth||0),this.opcode("pushStringParam",t,e.type),"SubExpression"===e.type&&this.accept(e);else{if(this.trackIds){var n;if(!e.parts||p.helpers.scopedId(e)||e.depth||(n=this.blockParamIndex(e.parts[0])),n){var r=e.parts.slice(1).join(".");this.opcode("pushId","BlockParam",n,r)}else t=e.original||t,t.replace&&(t=t.replace(/^\.\//g,"").replace(/^\.$/g,"")),this.opcode("pushId",e.type,t)}this.accept(e)}},setupFullMustacheParams:function(e,t,n,r){var i=e.params;return this.pushParams(i),this.opcode("pushProgram",t),this.opcode("pushProgram",n),e.hash?this.accept(e.hash):this.opcode("emptyHash",r),i},blockParamIndex:function(e){for(var t=0,n=this.options.blockParams.length;n>t;t++){var r=this.options.blockParams[t],i=r&&c(r,e);if(r&&i>=0)return[t,i]}}},n.precompile=i,n.compile=o},{"../exception":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js","../utils":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js","./ast":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js":[function(e,t,n){"use strict";function r(e,t){this.source=e,this.start={line:t.first_line,column:t.first_column},this.end={line:t.last_line,column:t.last_column}}function i(e,t){return{open:"~"===e.charAt(2),close:"~"===t.charAt(t.length-3)}}function o(e){return e.replace(/^\{\{~?\!-?-?/,"").replace(/-?-?~?\}\}$/,"")}function s(e,t,n){n=this.locInfo(n);for(var r=e?"@":"",i=[],o=0,s="",a=0,u=t.length;u>a;a++){var l=t[a].part;if(r+=(t[a].separator||"")+l,".."===l||"."===l||"this"===l){if(i.length>0)throw new c("Invalid path: "+r,{loc:n});".."===l&&(o++,s+="../")}else i.push(l)}return new this.PathExpression(e,o,i,r,n)}function a(e,t,n,r,i,o){var s=r.charAt(3)||r.charAt(2),a="{"!==s&&"&"!==s;return new this.MustacheStatement(e,t,n,a,i,this.locInfo(o))}function u(e,t,n,r){if(e.path.original!==n){var i={loc:e.path.loc};throw new c(e.path.original+" doesn't match "+n,i)}r=this.locInfo(r);var o=new this.Program([t],null,{},r);return new this.BlockStatement(e.path,e.params,e.hash,o,void 0,{},{},{},r)}function l(e,t,n,r,i,o){if(r&&r.path&&e.path.original!==r.path.original){var s={loc:e.path.loc};throw new c(e.path.original+" doesn't match "+r.path.original,s)}t.blockParams=e.blockParams;var a,u;return n&&(n.chain&&(n.program.body[0].closeStrip=r.strip),u=n.strip,a=n.program),i&&(i=a,a=t,t=i),new this.BlockStatement(e.path,e.params,e.hash,t,a,e.strip,u,r&&r.strip,this.locInfo(o))}var c=e("../exception")["default"];n.SourceLocation=r,n.stripFlags=i,n.stripComment=o,n.preparePath=s,n.prepareMustache=a,n.prepareRawBlock=u,n.prepareBlock=l},{"../exception":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js":[function(e,t,n){"use strict";function r(e){this.value=e}function i(){}function o(e,t,n,r){var i=t.popStack(),o=0,s=n.length;for(e&&s--;s>o;o++)i=t.nameLookup(i,n[o],r);return e?[t.aliasable("this.strict"),"(",i,", ",t.quotedString(n[o]),")"]:i}var s=e("../base").COMPILER_REVISION,a=e("../base").REVISION_CHANGES,u=e("../exception")["default"],l=e("../utils").isArray,c=e("./code-gen")["default"];i.prototype={nameLookup:function(e,t){return i.isValidJavaScriptVariableName(t)?[e,".",t]:[e,"['",t,"']"]},depthedLookup:function(e){return[this.aliasable("this.lookup"),'(depths, "',e,'")']},compilerInfo:function(){var e=s,t=a[e];return[e,t]},appendToBuffer:function(e,t,n){return l(e)||(e=[e]),e=this.source.wrap(e,t),this.environment.isSimple?["return ",e,";"]:n?["buffer += ",e,";"]:(e.appendToBuffer=!0,e)},initializeBuffer:function(){return this.quotedString("")},compile:function(e,t,n,r){this.environment=e,this.options=t,this.stringParams=this.options.stringParams,this.trackIds=this.options.trackIds,this.precompile=!r,this.name=this.environment.name,this.isChild=!!n,this.context=n||{programs:[],environments:[]},this.preamble(),this.stackSlot=0,this.stackVars=[],this.aliases={},this.registers={list:[]},this.hashes=[],this.compileStack=[],this.inlineStack=[],this.blockParams=[],this.compileChildren(e,t),this.useDepths=this.useDepths||e.useDepths||this.options.compat,this.useBlockParams=this.useBlockParams||e.useBlockParams;var i,o,s,a,l=e.opcodes;for(s=0,a=l.length;a>s;s++)i=l[s],this.source.currentLocation=i.loc,o=o||i.loc,this[i.opcode].apply(this,i.args);if(this.source.currentLocation=o,this.pushSource(""),this.stackSlot||this.inlineStack.length||this.compileStack.length)throw new u("Compile completed with content left on stack");var c=this.createFunctionContext(r);if(this.isChild)return c;var p={compiler:this.compilerInfo(),main:c},d=this.context.programs;for(s=0,a=d.length;a>s;s++)d[s]&&(p[s]=d[s]);return this.environment.usePartial&&(p.usePartial=!0),this.options.data&&(p.useData=!0),this.useDepths&&(p.useDepths=!0),this.useBlockParams&&(p.useBlockParams=!0),this.options.compat&&(p.compat=!0),r?p.compilerOptions=this.options:(p.compiler=JSON.stringify(p.compiler),this.source.currentLocation={start:{line:1,column:0}},p=this.objectLiteral(p),t.srcName?(p=p.toStringWithSourceMap({file:t.destName}),p.map=p.map&&p.map.toString()):p=p.toString()),p},preamble:function(){this.lastContext=0,this.source=new c(this.options.srcName)},createFunctionContext:function(e){var t="",n=this.stackVars.concat(this.registers.list);n.length>0&&(t+=", "+n.join(", "));var r=0;for(var i in this.aliases){var o=this.aliases[i];this.aliases.hasOwnProperty(i)&&o.children&&o.referenceCount>1&&(t+=", alias"+ ++r+"="+i,o.children[0]="alias"+r)}var s=["depth0","helpers","partials","data"];(this.useBlockParams||this.useDepths)&&s.push("blockParams"),this.useDepths&&s.push("depths");var a=this.mergeSource(t);return e?(s.push(a),Function.apply(this,s)):this.source.wrap(["function(",s.join(","),") {\n  ",a,"}"])},mergeSource:function(e){var t,n,r,i,o=this.environment.isSimple,s=!this.forceBuffer;return this.source.each(function(e){e.appendToBuffer?(r?e.prepend("  + "):r=e,i=e):(r&&(n?r.prepend("buffer += "):t=!0,i.add(";"),r=i=void 0),n=!0,o||(s=!1))}),s?r?(r.prepend("return "),i.add(";")):n||this.source.push('return "";'):(e+=", buffer = "+(t?"":this.initializeBuffer()),r?(r.prepend("return buffer + "),i.add(";")):this.source.push("return buffer;")),e&&this.source.prepend("var "+e.substring(2)+(t?"":";\n")),this.source.merge()},blockValue:function(e){var t=this.aliasable("helpers.blockHelperMissing"),n=[this.contextName(0)];this.setupHelperArgs(e,0,n);var r=this.popStack();n.splice(1,0,r),this.push(this.source.functionCall(t,"call",n))},ambiguousBlockValue:function(){var e=this.aliasable("helpers.blockHelperMissing"),t=[this.contextName(0)];this.setupHelperArgs("",0,t,!0),this.flushInline();var n=this.topStack();t.splice(1,0,n),this.pushSource(["if (!",this.lastHelper,") { ",n," = ",this.source.functionCall(e,"call",t),"}"])},appendContent:function(e){this.pendingContent?e=this.pendingContent+e:this.pendingLocation=this.source.currentLocation,this.pendingContent=e},append:function(){if(this.isInline())this.replaceStack(function(e){return[" != null ? ",e,' : ""']}),this.pushSource(this.appendToBuffer(this.popStack()));else{var e=this.popStack();this.pushSource(["if (",e," != null) { ",this.appendToBuffer(e,void 0,!0)," }"]),this.environment.isSimple&&this.pushSource(["else { ",this.appendToBuffer("''",void 0,!0)," }"])}},appendEscaped:function(){this.pushSource(this.appendToBuffer([this.aliasable("this.escapeExpression"),"(",this.popStack(),")"]))},getContext:function(e){this.lastContext=e},pushContext:function(){this.pushStackLiteral(this.contextName(this.lastContext))},lookupOnContext:function(e,t,n){var r=0;n||!this.options.compat||this.lastContext?this.pushContext():this.push(this.depthedLookup(e[r++])),this.resolvePath("context",e,r,t)},lookupBlockParam:function(e,t){this.useBlockParams=!0,this.push(["blockParams[",e[0],"][",e[1],"]"]),this.resolvePath("context",t,1)},lookupData:function(e,t){this.pushStackLiteral(e?"this.data(data, "+e+")":"data"),this.resolvePath("data",t,0,!0)},resolvePath:function(e,t,n,r){if(this.options.strict||this.options.assumeObjects)return void this.push(o(this.options.strict,this,t,e));for(var i=t.length;i>n;n++)this.replaceStack(function(i){var o=this.nameLookup(i,t[n],e);return r?[" && ",o]:[" != null ? ",o," : ",i]})},resolvePossibleLambda:function(){this.push([this.aliasable("this.lambda"),"(",this.popStack(),", ",this.contextName(0),")"])},pushStringParam:function(e,t){this.pushContext(),this.pushString(t),"SubExpression"!==t&&("string"==typeof e?this.pushString(e):this.pushStackLiteral(e))},emptyHash:function(e){this.trackIds&&this.push("{}"),this.stringParams&&(this.push("{}"),this.push("{}")),this.pushStackLiteral(e?"undefined":"{}")},pushHash:function(){this.hash&&this.hashes.push(this.hash),this.hash={values:[],types:[],contexts:[],ids:[]}},popHash:function(){var e=this.hash;this.hash=this.hashes.pop(),this.trackIds&&this.push(this.objectLiteral(e.ids)),this.stringParams&&(this.push(this.objectLiteral(e.contexts)),this.push(this.objectLiteral(e.types))),this.push(this.objectLiteral(e.values))},pushString:function(e){this.pushStackLiteral(this.quotedString(e))},pushLiteral:function(e){this.pushStackLiteral(e)},pushProgram:function(e){this.pushStackLiteral(null!=e?this.programExpression(e):null)},invokeHelper:function(e,t,n){var r=this.popStack(),i=this.setupHelper(e,t),o=n?[i.name," || "]:"",s=["("].concat(o,r);this.options.strict||s.push(" || ",this.aliasable("helpers.helperMissing")),s.push(")"),this.push(this.source.functionCall(s,"call",i.callParams))},invokeKnownHelper:function(e,t){var n=this.setupHelper(e,t);this.push(this.source.functionCall(n.name,"call",n.callParams))},invokeAmbiguous:function(e,t){this.useRegister("helper");var n=this.popStack();this.emptyHash();var r=this.setupHelper(0,e,t),i=this.lastHelper=this.nameLookup("helpers",e,"helper"),o=["(","(helper = ",i," || ",n,")"];this.options.strict||(o[0]="(helper = ",o.push(" != null ? helper : ",this.aliasable("helpers.helperMissing"))),this.push(["(",o,r.paramsInit?["),(",r.paramsInit]:[],"),","(typeof helper === ",this.aliasable('"function"')," ? ",this.source.functionCall("helper","call",r.callParams)," : helper))"])},invokePartial:function(e,t,n){var r=[],i=this.setupParams(t,1,r,!1);e&&(t=this.popStack(),delete i.name),n&&(i.indent=JSON.stringify(n)),i.helpers="helpers",i.partials="partials",r.unshift(e?t:this.nameLookup("partials",t,"partial")),this.options.compat&&(i.depths="depths"),i=this.objectLiteral(i),r.push(i),this.push(this.source.functionCall("this.invokePartial","",r))
},assignToHash:function(e){var t,n,r,i=this.popStack();this.trackIds&&(r=this.popStack()),this.stringParams&&(n=this.popStack(),t=this.popStack());var o=this.hash;t&&(o.contexts[e]=t),n&&(o.types[e]=n),r&&(o.ids[e]=r),o.values[e]=i},pushId:function(e,t,n){"BlockParam"===e?this.pushStackLiteral("blockParams["+t[0]+"].path["+t[1]+"]"+(n?" + "+JSON.stringify("."+n):"")):"PathExpression"===e?this.pushString(t):this.pushStackLiteral("SubExpression"===e?"true":"null")},compiler:i,compileChildren:function(e,t){for(var n,r,i=e.children,o=0,s=i.length;s>o;o++){n=i[o],r=new this.compiler;var a=this.matchExistingProgram(n);null==a?(this.context.programs.push(""),a=this.context.programs.length,n.index=a,n.name="program"+a,this.context.programs[a]=r.compile(n,t,this.context,!this.precompile),this.context.environments[a]=n,this.useDepths=this.useDepths||r.useDepths,this.useBlockParams=this.useBlockParams||r.useBlockParams):(n.index=a,n.name="program"+a,this.useDepths=this.useDepths||n.useDepths,this.useBlockParams=this.useBlockParams||n.useBlockParams)}},matchExistingProgram:function(e){for(var t=0,n=this.context.environments.length;n>t;t++){var r=this.context.environments[t];if(r&&r.equals(e))return t}},programExpression:function(e){var t=this.environment.children[e],n=[t.index,"data",t.blockParams];return(this.useBlockParams||this.useDepths)&&n.push("blockParams"),this.useDepths&&n.push("depths"),"this.program("+n.join(", ")+")"},useRegister:function(e){this.registers[e]||(this.registers[e]=!0,this.registers.list.push(e))},push:function(e){return e instanceof r||(e=this.source.wrap(e)),this.inlineStack.push(e),e},pushStackLiteral:function(e){this.push(new r(e))},pushSource:function(e){this.pendingContent&&(this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent),this.pendingLocation)),this.pendingContent=void 0),e&&this.source.push(e)},replaceStack:function(e){var t,n,i,o=["("];if(!this.isInline())throw new u("replaceStack on non-inline");var s=this.popStack(!0);if(s instanceof r)t=[s.value],o=["(",t],i=!0;else{n=!0;var a=this.incrStack();o=["((",this.push(a)," = ",s,")"],t=this.topStack()}var l=e.call(this,t);i||this.popStack(),n&&this.stackSlot--,this.push(o.concat(l,")"))},incrStack:function(){return this.stackSlot++,this.stackSlot>this.stackVars.length&&this.stackVars.push("stack"+this.stackSlot),this.topStackName()},topStackName:function(){return"stack"+this.stackSlot},flushInline:function(){var e=this.inlineStack;this.inlineStack=[];for(var t=0,n=e.length;n>t;t++){var i=e[t];if(i instanceof r)this.compileStack.push(i);else{var o=this.incrStack();this.pushSource([o," = ",i,";"]),this.compileStack.push(o)}}},isInline:function(){return this.inlineStack.length},popStack:function(e){var t=this.isInline(),n=(t?this.inlineStack:this.compileStack).pop();if(!e&&n instanceof r)return n.value;if(!t){if(!this.stackSlot)throw new u("Invalid stack pop");this.stackSlot--}return n},topStack:function(){var e=this.isInline()?this.inlineStack:this.compileStack,t=e[e.length-1];return t instanceof r?t.value:t},contextName:function(e){return this.useDepths&&e?"depths["+e+"]":"depth"+e},quotedString:function(e){return this.source.quotedString(e)},objectLiteral:function(e){return this.source.objectLiteral(e)},aliasable:function(e){var t=this.aliases[e];return t?(t.referenceCount++,t):(t=this.aliases[e]=this.source.wrap(e),t.aliasable=!0,t.referenceCount=1,t)},setupHelper:function(e,t,n){var r=[],i=this.setupHelperArgs(t,e,r,n),o=this.nameLookup("helpers",t,"helper");return{params:r,paramsInit:i,name:o,callParams:[this.contextName(0)].concat(r)}},setupParams:function(e,t,n){var r,i={},o=[],s=[],a=[];i.name=this.quotedString(e),i.hash=this.popStack(),this.trackIds&&(i.hashIds=this.popStack()),this.stringParams&&(i.hashTypes=this.popStack(),i.hashContexts=this.popStack());var u=this.popStack(),l=this.popStack();(l||u)&&(i.fn=l||"this.noop",i.inverse=u||"this.noop");for(var c=t;c--;)r=this.popStack(),n[c]=r,this.trackIds&&(a[c]=this.popStack()),this.stringParams&&(s[c]=this.popStack(),o[c]=this.popStack());return this.trackIds&&(i.ids=this.source.generateArray(a)),this.stringParams&&(i.types=this.source.generateArray(s),i.contexts=this.source.generateArray(o)),this.options.data&&(i.data="data"),this.useBlockParams&&(i.blockParams="blockParams"),i},setupHelperArgs:function(e,t,n,r){var i=this.setupParams(e,t,n,!0);return i=this.objectLiteral(i),r?(this.useRegister("options"),n.push("options"),["options=",i]):(n.push(i),"")}};for(var p="break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" "),d=i.RESERVED_WORDS={},h=0,f=p.length;f>h;h++)d[p[h]]=!0;i.isValidJavaScriptVariableName=function(e){return!i.RESERVED_WORDS[e]&&/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(e)},n["default"]=i},{"../base":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/base.js","../exception":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js","../utils":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js","./code-gen":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js":[function(e,t,n){"use strict";var r=function(){function e(){this.yy={}}var t={trace:function(){},yy:{},symbols_:{error:2,root:3,program:4,EOF:5,program_repetition0:6,statement:7,mustache:8,block:9,rawBlock:10,partial:11,content:12,COMMENT:13,CONTENT:14,openRawBlock:15,END_RAW_BLOCK:16,OPEN_RAW_BLOCK:17,helperName:18,openRawBlock_repetition0:19,openRawBlock_option0:20,CLOSE_RAW_BLOCK:21,openBlock:22,block_option0:23,closeBlock:24,openInverse:25,block_option1:26,OPEN_BLOCK:27,openBlock_repetition0:28,openBlock_option0:29,openBlock_option1:30,CLOSE:31,OPEN_INVERSE:32,openInverse_repetition0:33,openInverse_option0:34,openInverse_option1:35,openInverseChain:36,OPEN_INVERSE_CHAIN:37,openInverseChain_repetition0:38,openInverseChain_option0:39,openInverseChain_option1:40,inverseAndProgram:41,INVERSE:42,inverseChain:43,inverseChain_option0:44,OPEN_ENDBLOCK:45,OPEN:46,mustache_repetition0:47,mustache_option0:48,OPEN_UNESCAPED:49,mustache_repetition1:50,mustache_option1:51,CLOSE_UNESCAPED:52,OPEN_PARTIAL:53,partialName:54,partial_repetition0:55,partial_option0:56,param:57,sexpr:58,OPEN_SEXPR:59,sexpr_repetition0:60,sexpr_option0:61,CLOSE_SEXPR:62,hash:63,hash_repetition_plus0:64,hashSegment:65,ID:66,EQUALS:67,blockParams:68,OPEN_BLOCK_PARAMS:69,blockParams_repetition_plus0:70,CLOSE_BLOCK_PARAMS:71,path:72,dataName:73,STRING:74,NUMBER:75,BOOLEAN:76,DATA:77,pathSegments:78,SEP:79,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",13:"COMMENT",14:"CONTENT",16:"END_RAW_BLOCK",17:"OPEN_RAW_BLOCK",21:"CLOSE_RAW_BLOCK",27:"OPEN_BLOCK",31:"CLOSE",32:"OPEN_INVERSE",37:"OPEN_INVERSE_CHAIN",42:"INVERSE",45:"OPEN_ENDBLOCK",46:"OPEN",49:"OPEN_UNESCAPED",52:"CLOSE_UNESCAPED",53:"OPEN_PARTIAL",59:"OPEN_SEXPR",62:"CLOSE_SEXPR",66:"ID",67:"EQUALS",69:"OPEN_BLOCK_PARAMS",71:"CLOSE_BLOCK_PARAMS",74:"STRING",75:"NUMBER",76:"BOOLEAN",77:"DATA",79:"SEP"},productions_:[0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[12,1],[10,3],[15,5],[9,4],[9,4],[22,6],[25,6],[36,6],[41,2],[43,3],[43,1],[24,3],[8,5],[8,5],[11,5],[57,1],[57,1],[58,5],[63,1],[65,3],[68,3],[18,1],[18,1],[18,1],[18,1],[18,1],[54,1],[54,1],[73,2],[72,1],[78,3],[78,1],[6,0],[6,2],[19,0],[19,2],[20,0],[20,1],[23,0],[23,1],[26,0],[26,1],[28,0],[28,2],[29,0],[29,1],[30,0],[30,1],[33,0],[33,2],[34,0],[34,1],[35,0],[35,1],[38,0],[38,2],[39,0],[39,1],[40,0],[40,1],[44,0],[44,1],[47,0],[47,2],[48,0],[48,1],[50,0],[50,2],[51,0],[51,1],[55,0],[55,2],[56,0],[56,1],[60,0],[60,2],[61,0],[61,1],[64,1],[64,2],[70,1],[70,2]],performAction:function(e,t,n,r,i,o){var s=o.length-1;switch(i){case 1:return o[s-1];case 2:this.$=new r.Program(o[s],null,{},r.locInfo(this._$));break;case 3:this.$=o[s];break;case 4:this.$=o[s];break;case 5:this.$=o[s];break;case 6:this.$=o[s];break;case 7:this.$=o[s];break;case 8:this.$=new r.CommentStatement(r.stripComment(o[s]),r.stripFlags(o[s],o[s]),r.locInfo(this._$));break;case 9:this.$=new r.ContentStatement(o[s],r.locInfo(this._$));break;case 10:this.$=r.prepareRawBlock(o[s-2],o[s-1],o[s],this._$);break;case 11:this.$={path:o[s-3],params:o[s-2],hash:o[s-1]};break;case 12:this.$=r.prepareBlock(o[s-3],o[s-2],o[s-1],o[s],!1,this._$);break;case 13:this.$=r.prepareBlock(o[s-3],o[s-2],o[s-1],o[s],!0,this._$);break;case 14:this.$={path:o[s-4],params:o[s-3],hash:o[s-2],blockParams:o[s-1],strip:r.stripFlags(o[s-5],o[s])};break;case 15:this.$={path:o[s-4],params:o[s-3],hash:o[s-2],blockParams:o[s-1],strip:r.stripFlags(o[s-5],o[s])};break;case 16:this.$={path:o[s-4],params:o[s-3],hash:o[s-2],blockParams:o[s-1],strip:r.stripFlags(o[s-5],o[s])};break;case 17:this.$={strip:r.stripFlags(o[s-1],o[s-1]),program:o[s]};break;case 18:var a=r.prepareBlock(o[s-2],o[s-1],o[s],o[s],!1,this._$),u=new r.Program([a],null,{},r.locInfo(this._$));u.chained=!0,this.$={strip:o[s-2].strip,program:u,chain:!0};break;case 19:this.$=o[s];break;case 20:this.$={path:o[s-1],strip:r.stripFlags(o[s-2],o[s])};break;case 21:this.$=r.prepareMustache(o[s-3],o[s-2],o[s-1],o[s-4],r.stripFlags(o[s-4],o[s]),this._$);break;case 22:this.$=r.prepareMustache(o[s-3],o[s-2],o[s-1],o[s-4],r.stripFlags(o[s-4],o[s]),this._$);break;case 23:this.$=new r.PartialStatement(o[s-3],o[s-2],o[s-1],r.stripFlags(o[s-4],o[s]),r.locInfo(this._$));break;case 24:this.$=o[s];break;case 25:this.$=o[s];break;case 26:this.$=new r.SubExpression(o[s-3],o[s-2],o[s-1],r.locInfo(this._$));break;case 27:this.$=new r.Hash(o[s],r.locInfo(this._$));break;case 28:this.$=new r.HashPair(o[s-2],o[s],r.locInfo(this._$));break;case 29:this.$=o[s-1];break;case 30:this.$=o[s];break;case 31:this.$=o[s];break;case 32:this.$=new r.StringLiteral(o[s],r.locInfo(this._$));break;case 33:this.$=new r.NumberLiteral(o[s],r.locInfo(this._$));break;case 34:this.$=new r.BooleanLiteral(o[s],r.locInfo(this._$));break;case 35:this.$=o[s];break;case 36:this.$=o[s];break;case 37:this.$=r.preparePath(!0,o[s],this._$);break;case 38:this.$=r.preparePath(!1,o[s],this._$);break;case 39:o[s-2].push({part:o[s],separator:o[s-1]}),this.$=o[s-2];break;case 40:this.$=[{part:o[s]}];break;case 41:this.$=[];break;case 42:o[s-1].push(o[s]);break;case 43:this.$=[];break;case 44:o[s-1].push(o[s]);break;case 51:this.$=[];break;case 52:o[s-1].push(o[s]);break;case 57:this.$=[];break;case 58:o[s-1].push(o[s]);break;case 63:this.$=[];break;case 64:o[s-1].push(o[s]);break;case 71:this.$=[];break;case 72:o[s-1].push(o[s]);break;case 75:this.$=[];break;case 76:o[s-1].push(o[s]);break;case 79:this.$=[];break;case 80:o[s-1].push(o[s]);break;case 83:this.$=[];break;case 84:o[s-1].push(o[s]);break;case 87:this.$=[o[s]];break;case 88:o[s-1].push(o[s]);break;case 89:this.$=[o[s]];break;case 90:o[s-1].push(o[s])}},table:[{3:1,4:2,5:[2,41],6:3,13:[2,41],14:[2,41],17:[2,41],27:[2,41],32:[2,41],46:[2,41],49:[2,41],53:[2,41]},{1:[3]},{5:[1,4]},{5:[2,2],7:5,8:6,9:7,10:8,11:9,12:10,13:[1,11],14:[1,18],15:16,17:[1,21],22:14,25:15,27:[1,19],32:[1,20],37:[2,2],42:[2,2],45:[2,2],46:[1,12],49:[1,13],53:[1,17]},{1:[2,1]},{5:[2,42],13:[2,42],14:[2,42],17:[2,42],27:[2,42],32:[2,42],37:[2,42],42:[2,42],45:[2,42],46:[2,42],49:[2,42],53:[2,42]},{5:[2,3],13:[2,3],14:[2,3],17:[2,3],27:[2,3],32:[2,3],37:[2,3],42:[2,3],45:[2,3],46:[2,3],49:[2,3],53:[2,3]},{5:[2,4],13:[2,4],14:[2,4],17:[2,4],27:[2,4],32:[2,4],37:[2,4],42:[2,4],45:[2,4],46:[2,4],49:[2,4],53:[2,4]},{5:[2,5],13:[2,5],14:[2,5],17:[2,5],27:[2,5],32:[2,5],37:[2,5],42:[2,5],45:[2,5],46:[2,5],49:[2,5],53:[2,5]},{5:[2,6],13:[2,6],14:[2,6],17:[2,6],27:[2,6],32:[2,6],37:[2,6],42:[2,6],45:[2,6],46:[2,6],49:[2,6],53:[2,6]},{5:[2,7],13:[2,7],14:[2,7],17:[2,7],27:[2,7],32:[2,7],37:[2,7],42:[2,7],45:[2,7],46:[2,7],49:[2,7],53:[2,7]},{5:[2,8],13:[2,8],14:[2,8],17:[2,8],27:[2,8],32:[2,8],37:[2,8],42:[2,8],45:[2,8],46:[2,8],49:[2,8],53:[2,8]},{18:22,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{18:31,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{4:32,6:3,13:[2,41],14:[2,41],17:[2,41],27:[2,41],32:[2,41],37:[2,41],42:[2,41],45:[2,41],46:[2,41],49:[2,41],53:[2,41]},{4:33,6:3,13:[2,41],14:[2,41],17:[2,41],27:[2,41],32:[2,41],42:[2,41],45:[2,41],46:[2,41],49:[2,41],53:[2,41]},{12:34,14:[1,18]},{18:36,54:35,58:37,59:[1,38],66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{5:[2,9],13:[2,9],14:[2,9],16:[2,9],17:[2,9],27:[2,9],32:[2,9],37:[2,9],42:[2,9],45:[2,9],46:[2,9],49:[2,9],53:[2,9]},{18:39,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{18:40,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{18:41,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{31:[2,71],47:42,59:[2,71],66:[2,71],74:[2,71],75:[2,71],76:[2,71],77:[2,71]},{21:[2,30],31:[2,30],52:[2,30],59:[2,30],62:[2,30],66:[2,30],69:[2,30],74:[2,30],75:[2,30],76:[2,30],77:[2,30]},{21:[2,31],31:[2,31],52:[2,31],59:[2,31],62:[2,31],66:[2,31],69:[2,31],74:[2,31],75:[2,31],76:[2,31],77:[2,31]},{21:[2,32],31:[2,32],52:[2,32],59:[2,32],62:[2,32],66:[2,32],69:[2,32],74:[2,32],75:[2,32],76:[2,32],77:[2,32]},{21:[2,33],31:[2,33],52:[2,33],59:[2,33],62:[2,33],66:[2,33],69:[2,33],74:[2,33],75:[2,33],76:[2,33],77:[2,33]},{21:[2,34],31:[2,34],52:[2,34],59:[2,34],62:[2,34],66:[2,34],69:[2,34],74:[2,34],75:[2,34],76:[2,34],77:[2,34]},{21:[2,38],31:[2,38],52:[2,38],59:[2,38],62:[2,38],66:[2,38],69:[2,38],74:[2,38],75:[2,38],76:[2,38],77:[2,38],79:[1,43]},{66:[1,30],78:44},{21:[2,40],31:[2,40],52:[2,40],59:[2,40],62:[2,40],66:[2,40],69:[2,40],74:[2,40],75:[2,40],76:[2,40],77:[2,40],79:[2,40]},{50:45,52:[2,75],59:[2,75],66:[2,75],74:[2,75],75:[2,75],76:[2,75],77:[2,75]},{23:46,36:48,37:[1,50],41:49,42:[1,51],43:47,45:[2,47]},{26:52,41:53,42:[1,51],45:[2,49]},{16:[1,54]},{31:[2,79],55:55,59:[2,79],66:[2,79],74:[2,79],75:[2,79],76:[2,79],77:[2,79]},{31:[2,35],59:[2,35],66:[2,35],74:[2,35],75:[2,35],76:[2,35],77:[2,35]},{31:[2,36],59:[2,36],66:[2,36],74:[2,36],75:[2,36],76:[2,36],77:[2,36]},{18:56,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{28:57,31:[2,51],59:[2,51],66:[2,51],69:[2,51],74:[2,51],75:[2,51],76:[2,51],77:[2,51]},{31:[2,57],33:58,59:[2,57],66:[2,57],69:[2,57],74:[2,57],75:[2,57],76:[2,57],77:[2,57]},{19:59,21:[2,43],59:[2,43],66:[2,43],74:[2,43],75:[2,43],76:[2,43],77:[2,43]},{18:63,31:[2,73],48:60,57:61,58:64,59:[1,38],63:62,64:65,65:66,66:[1,67],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{66:[1,68]},{21:[2,37],31:[2,37],52:[2,37],59:[2,37],62:[2,37],66:[2,37],69:[2,37],74:[2,37],75:[2,37],76:[2,37],77:[2,37],79:[1,43]},{18:63,51:69,52:[2,77],57:70,58:64,59:[1,38],63:71,64:65,65:66,66:[1,67],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{24:72,45:[1,73]},{45:[2,48]},{4:74,6:3,13:[2,41],14:[2,41],17:[2,41],27:[2,41],32:[2,41],37:[2,41],42:[2,41],45:[2,41],46:[2,41],49:[2,41],53:[2,41]},{45:[2,19]},{18:75,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{4:76,6:3,13:[2,41],14:[2,41],17:[2,41],27:[2,41],32:[2,41],45:[2,41],46:[2,41],49:[2,41],53:[2,41]},{24:77,45:[1,73]},{45:[2,50]},{5:[2,10],13:[2,10],14:[2,10],17:[2,10],27:[2,10],32:[2,10],37:[2,10],42:[2,10],45:[2,10],46:[2,10],49:[2,10],53:[2,10]},{18:63,31:[2,81],56:78,57:79,58:64,59:[1,38],63:80,64:65,65:66,66:[1,67],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{59:[2,83],60:81,62:[2,83],66:[2,83],74:[2,83],75:[2,83],76:[2,83],77:[2,83]},{18:63,29:82,31:[2,53],57:83,58:64,59:[1,38],63:84,64:65,65:66,66:[1,67],69:[2,53],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{18:63,31:[2,59],34:85,57:86,58:64,59:[1,38],63:87,64:65,65:66,66:[1,67],69:[2,59],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{18:63,20:88,21:[2,45],57:89,58:64,59:[1,38],63:90,64:65,65:66,66:[1,67],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{31:[1,91]},{31:[2,72],59:[2,72],66:[2,72],74:[2,72],75:[2,72],76:[2,72],77:[2,72]},{31:[2,74]},{21:[2,24],31:[2,24],52:[2,24],59:[2,24],62:[2,24],66:[2,24],69:[2,24],74:[2,24],75:[2,24],76:[2,24],77:[2,24]},{21:[2,25],31:[2,25],52:[2,25],59:[2,25],62:[2,25],66:[2,25],69:[2,25],74:[2,25],75:[2,25],76:[2,25],77:[2,25]},{21:[2,27],31:[2,27],52:[2,27],62:[2,27],65:92,66:[1,93],69:[2,27]},{21:[2,87],31:[2,87],52:[2,87],62:[2,87],66:[2,87],69:[2,87]},{21:[2,40],31:[2,40],52:[2,40],59:[2,40],62:[2,40],66:[2,40],67:[1,94],69:[2,40],74:[2,40],75:[2,40],76:[2,40],77:[2,40],79:[2,40]},{21:[2,39],31:[2,39],52:[2,39],59:[2,39],62:[2,39],66:[2,39],69:[2,39],74:[2,39],75:[2,39],76:[2,39],77:[2,39],79:[2,39]},{52:[1,95]},{52:[2,76],59:[2,76],66:[2,76],74:[2,76],75:[2,76],76:[2,76],77:[2,76]},{52:[2,78]},{5:[2,12],13:[2,12],14:[2,12],17:[2,12],27:[2,12],32:[2,12],37:[2,12],42:[2,12],45:[2,12],46:[2,12],49:[2,12],53:[2,12]},{18:96,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{36:48,37:[1,50],41:49,42:[1,51],43:98,44:97,45:[2,69]},{31:[2,63],38:99,59:[2,63],66:[2,63],69:[2,63],74:[2,63],75:[2,63],76:[2,63],77:[2,63]},{45:[2,17]},{5:[2,13],13:[2,13],14:[2,13],17:[2,13],27:[2,13],32:[2,13],37:[2,13],42:[2,13],45:[2,13],46:[2,13],49:[2,13],53:[2,13]},{31:[1,100]},{31:[2,80],59:[2,80],66:[2,80],74:[2,80],75:[2,80],76:[2,80],77:[2,80]},{31:[2,82]},{18:63,57:102,58:64,59:[1,38],61:101,62:[2,85],63:103,64:65,65:66,66:[1,67],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{30:104,31:[2,55],68:105,69:[1,106]},{31:[2,52],59:[2,52],66:[2,52],69:[2,52],74:[2,52],75:[2,52],76:[2,52],77:[2,52]},{31:[2,54],69:[2,54]},{31:[2,61],35:107,68:108,69:[1,106]},{31:[2,58],59:[2,58],66:[2,58],69:[2,58],74:[2,58],75:[2,58],76:[2,58],77:[2,58]},{31:[2,60],69:[2,60]},{21:[1,109]},{21:[2,44],59:[2,44],66:[2,44],74:[2,44],75:[2,44],76:[2,44],77:[2,44]},{21:[2,46]},{5:[2,21],13:[2,21],14:[2,21],17:[2,21],27:[2,21],32:[2,21],37:[2,21],42:[2,21],45:[2,21],46:[2,21],49:[2,21],53:[2,21]},{21:[2,88],31:[2,88],52:[2,88],62:[2,88],66:[2,88],69:[2,88]},{67:[1,94]},{18:63,57:110,58:64,59:[1,38],66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{5:[2,22],13:[2,22],14:[2,22],17:[2,22],27:[2,22],32:[2,22],37:[2,22],42:[2,22],45:[2,22],46:[2,22],49:[2,22],53:[2,22]},{31:[1,111]},{45:[2,18]},{45:[2,70]},{18:63,31:[2,65],39:112,57:113,58:64,59:[1,38],63:114,64:65,65:66,66:[1,67],69:[2,65],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{5:[2,23],13:[2,23],14:[2,23],17:[2,23],27:[2,23],32:[2,23],37:[2,23],42:[2,23],45:[2,23],46:[2,23],49:[2,23],53:[2,23]},{62:[1,115]},{59:[2,84],62:[2,84],66:[2,84],74:[2,84],75:[2,84],76:[2,84],77:[2,84]},{62:[2,86]},{31:[1,116]},{31:[2,56]},{66:[1,118],70:117},{31:[1,119]},{31:[2,62]},{14:[2,11]},{21:[2,28],31:[2,28],52:[2,28],62:[2,28],66:[2,28],69:[2,28]},{5:[2,20],13:[2,20],14:[2,20],17:[2,20],27:[2,20],32:[2,20],37:[2,20],42:[2,20],45:[2,20],46:[2,20],49:[2,20],53:[2,20]},{31:[2,67],40:120,68:121,69:[1,106]},{31:[2,64],59:[2,64],66:[2,64],69:[2,64],74:[2,64],75:[2,64],76:[2,64],77:[2,64]},{31:[2,66],69:[2,66]},{21:[2,26],31:[2,26],52:[2,26],59:[2,26],62:[2,26],66:[2,26],69:[2,26],74:[2,26],75:[2,26],76:[2,26],77:[2,26]},{13:[2,14],14:[2,14],17:[2,14],27:[2,14],32:[2,14],37:[2,14],42:[2,14],45:[2,14],46:[2,14],49:[2,14],53:[2,14]},{66:[1,123],71:[1,122]},{66:[2,89],71:[2,89]},{13:[2,15],14:[2,15],17:[2,15],27:[2,15],32:[2,15],42:[2,15],45:[2,15],46:[2,15],49:[2,15],53:[2,15]},{31:[1,124]},{31:[2,68]},{31:[2,29]},{66:[2,90],71:[2,90]},{13:[2,16],14:[2,16],17:[2,16],27:[2,16],32:[2,16],37:[2,16],42:[2,16],45:[2,16],46:[2,16],49:[2,16],53:[2,16]}],defaultActions:{4:[2,1],47:[2,48],49:[2,19],53:[2,50],62:[2,74],71:[2,78],76:[2,17],80:[2,82],90:[2,46],97:[2,18],98:[2,70],103:[2,86],105:[2,56],108:[2,62],109:[2,11],121:[2,68],122:[2,29]},parseError:function(e){throw new Error(e)},parse:function(e){function t(){var e;return e=n.lexer.lex()||1,"number"!=typeof e&&(e=n.symbols_[e]||e),e}var n=this,r=[0],i=[null],o=[],s=this.table,a="",u=0,l=0,c=0;this.lexer.setInput(e),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,this.yy.parser=this,"undefined"==typeof this.lexer.yylloc&&(this.lexer.yylloc={});var p=this.lexer.yylloc;o.push(p);var d=this.lexer.options&&this.lexer.options.ranges;"function"==typeof this.yy.parseError&&(this.parseError=this.yy.parseError);for(var h,f,m,g,v,y,w,b,_,S={};;){if(m=r[r.length-1],this.defaultActions[m]?g=this.defaultActions[m]:((null===h||"undefined"==typeof h)&&(h=t()),g=s[m]&&s[m][h]),"undefined"==typeof g||!g.length||!g[0]){var x="";if(!c){_=[];for(y in s[m])this.terminals_[y]&&y>2&&_.push("'"+this.terminals_[y]+"'");x=this.lexer.showPosition?"Parse error on line "+(u+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+_.join(", ")+", got '"+(this.terminals_[h]||h)+"'":"Parse error on line "+(u+1)+": Unexpected "+(1==h?"end of input":"'"+(this.terminals_[h]||h)+"'"),this.parseError(x,{text:this.lexer.match,token:this.terminals_[h]||h,line:this.lexer.yylineno,loc:p,expected:_})}}if(g[0]instanceof Array&&g.length>1)throw new Error("Parse Error: multiple actions possible at state: "+m+", token: "+h);switch(g[0]){case 1:r.push(h),i.push(this.lexer.yytext),o.push(this.lexer.yylloc),r.push(g[1]),h=null,f?(h=f,f=null):(l=this.lexer.yyleng,a=this.lexer.yytext,u=this.lexer.yylineno,p=this.lexer.yylloc,c>0&&c--);break;case 2:if(w=this.productions_[g[1]][1],S.$=i[i.length-w],S._$={first_line:o[o.length-(w||1)].first_line,last_line:o[o.length-1].last_line,first_column:o[o.length-(w||1)].first_column,last_column:o[o.length-1].last_column},d&&(S._$.range=[o[o.length-(w||1)].range[0],o[o.length-1].range[1]]),v=this.performAction.call(S,a,l,u,this.yy,g[1],i,o),"undefined"!=typeof v)return v;w&&(r=r.slice(0,-1*w*2),i=i.slice(0,-1*w),o=o.slice(0,-1*w)),r.push(this.productions_[g[1]][0]),i.push(S.$),o.push(S._$),b=s[r[r.length-2]][r[r.length-1]],r.push(b);break;case 3:return!0}}return!0}},n=function(){var e={EOF:1,parseError:function(e,t){if(!this.yy.parser)throw new Error(e);this.yy.parser.parseError(e,t)},setInput:function(e){return this._input=e,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e;var t=e.match(/(?:\r\n?|\n).*/g);return t?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,n=e.split(/(?:\r\n?|\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t-1),this.offset-=t;var r=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),n.length-1&&(this.yylineno-=n.length-1);var i=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:n?(n.length===r.length?this.yylloc.first_column:0)+r[r.length-n.length].length-n[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[i[0],i[0]+this.yyleng-t]),this},more:function(){return this._more=!0,this},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var e=this.pastInput(),t=new Array(e.length+1).join("-");return e+this.upcomingInput()+"\n"+t+"^"},next:function(){if(this.done)return this.EOF;this._input||(this.done=!0);var e,t,n,r,i;this._more||(this.yytext="",this.match="");for(var o=this._currentRules(),s=0;s<o.length&&(n=this._input.match(this.rules[o[s]]),!n||t&&!(n[0].length>t[0].length)||(t=n,r=s,this.options.flex));s++);return t?(i=t[0].match(/(?:\r\n?|\n).*/g),i&&(this.yylineno+=i.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:i?i[i.length-1].length-i[i.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+t[0].length},this.yytext+=t[0],this.match+=t[0],this.matches=t,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(t[0].length),this.matched+=t[0],e=this.performAction.call(this,this.yy,this,o[r],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),e?e:void 0):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var e=this.next();return"undefined"!=typeof e?e:this.lex()},begin:function(e){this.conditionStack.push(e)},popState:function(){return this.conditionStack.pop()},_currentRules:function(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function(){return this.conditionStack[this.conditionStack.length-2]},pushState:function(e){this.begin(e)}};return e.options={},e.performAction=function(e,t,n,r){function i(e,n){return t.yytext=t.yytext.substr(e,t.yyleng-n)}switch(n){case 0:if("\\\\"===t.yytext.slice(-2)?(i(0,1),this.begin("mu")):"\\"===t.yytext.slice(-1)?(i(0,1),this.begin("emu")):this.begin("mu"),t.yytext)return 14;break;case 1:return 14;case 2:return this.popState(),14;case 3:return t.yytext=t.yytext.substr(5,t.yyleng-9),this.popState(),16;case 4:return 14;case 5:return this.popState(),13;case 6:return 59;case 7:return 62;case 8:return 17;case 9:return this.popState(),this.begin("raw"),21;case 10:return 53;case 11:return 27;case 12:return 45;case 13:return this.popState(),42;case 14:return this.popState(),42;case 15:return 32;case 16:return 37;case 17:return 49;case 18:return 46;case 19:this.unput(t.yytext),this.popState(),this.begin("com");break;case 20:return this.popState(),13;case 21:return 46;case 22:return 67;case 23:return 66;case 24:return 66;case 25:return 79;case 26:break;case 27:return this.popState(),52;case 28:return this.popState(),31;case 29:return t.yytext=i(1,2).replace(/\\"/g,'"'),74;case 30:return t.yytext=i(1,2).replace(/\\'/g,"'"),74;case 31:return 77;case 32:return 76;case 33:return 76;case 34:return 75;case 35:return 69;case 36:return 71;case 37:return 66;case 38:return t.yytext=i(1,2),66;case 39:return"INVALID";case 40:return 5}},e.rules=[/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,/^(?:[^\x00]*?(?=(\{\{\{\{\/)))/,/^(?:[\s\S]*?--(~)?\}\})/,/^(?:\()/,/^(?:\))/,/^(?:\{\{\{\{)/,/^(?:\}\}\}\})/,/^(?:\{\{(~)?>)/,/^(?:\{\{(~)?#)/,/^(?:\{\{(~)?\/)/,/^(?:\{\{(~)?\^\s*(~)?\}\})/,/^(?:\{\{(~)?\s*else\s*(~)?\}\})/,/^(?:\{\{(~)?\^)/,/^(?:\{\{(~)?\s*else\b)/,/^(?:\{\{(~)?\{)/,/^(?:\{\{(~)?&)/,/^(?:\{\{(~)?!--)/,/^(?:\{\{(~)?![\s\S]*?\}\})/,/^(?:\{\{(~)?)/,/^(?:=)/,/^(?:\.\.)/,/^(?:\.(?=([=~}\s\/.)|])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}(~)?\}\})/,/^(?:(~)?\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\s)])))/,/^(?:false(?=([~}\s)])))/,/^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,/^(?:as\s+\|)/,/^(?:\|)/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:$)/],e.conditions={mu:{rules:[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],inclusive:!1},emu:{rules:[2],inclusive:!1},com:{rules:[5],inclusive:!1},raw:{rules:[3,4],inclusive:!1},INITIAL:{rules:[0,1,40],inclusive:!0}},e}();return t.lexer=n,e.prototype=t,t.Parser=e,new e}();n["default"]=r},{}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/printer.js":[function(e,t,n){"use strict";function r(e){return(new i).accept(e)}function i(){this.padding=0}var o=e("./visitor")["default"];n.print=r,n.PrintVisitor=i,i.prototype=new o,i.prototype.pad=function(e){for(var t="",n=0,r=this.padding;r>n;n++)t+="  ";return t=t+e+"\n"},i.prototype.Program=function(e){var t,n,r="",i=e.body;if(e.blockParams){var o="BLOCK PARAMS: [";for(t=0,n=e.blockParams.length;n>t;t++)o+=" "+e.blockParams[t];o+=" ]",r+=this.pad(o)}for(t=0,n=i.length;n>t;t++)r+=this.accept(i[t]);return this.padding--,r},i.prototype.MustacheStatement=function(e){return this.pad("{{ "+this.SubExpression(e)+" }}")},i.prototype.BlockStatement=function(e){var t="";return t+=this.pad("BLOCK:"),this.padding++,t+=this.pad(this.SubExpression(e)),e.program&&(t+=this.pad("PROGRAM:"),this.padding++,t+=this.accept(e.program),this.padding--),e.inverse&&(e.program&&this.padding++,t+=this.pad("{{^}}"),this.padding++,t+=this.accept(e.inverse),this.padding--,e.program&&this.padding--),this.padding--,t},i.prototype.PartialStatement=function(e){var t="PARTIAL:"+e.name.original;return e.params[0]&&(t+=" "+this.accept(e.params[0])),e.hash&&(t+=" "+this.accept(e.hash)),this.pad("{{> "+t+" }}")},i.prototype.ContentStatement=function(e){return this.pad("CONTENT[ '"+e.value+"' ]")},i.prototype.CommentStatement=function(e){return this.pad("{{! '"+e.value+"' }}")},i.prototype.SubExpression=function(e){for(var t,n=e.params,r=[],i=0,o=n.length;o>i;i++)r.push(this.accept(n[i]));return n="["+r.join(", ")+"]",t=e.hash?" "+this.accept(e.hash):"",this.accept(e.path)+" "+n+t},i.prototype.PathExpression=function(e){var t=e.parts.join("/");return(e.data?"@":"")+"PATH:"+t},i.prototype.StringLiteral=function(e){return'"'+e.value+'"'},i.prototype.NumberLiteral=function(e){return"NUMBER{"+e.value+"}"},i.prototype.BooleanLiteral=function(e){return"BOOLEAN{"+e.value+"}"},i.prototype.Hash=function(e){for(var t=e.pairs,n=[],r=0,i=t.length;i>r;r++)n.push(this.accept(t[r]));return"HASH{"+n.join(", ")+"}"},i.prototype.HashPair=function(e){return e.key+"="+this.accept(e.value)}},{"./visitor":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js":[function(e,t,n){"use strict";function r(){this.parents=[]}var i=e("../exception")["default"],o=e("./ast")["default"];r.prototype={constructor:r,mutating:!1,acceptKey:function(e,t){var n=this.accept(e[t]);if(this.mutating){if(n&&(!n.type||!o[n.type]))throw new i('Unexpected node type "'+n.type+'" found when accepting '+t+" on "+e.type);e[t]=n}},acceptRequired:function(e,t){if(this.acceptKey(e,t),!e[t])throw new i(e.type+" requires "+t)},acceptArray:function(e){for(var t=0,n=e.length;n>t;t++)this.acceptKey(e,t),e[t]||(e.splice(t,1),t--,n--)},accept:function(e){if(e){this.current&&this.parents.unshift(this.current),this.current=e;var t=this[e.type](e);return this.current=this.parents.shift(),!this.mutating||t?t:t!==!1?e:void 0}},Program:function(e){this.acceptArray(e.body)},MustacheStatement:function(e){this.acceptRequired(e,"path"),this.acceptArray(e.params),this.acceptKey(e,"hash")},BlockStatement:function(e){this.acceptRequired(e,"path"),this.acceptArray(e.params),this.acceptKey(e,"hash"),this.acceptKey(e,"program"),this.acceptKey(e,"inverse")},PartialStatement:function(e){this.acceptRequired(e,"name"),this.acceptArray(e.params),this.acceptKey(e,"hash")},ContentStatement:function(){},CommentStatement:function(){},SubExpression:function(e){this.acceptRequired(e,"path"),this.acceptArray(e.params),this.acceptKey(e,"hash")
},PartialExpression:function(e){this.acceptRequired(e,"name"),this.acceptArray(e.params),this.acceptKey(e,"hash")},PathExpression:function(){},StringLiteral:function(){},NumberLiteral:function(){},BooleanLiteral:function(){},Hash:function(e){this.acceptArray(e.pairs)},HashPair:function(e){this.acceptRequired(e,"value")}},n["default"]=r},{"../exception":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js","./ast":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js":[function(e,t,n){"use strict";function r(){}function i(e,t,n){void 0===t&&(t=e.length);var r=e[t-1],i=e[t-2];return r?"ContentStatement"===r.type?(i||!n?/\r?\n\s*?$/:/(^|\r?\n)\s*?$/).test(r.original):void 0:n}function o(e,t,n){void 0===t&&(t=-1);var r=e[t+1],i=e[t+2];return r?"ContentStatement"===r.type?(i||!n?/^\s*?\r?\n/:/^\s*?(\r?\n|$)/).test(r.original):void 0:n}function s(e,t,n){var r=e[null==t?0:t+1];if(r&&"ContentStatement"===r.type&&(n||!r.rightStripped)){var i=r.value;r.value=r.value.replace(n?/^\s+/:/^[ \t]*\r?\n?/,""),r.rightStripped=r.value!==i}}function a(e,t,n){var r=e[null==t?e.length-1:t-1];if(r&&"ContentStatement"===r.type&&(n||!r.leftStripped)){var i=r.value;return r.value=r.value.replace(n?/\s+$/:/[ \t]+$/,""),r.leftStripped=r.value!==i,r.leftStripped}}var u=e("./visitor")["default"];r.prototype=new u,r.prototype.Program=function(e){var t=!this.isRootSeen;this.isRootSeen=!0;for(var n=e.body,r=0,u=n.length;u>r;r++){var l=n[r],c=this.accept(l);if(c){var p=i(n,r,t),d=o(n,r,t),h=c.openStandalone&&p,f=c.closeStandalone&&d,m=c.inlineStandalone&&p&&d;c.close&&s(n,r,!0),c.open&&a(n,r,!0),m&&(s(n,r),a(n,r)&&"PartialStatement"===l.type&&(l.indent=/([ \t]+$)/.exec(n[r-1].original)[1])),h&&(s((l.program||l.inverse).body),a(n,r)),f&&(s(n,r),a((l.inverse||l.program).body))}}return e},r.prototype.BlockStatement=function(e){this.accept(e.program),this.accept(e.inverse);var t=e.program||e.inverse,n=e.program&&e.inverse,r=n,u=n;if(n&&n.chained)for(r=n.body[0].program;u.chained;)u=u.body[u.body.length-1].program;var l={open:e.openStrip.open,close:e.closeStrip.close,openStandalone:o(t.body),closeStandalone:i((r||t).body)};if(e.openStrip.close&&s(t.body,null,!0),n){var c=e.inverseStrip;c.open&&a(t.body,null,!0),c.close&&s(r.body,null,!0),e.closeStrip.open&&a(u.body,null,!0),i(t.body)&&o(r.body)&&(a(t.body),s(r.body))}else e.closeStrip.open&&a(t.body,null,!0);return l},r.prototype.MustacheStatement=function(e){return e.strip},r.prototype.PartialStatement=r.prototype.CommentStatement=function(e){var t=e.strip||{};return{inlineStandalone:!0,open:t.open,close:t.close}},n["default"]=r},{"./visitor":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js":[function(e,t,n){"use strict";function r(e,t){var n,r,o=t&&t.loc;o&&(n=o.start.line,r=o.start.column,e+=" - "+n+":"+r);for(var s=Error.prototype.constructor.call(this,e),a=0;a<i.length;a++)this[i[a]]=s[i[a]];o&&(this.lineNumber=n,this.column=r)}var i=["description","fileName","lineNumber","message","name","number","stack"];r.prototype=new Error,n["default"]=r},{}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/runtime.js":[function(e,t,n){"use strict";function r(e){var t=e&&e[0]||1,n=d;if(t!==n){if(n>t){var r=h[n],i=h[t];throw new p("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+r+") or downgrade your runtime to an older version ("+i+").")}throw new p("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")}}function i(e,t){if(!t)throw new p("No environment passed to template");if(!e||!e.main)throw new p("Unknown template object: "+typeof e);t.VM.checkRevision(e.compiler);var n=function(n,r,i){i.hash&&(r=c.extend({},r,i.hash)),n=t.VM.resolvePartial.call(this,n,r,i);var o=t.VM.invokePartial.call(this,n,r,i);if(null==o&&t.compile&&(i.partials[i.name]=t.compile(n,e.compilerOptions,t),o=i.partials[i.name](r,i)),null!=o){if(i.indent){for(var s=o.split("\n"),a=0,u=s.length;u>a&&(s[a]||a+1!==u);a++)s[a]=i.indent+s[a];o=s.join("\n")}return o}throw new p("The partial "+i.name+" could not be compiled when running in runtime-only mode")},r={strict:function(e,t){if(!(t in e))throw new p('"'+t+'" not defined in '+e);return e[t]},lookup:function(e,t){for(var n=e.length,r=0;n>r;r++)if(e[r]&&null!=e[r][t])return e[r][t]},lambda:function(e,t){return"function"==typeof e?e.call(t):e},escapeExpression:c.escapeExpression,invokePartial:n,fn:function(t){return e[t]},programs:[],program:function(e,t,n,r,i){var s=this.programs[e],a=this.fn(e);return t||i||r||n?s=o(this,e,a,t,n,r,i):s||(s=this.programs[e]=o(this,e,a)),s},data:function(e,t){for(;e&&t--;)e=e._parent;return e},merge:function(e,t){var n=e||t;return e&&t&&e!==t&&(n=c.extend({},t,e)),n},noop:t.VM.noop,compilerInfo:e.compiler},i=function(t,n){n=n||{};var o=n.data;i._setup(n),!n.partial&&e.useData&&(o=l(t,o));var s,a=e.useBlockParams?[]:void 0;return e.useDepths&&(s=n.depths?[t].concat(n.depths):[t]),e.main.call(r,t,r.helpers,r.partials,o,a,s)};return i.isTop=!0,i._setup=function(n){n.partial?(r.helpers=n.helpers,r.partials=n.partials):(r.helpers=r.merge(n.helpers,t.helpers),e.usePartial&&(r.partials=r.merge(n.partials,t.partials)))},i._child=function(t,n,i,s){if(e.useBlockParams&&!i)throw new p("must pass block params");if(e.useDepths&&!s)throw new p("must pass parent depths");return o(r,t,e[t],n,0,i,s)},i}function o(e,t,n,r,i,o,s){var a=function(t,i){return i=i||{},n.call(e,t,e.helpers,e.partials,i.data||r,o&&[i.blockParams].concat(o),s&&[t].concat(s))};return a.program=t,a.depth=s?s.length:0,a.blockParams=i||0,a}function s(e,t,n){return e?e.call||n.name||(n.name=e,e=n.partials[e]):e=n.partials[n.name],e}function a(e,t,n){if(n.partial=!0,void 0===e)throw new p("The partial "+n.name+" could not be found");return e instanceof Function?e(t,n):void 0}function u(){return""}function l(e,t){return t&&"root"in t||(t=t?f(t):{},t.root=e),t}var c=e("./utils"),p=e("./exception")["default"],d=e("./base").COMPILER_REVISION,h=e("./base").REVISION_CHANGES,f=e("./base").createFrame;n.checkRevision=r,n.template=i,n.program=o,n.resolvePartial=s,n.invokePartial=a,n.noop=u},{"./base":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/base.js","./exception":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js","./utils":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/safe-string.js":[function(e,t,n){"use strict";function r(e){this.string=e}r.prototype.toString=r.prototype.toHTML=function(){return""+this.string},n["default"]=r},{}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js":[function(e,t,n){"use strict";function r(e){return c[e]}function i(e){for(var t=1;t<arguments.length;t++)for(var n in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],n)&&(e[n]=arguments[t][n]);return e}function o(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1}function s(e){return e&&e.toHTML?e.toHTML():null==e?"":e?(e=""+e,d.test(e)?e.replace(p,r):e):e+""}function a(e){return e||0===e?m(e)&&0===e.length?!0:!1:!0}function u(e,t){return e.path=t,e}function l(e,t){return(e?e+".":"")+t}var c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},p=/[&<>"'`]/g,d=/[&<>"'`]/;n.extend=i;var h=Object.prototype.toString;n.toString=h;var f=function(e){return"function"==typeof e};f(/x/)&&(f=function(e){return"function"==typeof e&&"[object Function]"===h.call(e)});var f;n.isFunction=f;var m=Array.isArray||function(e){return e&&"object"==typeof e?"[object Array]"===h.call(e):!1};n.isArray=m,n.indexOf=o,n.escapeExpression=s,n.isEmpty=a,n.blockParams=u,n.appendContextPath=l},{}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/lib/index.js":[function(e,t){var n=e("../dist/cjs/handlebars")["default"];n.Visitor=e("../dist/cjs/handlebars/compiler/visitor")["default"];var r=e("../dist/cjs/handlebars/compiler/printer");if(n.PrintVisitor=r.PrintVisitor,n.print=r.print,t.exports=n,"undefined"!=typeof e&&e.extensions){var i=function(t,r){var i=e("fs"),o=i.readFileSync(r,"utf8");t.exports=n.compile(o)};e.extensions[".handlebars"]=i,e.extensions[".hbs"]=i}},{"../dist/cjs/handlebars":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars.js","../dist/cjs/handlebars/compiler/printer":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/printer.js","../dist/cjs/handlebars/compiler/visitor":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js",fs:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/browserify/lib/_empty.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map.js":[function(e,t,n){n.SourceMapGenerator=e("./source-map/source-map-generator").SourceMapGenerator,n.SourceMapConsumer=e("./source-map/source-map-consumer").SourceMapConsumer,n.SourceNode=e("./source-map/source-node").SourceNode},{"./source-map/source-map-consumer":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/source-map-consumer.js","./source-map/source-map-generator":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/source-map-generator.js","./source-map/source-node":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/source-node.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/array-set.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(){this._array=[],this._set={}}var r=e("./util");n.fromArray=function(e,t){for(var r=new n,i=0,o=e.length;o>i;i++)r.add(e[i],t);return r},n.prototype.add=function(e,t){var n=this.has(e),i=this._array.length;(!n||t)&&this._array.push(e),n||(this._set[r.toSetString(e)]=i)},n.prototype.has=function(e){return Object.prototype.hasOwnProperty.call(this._set,r.toSetString(e))},n.prototype.indexOf=function(e){if(this.has(e))return this._set[r.toSetString(e)];throw new Error('"'+e+'" is not in the set.')},n.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error("No element indexed by "+e)},n.prototype.toArray=function(){return this._array.slice()},t.ArraySet=n})},{"./util":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/util.js",amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/base64-vlq.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(e){return 0>e?(-e<<1)+1:(e<<1)+0}function r(e){var t=1===(1&e),n=e>>1;return t?-n:n}var i=e("./base64"),o=5,s=1<<o,a=s-1,u=s;t.encode=function(e){var t,r="",s=n(e);do t=s&a,s>>>=o,s>0&&(t|=u),r+=i.encode(t);while(s>0);return r},t.decode=function(e,t){var n,s,l=0,c=e.length,p=0,d=0;do{if(l>=c)throw new Error("Expected more digits in base 64 VLQ value.");s=i.decode(e.charAt(l++)),n=!!(s&u),s&=a,p+=s<<d,d+=o}while(n);t.value=r(p),t.rest=e.slice(l)}})},{"./base64":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/base64.js",amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/base64.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){var n={},r={};"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("").forEach(function(e,t){n[e]=t,r[t]=e}),t.encode=function(e){if(e in r)return r[e];throw new TypeError("Must be between 0 and 63: "+e)},t.decode=function(e){if(e in n)return n[e];throw new TypeError("Not a valid base 64 digit: "+e)}})},{amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/binary-search.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(e,t,r,i,o){var s=Math.floor((t-e)/2)+e,a=o(r,i[s],!0);return 0===a?s:a>0?t-s>1?n(s,t,r,i,o):s:s-e>1?n(e,s,r,i,o):0>e?-1:e}t.search=function(e,t,r){return 0===t.length?-1:n(-1,t.length,e,t,r)}})},{amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/mapping-list.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(e,t){var n=e.generatedLine,r=t.generatedLine,o=e.generatedColumn,s=t.generatedColumn;return r>n||r==n&&s>=o||i.compareByGeneratedPositions(e,t)<=0}function r(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}var i=e("./util");r.prototype.unsortedForEach=function(e,t){this._array.forEach(e,t)},r.prototype.add=function(e){n(this._last,e)?(this._last=e,this._array.push(e)):(this._sorted=!1,this._array.push(e))},r.prototype.toArray=function(){return this._sorted||(this._array.sort(i.compareByGeneratedPositions),this._sorted=!0),this._array},t.MappingList=r})},{"./util":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/util.js",amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/source-map-consumer.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(e){var t=e;"string"==typeof e&&(t=JSON.parse(e.replace(/^\)\]\}'/,"")));var n=r.getArg(t,"version"),i=r.getArg(t,"sources"),s=r.getArg(t,"names",[]),a=r.getArg(t,"sourceRoot",null),u=r.getArg(t,"sourcesContent",null),l=r.getArg(t,"mappings"),c=r.getArg(t,"file",null);if(n!=this._version)throw new Error("Unsupported version: "+n);i=i.map(r.normalize),this._names=o.fromArray(s,!0),this._sources=o.fromArray(i,!0),this.sourceRoot=a,this.sourcesContent=u,this._mappings=l,this.file=c}var r=e("./util"),i=e("./binary-search"),o=e("./array-set").ArraySet,s=e("./base64-vlq");n.fromSourceMap=function(e){var t=Object.create(n.prototype);return t._names=o.fromArray(e._names.toArray(),!0),t._sources=o.fromArray(e._sources.toArray(),!0),t.sourceRoot=e._sourceRoot,t.sourcesContent=e._generateSourcesContent(t._sources.toArray(),t.sourceRoot),t.file=e._file,t.__generatedMappings=e._mappings.toArray().slice(),t.__originalMappings=e._mappings.toArray().slice().sort(r.compareByOriginalPositions),t},n.prototype._version=3,Object.defineProperty(n.prototype,"sources",{get:function(){return this._sources.toArray().map(function(e){return null!=this.sourceRoot?r.join(this.sourceRoot,e):e},this)}}),n.prototype.__generatedMappings=null,Object.defineProperty(n.prototype,"_generatedMappings",{get:function(){return this.__generatedMappings||(this.__generatedMappings=[],this.__originalMappings=[],this._parseMappings(this._mappings,this.sourceRoot)),this.__generatedMappings}}),n.prototype.__originalMappings=null,Object.defineProperty(n.prototype,"_originalMappings",{get:function(){return this.__originalMappings||(this.__generatedMappings=[],this.__originalMappings=[],this._parseMappings(this._mappings,this.sourceRoot)),this.__originalMappings}}),n.prototype._nextCharIsMappingSeparator=function(e){var t=e.charAt(0);return";"===t||","===t},n.prototype._parseMappings=function(e){for(var t,n=1,i=0,o=0,a=0,u=0,l=0,c=e,p={};c.length>0;)if(";"===c.charAt(0))n++,c=c.slice(1),i=0;else if(","===c.charAt(0))c=c.slice(1);else{if(t={},t.generatedLine=n,s.decode(c,p),t.generatedColumn=i+p.value,i=t.generatedColumn,c=p.rest,c.length>0&&!this._nextCharIsMappingSeparator(c)){if(s.decode(c,p),t.source=this._sources.at(u+p.value),u+=p.value,c=p.rest,0===c.length||this._nextCharIsMappingSeparator(c))throw new Error("Found a source, but no line and column");if(s.decode(c,p),t.originalLine=o+p.value,o=t.originalLine,t.originalLine+=1,c=p.rest,0===c.length||this._nextCharIsMappingSeparator(c))throw new Error("Found a source and line, but no column");s.decode(c,p),t.originalColumn=a+p.value,a=t.originalColumn,c=p.rest,c.length>0&&!this._nextCharIsMappingSeparator(c)&&(s.decode(c,p),t.name=this._names.at(l+p.value),l+=p.value,c=p.rest)}this.__generatedMappings.push(t),"number"==typeof t.originalLine&&this.__originalMappings.push(t)}this.__generatedMappings.sort(r.compareByGeneratedPositions),this.__originalMappings.sort(r.compareByOriginalPositions)},n.prototype._findMapping=function(e,t,n,r,o){if(e[n]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+e[n]);if(e[r]<0)throw new TypeError("Column must be greater than or equal to 0, got "+e[r]);return i.search(e,t,o)},n.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var t=this._generatedMappings[e];if(e+1<this._generatedMappings.length){var n=this._generatedMappings[e+1];if(t.generatedLine===n.generatedLine){t.lastGeneratedColumn=n.generatedColumn-1;continue}}t.lastGeneratedColumn=1/0}},n.prototype.originalPositionFor=function(e){var t={generatedLine:r.getArg(e,"line"),generatedColumn:r.getArg(e,"column")},n=this._findMapping(t,this._generatedMappings,"generatedLine","generatedColumn",r.compareByGeneratedPositions);if(n>=0){var i=this._generatedMappings[n];if(i.generatedLine===t.generatedLine){var o=r.getArg(i,"source",null);return null!=o&&null!=this.sourceRoot&&(o=r.join(this.sourceRoot,o)),{source:o,line:r.getArg(i,"originalLine",null),column:r.getArg(i,"originalColumn",null),name:r.getArg(i,"name",null)}}}return{source:null,line:null,column:null,name:null}},n.prototype.sourceContentFor=function(e){if(!this.sourcesContent)return null;if(null!=this.sourceRoot&&(e=r.relative(this.sourceRoot,e)),this._sources.has(e))return this.sourcesContent[this._sources.indexOf(e)];var t;if(null!=this.sourceRoot&&(t=r.urlParse(this.sourceRoot))){var n=e.replace(/^file:\/\//,"");if("file"==t.scheme&&this._sources.has(n))return this.sourcesContent[this._sources.indexOf(n)];if((!t.path||"/"==t.path)&&this._sources.has("/"+e))return this.sourcesContent[this._sources.indexOf("/"+e)]}throw new Error('"'+e+'" is not in the SourceMap.')},n.prototype.generatedPositionFor=function(e){var t={source:r.getArg(e,"source"),originalLine:r.getArg(e,"line"),originalColumn:r.getArg(e,"column")};null!=this.sourceRoot&&(t.source=r.relative(this.sourceRoot,t.source));var n=this._findMapping(t,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions);if(n>=0){var i=this._originalMappings[n];return{line:r.getArg(i,"generatedLine",null),column:r.getArg(i,"generatedColumn",null),lastColumn:r.getArg(i,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}},n.prototype.allGeneratedPositionsFor=function(e){var t={source:r.getArg(e,"source"),originalLine:r.getArg(e,"line"),originalColumn:1/0};null!=this.sourceRoot&&(t.source=r.relative(this.sourceRoot,t.source));var n=[],i=this._findMapping(t,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions);if(i>=0)for(var o=this._originalMappings[i];o&&o.originalLine===t.originalLine;)n.push({line:r.getArg(o,"generatedLine",null),column:r.getArg(o,"generatedColumn",null),lastColumn:r.getArg(o,"lastGeneratedColumn",null)}),o=this._originalMappings[--i];return n.reverse()},n.GENERATED_ORDER=1,n.ORIGINAL_ORDER=2,n.prototype.eachMapping=function(e,t,i){var o,s=t||null,a=i||n.GENERATED_ORDER;switch(a){case n.GENERATED_ORDER:o=this._generatedMappings;break;case n.ORIGINAL_ORDER:o=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var u=this.sourceRoot;o.map(function(e){var t=e.source;return null!=t&&null!=u&&(t=r.join(u,t)),{source:t,generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:e.name}}).forEach(e,s)},t.SourceMapConsumer=n})},{"./array-set":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/array-set.js","./base64-vlq":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/base64-vlq.js","./binary-search":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/binary-search.js","./util":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/util.js",amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/source-map-generator.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(e){e||(e={}),this._file=i.getArg(e,"file",null),this._sourceRoot=i.getArg(e,"sourceRoot",null),this._skipValidation=i.getArg(e,"skipValidation",!1),this._sources=new o,this._names=new o,this._mappings=new s,this._sourcesContents=null}var r=e("./base64-vlq"),i=e("./util"),o=e("./array-set").ArraySet,s=e("./mapping-list").MappingList;n.prototype._version=3,n.fromSourceMap=function(e){var t=e.sourceRoot,r=new n({file:e.file,sourceRoot:t});return e.eachMapping(function(e){var n={generated:{line:e.generatedLine,column:e.generatedColumn}};null!=e.source&&(n.source=e.source,null!=t&&(n.source=i.relative(t,n.source)),n.original={line:e.originalLine,column:e.originalColumn},null!=e.name&&(n.name=e.name)),r.addMapping(n)}),e.sources.forEach(function(t){var n=e.sourceContentFor(t);null!=n&&r.setSourceContent(t,n)}),r},n.prototype.addMapping=function(e){var t=i.getArg(e,"generated"),n=i.getArg(e,"original",null),r=i.getArg(e,"source",null),o=i.getArg(e,"name",null);this._skipValidation||this._validateMapping(t,n,r,o),null==r||this._sources.has(r)||this._sources.add(r),null==o||this._names.has(o)||this._names.add(o),this._mappings.add({generatedLine:t.line,generatedColumn:t.column,originalLine:null!=n&&n.line,originalColumn:null!=n&&n.column,source:r,name:o})},n.prototype.setSourceContent=function(e,t){var n=e;null!=this._sourceRoot&&(n=i.relative(this._sourceRoot,n)),null!=t?(this._sourcesContents||(this._sourcesContents={}),this._sourcesContents[i.toSetString(n)]=t):this._sourcesContents&&(delete this._sourcesContents[i.toSetString(n)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},n.prototype.applySourceMap=function(e,t,n){var r=t;if(null==t){if(null==e.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');r=e.file}var s=this._sourceRoot;null!=s&&(r=i.relative(s,r));var a=new o,u=new o;this._mappings.unsortedForEach(function(t){if(t.source===r&&null!=t.originalLine){var o=e.originalPositionFor({line:t.originalLine,column:t.originalColumn});null!=o.source&&(t.source=o.source,null!=n&&(t.source=i.join(n,t.source)),null!=s&&(t.source=i.relative(s,t.source)),t.originalLine=o.line,t.originalColumn=o.column,null!=o.name&&(t.name=o.name))}var l=t.source;null==l||a.has(l)||a.add(l);var c=t.name;null==c||u.has(c)||u.add(c)},this),this._sources=a,this._names=u,e.sources.forEach(function(t){var r=e.sourceContentFor(t);null!=r&&(null!=n&&(t=i.join(n,t)),null!=s&&(t=i.relative(s,t)),this.setSourceContent(t,r))},this)},n.prototype._validateMapping=function(e,t,n,r){if(!(e&&"line"in e&&"column"in e&&e.line>0&&e.column>=0&&!t&&!n&&!r||e&&"line"in e&&"column"in e&&t&&"line"in t&&"column"in t&&e.line>0&&e.column>=0&&t.line>0&&t.column>=0&&n))throw new Error("Invalid mapping: "+JSON.stringify({generated:e,source:n,original:t,name:r}))},n.prototype._serializeMappings=function(){for(var e,t=0,n=1,o=0,s=0,a=0,u=0,l="",c=this._mappings.toArray(),p=0,d=c.length;d>p;p++){if(e=c[p],e.generatedLine!==n)for(t=0;e.generatedLine!==n;)l+=";",n++;else if(p>0){if(!i.compareByGeneratedPositions(e,c[p-1]))continue;l+=","}l+=r.encode(e.generatedColumn-t),t=e.generatedColumn,null!=e.source&&(l+=r.encode(this._sources.indexOf(e.source)-u),u=this._sources.indexOf(e.source),l+=r.encode(e.originalLine-1-s),s=e.originalLine-1,l+=r.encode(e.originalColumn-o),o=e.originalColumn,null!=e.name&&(l+=r.encode(this._names.indexOf(e.name)-a),a=this._names.indexOf(e.name)))}return l},n.prototype._generateSourcesContent=function(e,t){return e.map(function(e){if(!this._sourcesContents)return null;null!=t&&(e=i.relative(t,e));var n=i.toSetString(e);return Object.prototype.hasOwnProperty.call(this._sourcesContents,n)?this._sourcesContents[n]:null},this)},n.prototype.toJSON=function(){var e={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(e.file=this._file),null!=this._sourceRoot&&(e.sourceRoot=this._sourceRoot),this._sourcesContents&&(e.sourcesContent=this._generateSourcesContent(e.sources,e.sourceRoot)),e},n.prototype.toString=function(){return JSON.stringify(this)},t.SourceMapGenerator=n})},{"./array-set":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/array-set.js","./base64-vlq":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/base64-vlq.js","./mapping-list":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/mapping-list.js","./util":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/util.js",amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/source-node.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(e,t,n,r,i){this.children=[],this.sourceContents={},this.line=null==e?null:e,this.column=null==t?null:t,this.source=null==n?null:n,this.name=null==i?null:i,this[a]=!0,null!=r&&this.add(r)}var r=e("./source-map-generator").SourceMapGenerator,i=e("./util"),o=/(\r?\n)/,s=10,a="$$$isSourceNode$$$";n.fromStringWithSourceMap=function(e,t,r){function s(e,t){if(null===e||void 0===e.source)a.add(t);else{var o=r?i.join(r,e.source):e.source;a.add(new n(e.originalLine,e.originalColumn,o,t,e.name))}}var a=new n,u=e.split(o),l=function(){var e=u.shift(),t=u.shift()||"";return e+t},c=1,p=0,d=null;return t.eachMapping(function(e){if(null!==d){if(!(c<e.generatedLine)){var t=u[0],n=t.substr(0,e.generatedColumn-p);return u[0]=t.substr(e.generatedColumn-p),p=e.generatedColumn,s(d,n),void(d=e)}var n="";s(d,l()),c++,p=0}for(;c<e.generatedLine;)a.add(l()),c++;if(p<e.generatedColumn){var t=u[0];a.add(t.substr(0,e.generatedColumn)),u[0]=t.substr(e.generatedColumn),p=e.generatedColumn}d=e},this),u.length>0&&(d&&s(d,l()),a.add(u.join(""))),t.sources.forEach(function(e){var n=t.sourceContentFor(e);null!=n&&(null!=r&&(e=i.join(r,e)),a.setSourceContent(e,n))}),a},n.prototype.add=function(e){if(Array.isArray(e))e.forEach(function(e){this.add(e)},this);else{if(!e[a]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);e&&this.children.push(e)}return this},n.prototype.prepend=function(e){if(Array.isArray(e))for(var t=e.length-1;t>=0;t--)this.prepend(e[t]);else{if(!e[a]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);this.children.unshift(e)}return this},n.prototype.walk=function(e){for(var t,n=0,r=this.children.length;r>n;n++)t=this.children[n],t[a]?t.walk(e):""!==t&&e(t,{source:this.source,line:this.line,column:this.column,name:this.name})},n.prototype.join=function(e){var t,n,r=this.children.length;if(r>0){for(t=[],n=0;r-1>n;n++)t.push(this.children[n]),t.push(e);t.push(this.children[n]),this.children=t}return this},n.prototype.replaceRight=function(e,t){var n=this.children[this.children.length-1];return n[a]?n.replaceRight(e,t):"string"==typeof n?this.children[this.children.length-1]=n.replace(e,t):this.children.push("".replace(e,t)),this},n.prototype.setSourceContent=function(e,t){this.sourceContents[i.toSetString(e)]=t},n.prototype.walkSourceContents=function(e){for(var t=0,n=this.children.length;n>t;t++)this.children[t][a]&&this.children[t].walkSourceContents(e);for(var r=Object.keys(this.sourceContents),t=0,n=r.length;n>t;t++)e(i.fromSetString(r[t]),this.sourceContents[r[t]])},n.prototype.toString=function(){var e="";return this.walk(function(t){e+=t}),e},n.prototype.toStringWithSourceMap=function(e){var t={code:"",line:1,column:0},n=new r(e),i=!1,o=null,a=null,u=null,l=null;return this.walk(function(e,r){t.code+=e,null!==r.source&&null!==r.line&&null!==r.column?((o!==r.source||a!==r.line||u!==r.column||l!==r.name)&&n.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:t.line,column:t.column},name:r.name}),o=r.source,a=r.line,u=r.column,l=r.name,i=!0):i&&(n.addMapping({generated:{line:t.line,column:t.column}}),o=null,i=!1);for(var c=0,p=e.length;p>c;c++)e.charCodeAt(c)===s?(t.line++,t.column=0,c+1===p?(o=null,i=!1):i&&n.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:t.line,column:t.column},name:r.name})):t.column++}),this.walkSourceContents(function(e,t){n.setSourceContent(e,t)}),{code:t.code,map:n}},t.SourceNode=n})},{"./source-map-generator":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/source-map-generator.js","./util":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/util.js",amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/util.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(e,t,n){if(t in e)return e[t];if(3===arguments.length)return n;throw new Error('"'+t+'" is a required argument.')}function r(e){var t=e.match(h);return t?{scheme:t[1],auth:t[2],host:t[3],port:t[4],path:t[5]}:null}function i(e){var t="";return e.scheme&&(t+=e.scheme+":"),t+="//",e.auth&&(t+=e.auth+"@"),e.host&&(t+=e.host),e.port&&(t+=":"+e.port),e.path&&(t+=e.path),t}function o(e){var t=e,n=r(e);if(n){if(!n.path)return e;t=n.path}for(var o,s="/"===t.charAt(0),a=t.split(/\/+/),u=0,l=a.length-1;l>=0;l--)o=a[l],"."===o?a.splice(l,1):".."===o?u++:u>0&&(""===o?(a.splice(l+1,u),u=0):(a.splice(l,2),u--));return t=a.join("/"),""===t&&(t=s?"/":"."),n?(n.path=t,i(n)):t}function s(e,t){""===e&&(e="."),""===t&&(t=".");var n=r(t),s=r(e);if(s&&(e=s.path||"/"),n&&!n.scheme)return s&&(n.scheme=s.scheme),i(n);if(n||t.match(f))return t;if(s&&!s.host&&!s.path)return s.host=t,i(s);var a="/"===t.charAt(0)?t:o(e.replace(/\/+$/,"")+"/"+t);
return s?(s.path=a,i(s)):a}function a(e,t){""===e&&(e="."),e=e.replace(/\/$/,"");var n=r(e);return"/"==t.charAt(0)&&n&&"/"==n.path?t.slice(1):0===t.indexOf(e+"/")?t.substr(e.length+1):t}function u(e){return"$"+e}function l(e){return e.substr(1)}function c(e,t){var n=e||"",r=t||"";return(n>r)-(r>n)}function p(e,t,n){var r;return(r=c(e.source,t.source))?r:(r=e.originalLine-t.originalLine)?r:(r=e.originalColumn-t.originalColumn,r||n?r:(r=c(e.name,t.name))?r:(r=e.generatedLine-t.generatedLine,r?r:e.generatedColumn-t.generatedColumn))}function d(e,t,n){var r;return(r=e.generatedLine-t.generatedLine)?r:(r=e.generatedColumn-t.generatedColumn,r||n?r:(r=c(e.source,t.source))?r:(r=e.originalLine-t.originalLine)?r:(r=e.originalColumn-t.originalColumn,r?r:c(e.name,t.name)))}t.getArg=n;var h=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/,f=/^data:.+\,.+$/;t.urlParse=r,t.urlGenerate=i,t.normalize=o,t.join=s,t.relative=a,t.toSetString=u,t.fromSetString=l,t.compareByOriginalPositions=p,t.compareByGeneratedPositions=d})},{amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js":[function(e,t){(function(n,r){"use strict";function i(t,i){function o(e){var t,n;for(t=0;e[t];t+=1)if(n=e[t],"."===n)e.splice(t,1),t-=1;else if(".."===n){if(1===t&&(".."===e[2]||".."===e[0]))break;t>0&&(e.splice(t-1,2),t-=2)}}function s(e,t){var n;return e&&"."===e.charAt(0)&&t&&(n=t.split("/"),n=n.slice(0,n.length-1),n=n.concat(e.split("/")),o(n),e=n.join("/")),e}function a(e){return function(t){return s(t,e)}}function u(e){function t(t){f[e]=t}return t.fromText=function(){throw new Error("amdefine does not implement load.fromText")},t}function l(e,n,o){var s,a,u,l;if(e)a=f[e]={},u={id:e,uri:r,exports:a},s=p(i,a,u,e);else{if(m)throw new Error("amdefine with no module ID cannot be called more than once per file.");m=!0,a=t.exports,u=t,s=p(i,a,u,t.id)}n&&(n=n.map(function(e){return s(e)})),l="function"==typeof o?o.apply(u.exports,n):o,void 0!==l&&(u.exports=l,e&&(f[e]=u.exports))}function c(e,t,n){Array.isArray(e)?(n=t,t=e,e=void 0):"string"!=typeof e&&(n=e,e=t=void 0),t&&!Array.isArray(t)&&(n=t,t=void 0),t||(t=["require","exports","module"]),e?h[e]=[e,t,n]:l(e,t,n)}var p,d,h={},f={},m=!1,g=e("path");return p=function(e,t,r,i){function o(o,s){return"string"==typeof o?d(e,t,r,o,i):(o=o.map(function(n){return d(e,t,r,n,i)}),void n.nextTick(function(){s.apply(null,o)}))}return o.toUrl=function(e){return 0===e.indexOf(".")?s(e,g.dirname(r.filename)):e},o},i=i||function(){return t.require.apply(t,arguments)},d=function(e,t,n,r,i){var o,c,m=r.indexOf("!"),g=r;if(-1===m){if(r=s(r,i),"require"===r)return p(e,t,n,i);if("exports"===r)return t;if("module"===r)return n;if(f.hasOwnProperty(r))return f[r];if(h[r])return l.apply(null,h[r]),f[r];if(e)return e(g);throw new Error("No module with ID: "+r)}return o=r.substring(0,m),r=r.substring(m+1,r.length),c=d(e,t,n,o,i),r=c.normalize?c.normalize(r,a(i)):s(r,i),f[r]?f[r]:(c.load(r,p(e,t,n,i),u(r),{}),f[r])},c.require=function(e){return f[e]?f[e]:h[e]?(l.apply(null,h[e]),f[e]):void 0},c.amd={},c}t.exports=i}).call(this,e("_process"),"/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js")},{_process:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/browserify/node_modules/process/browser.js",path:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/browserify/node_modules/path-browserify/index.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/jquery/dist/jquery.js":[function(e,t){!function(e,n){"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=e.length,n=it.type(e);return"function"===n||it.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function r(e,t,n){if(it.isFunction(t))return it.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return it.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(dt.test(t))return it.filter(t,e,n);t=it.filter(t,e)}return it.grep(e,function(e){return it.inArray(e,t)>=0!==n})}function i(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}function o(e){var t=bt[e]={};return it.each(e.match(wt)||[],function(e,n){t[n]=!0}),t}function s(){ft.addEventListener?(ft.removeEventListener("DOMContentLoaded",a,!1),e.removeEventListener("load",a,!1)):(ft.detachEvent("onreadystatechange",a),e.detachEvent("onload",a))}function a(){(ft.addEventListener||"load"===event.type||"complete"===ft.readyState)&&(s(),it.ready())}function u(e,t,n){if(void 0===n&&1===e.nodeType){var r="data-"+t.replace(Ct,"-$1").toLowerCase();if(n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:kt.test(n)?it.parseJSON(n):n}catch(i){}it.data(e,t,n)}else n=void 0}return n}function l(e){var t;for(t in e)if(("data"!==t||!it.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function c(e,t,n,r){if(it.acceptData(e)){var i,o,s=it.expando,a=e.nodeType,u=a?it.cache:e,l=a?e[s]:e[s]&&s;if(l&&u[l]&&(r||u[l].data)||void 0!==n||"string"!=typeof t)return l||(l=a?e[s]=X.pop()||it.guid++:s),u[l]||(u[l]=a?{}:{toJSON:it.noop}),("object"==typeof t||"function"==typeof t)&&(r?u[l]=it.extend(u[l],t):u[l].data=it.extend(u[l].data,t)),o=u[l],r||(o.data||(o.data={}),o=o.data),void 0!==n&&(o[it.camelCase(t)]=n),"string"==typeof t?(i=o[t],null==i&&(i=o[it.camelCase(t)])):i=o,i}}function p(e,t,n){if(it.acceptData(e)){var r,i,o=e.nodeType,s=o?it.cache:e,a=o?e[it.expando]:it.expando;if(s[a]){if(t&&(r=n?s[a]:s[a].data)){it.isArray(t)?t=t.concat(it.map(t,it.camelCase)):t in r?t=[t]:(t=it.camelCase(t),t=t in r?[t]:t.split(" ")),i=t.length;for(;i--;)delete r[t[i]];if(n?!l(r):!it.isEmptyObject(r))return}(n||(delete s[a].data,l(s[a])))&&(o?it.cleanData([e],!0):nt.deleteExpando||s!=s.window?delete s[a]:s[a]=null)}}}function d(){return!0}function h(){return!1}function f(){try{return ft.activeElement}catch(e){}}function m(e){var t=Mt.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}function g(e,t){var n,r,i=0,o=typeof e.getElementsByTagName!==xt?e.getElementsByTagName(t||"*"):typeof e.querySelectorAll!==xt?e.querySelectorAll(t||"*"):void 0;if(!o)for(o=[],n=e.childNodes||e;null!=(r=n[i]);i++)!t||it.nodeName(r,t)?o.push(r):it.merge(o,g(r,t));return void 0===t||t&&it.nodeName(e,t)?it.merge([e],o):o}function v(e){Tt.test(e.type)&&(e.defaultChecked=e.checked)}function y(e,t){return it.nodeName(e,"table")&&it.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function w(e){return e.type=(null!==it.find.attr(e,"type"))+"/"+e.type,e}function b(e){var t=Gt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function _(e,t){for(var n,r=0;null!=(n=e[r]);r++)it._data(n,"globalEval",!t||it._data(t[r],"globalEval"))}function S(e,t){if(1===t.nodeType&&it.hasData(e)){var n,r,i,o=it._data(e),s=it._data(t,o),a=o.events;if(a){delete s.handle,s.events={};for(n in a)for(r=0,i=a[n].length;i>r;r++)it.event.add(t,n,a[n][r])}s.data&&(s.data=it.extend({},s.data))}}function x(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!nt.noCloneEvent&&t[it.expando]){i=it._data(t);for(r in i.events)it.removeEvent(t,r,i.handle);t.removeAttribute(it.expando)}"script"===n&&t.text!==e.text?(w(t).text=e.text,b(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),nt.html5Clone&&e.innerHTML&&!it.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Tt.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}}function k(t,n){var r,i=it(n.createElement(t)).appendTo(n.body),o=e.getDefaultComputedStyle&&(r=e.getDefaultComputedStyle(i[0]))?r.display:it.css(i[0],"display");return i.detach(),o}function C(e){var t=ft,n=Zt[e];return n||(n=k(e,t),"none"!==n&&n||(Qt=(Qt||it("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=(Qt[0].contentWindow||Qt[0].contentDocument).document,t.write(),t.close(),n=k(e,t),Qt.detach()),Zt[e]=n),n}function j(e,t){return{get:function(){var n=e();if(null!=n)return n?void delete this.get:(this.get=t).apply(this,arguments)}}}function E(e,t){if(t in e)return t;for(var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=hn.length;i--;)if(t=hn[i]+n,t in e)return t;return r}function A(e,t){for(var n,r,i,o=[],s=0,a=e.length;a>s;s++)r=e[s],r.style&&(o[s]=it._data(r,"olddisplay"),n=r.style.display,t?(o[s]||"none"!==n||(r.style.display=""),""===r.style.display&&At(r)&&(o[s]=it._data(r,"olddisplay",C(r.nodeName)))):(i=At(r),(n&&"none"!==n||!i)&&it._data(r,"olddisplay",i?n:it.css(r,"display"))));for(s=0;a>s;s++)r=e[s],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[s]||"":"none"));return e}function N(e,t,n){var r=ln.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function T(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=it.css(e,n+Et[o],!0,i)),r?("content"===n&&(s-=it.css(e,"padding"+Et[o],!0,i)),"margin"!==n&&(s-=it.css(e,"border"+Et[o]+"Width",!0,i))):(s+=it.css(e,"padding"+Et[o],!0,i),"padding"!==n&&(s+=it.css(e,"border"+Et[o]+"Width",!0,i)));return s}function P(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=en(e),s=nt.boxSizing&&"border-box"===it.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=tn(e,t,o),(0>i||null==i)&&(i=e.style[t]),rn.test(i))return i;r=s&&(nt.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+T(e,t,n||(s?"border":"content"),r,o)+"px"}function L(e,t,n,r,i){return new L.prototype.init(e,t,n,r,i)}function O(){return setTimeout(function(){fn=void 0}),fn=it.now()}function R(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=Et[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function D(e,t,n){for(var r,i=(bn[t]||[]).concat(bn["*"]),o=0,s=i.length;s>o;o++)if(r=i[o].call(n,t,e))return r}function M(e,t,n){var r,i,o,s,a,u,l,c,p=this,d={},h=e.style,f=e.nodeType&&At(e),m=it._data(e,"fxshow");n.queue||(a=it._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,it.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],l=it.css(e,"display"),c="none"===l?it._data(e,"olddisplay")||C(e.nodeName):l,"inline"===c&&"none"===it.css(e,"float")&&(nt.inlineBlockNeedsLayout&&"inline"!==C(e.nodeName)?h.zoom=1:h.display="inline-block")),n.overflow&&(h.overflow="hidden",nt.shrinkWrapBlocks()||p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],gn.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(f?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;f=!0}d[r]=m&&m[r]||it.style(e,r)}else l=void 0;if(it.isEmptyObject(d))"inline"===("none"===l?C(e.nodeName):l)&&(h.display=l);else{m?"hidden"in m&&(f=m.hidden):m=it._data(e,"fxshow",{}),o&&(m.hidden=!f),f?it(e).show():p.done(function(){it(e).hide()}),p.done(function(){var t;it._removeData(e,"fxshow");for(t in d)it.style(e,t,d[t])});for(r in d)s=D(f?m[r]:0,r,p),r in m||(m[r]=s.start,f&&(s.end=s.start,s.start="width"===r||"height"===r?1:0))}}function I(e,t){var n,r,i,o,s;for(n in e)if(r=it.camelCase(n),i=t[r],o=e[n],it.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=it.cssHooks[r],s&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function H(e,t,n){var r,i,o=0,s=wn.length,a=it.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=fn||O(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,s=0,u=l.tweens.length;u>s;s++)l.tweens[s].run(o);return a.notifyWith(e,[l,o,n]),1>o&&u?n:(a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:it.extend({},t),opts:it.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:fn||O(),duration:n.duration,tweens:[],createTween:function(t,n){var r=it.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)l.tweens[n].run(1);return t?a.resolveWith(e,[l,t]):a.rejectWith(e,[l,t]),this}}),c=l.props;for(I(c,l.opts.specialEasing);s>o;o++)if(r=wn[o].call(l,e,c,l.opts))return r;return it.map(c,D,l),it.isFunction(l.opts.start)&&l.opts.start.call(e,l),it.fx.timer(it.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function U(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(wt)||[];if(it.isFunction(n))for(;r=o[i++];)"+"===r.charAt(0)?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function B(e,t,n,r){function i(a){var u;return o[a]=!0,it.each(e[a]||[],function(e,a){var l=a(t,n,r);return"string"!=typeof l||s||o[l]?s?!(u=l):void 0:(t.dataTypes.unshift(l),i(l),!1)}),u}var o={},s=e===Wn;return i(t.dataTypes[0])||!o["*"]&&i("*")}function $(e,t){var n,r,i=it.ajaxSettings.flatOptions||{};for(r in t)void 0!==t[r]&&((i[r]?e:n||(n={}))[r]=t[r]);return n&&it.extend(!0,e,n),e}function q(e,t,n){for(var r,i,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(s in a)if(a[s]&&a[s].test(i)){u.unshift(s);break}if(u[0]in n)o=u[0];else{for(s in n){if(!u[0]||e.converters[s+" "+u[0]]){o=s;break}r||(r=s)}o=o||r}return o?(o!==u[0]&&u.unshift(o),n[o]):void 0}function F(e,t,n,r){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(s=l[u+" "+o]||l["* "+o],!s)for(i in l)if(a=i.split(" "),a[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){s===!0?s=l[i]:l[i]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(p){return{state:"parsererror",error:s?p:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}function W(e,t,n,r){var i;if(it.isArray(t))it.each(t,function(t,i){n||Xn.test(e)?r(e,i):W(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==it.type(t))r(e,t);else for(i in t)W(e+"["+i+"]",t[i],n,r)}function z(){try{return new e.XMLHttpRequest}catch(t){}}function V(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}function G(e){return it.isWindow(e)?e:9===e.nodeType?e.defaultView||e.parentWindow:!1}var X=[],K=X.slice,J=X.concat,Y=X.push,Q=X.indexOf,Z={},et=Z.toString,tt=Z.hasOwnProperty,nt={},rt="1.11.2",it=function(e,t){return new it.fn.init(e,t)},ot=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,st=/^-ms-/,at=/-([\da-z])/gi,ut=function(e,t){return t.toUpperCase()};it.fn=it.prototype={jquery:rt,constructor:it,selector:"",length:0,toArray:function(){return K.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:K.call(this)},pushStack:function(e){var t=it.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return it.each(this,e,t)},map:function(e){return this.pushStack(it.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(K.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:Y,sort:X.sort,splice:X.splice},it.extend=it.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||it.isFunction(s)||(s={}),a===u&&(s=this,a--);u>a;a++)if(null!=(i=arguments[a]))for(r in i)e=s[r],n=i[r],s!==n&&(l&&n&&(it.isPlainObject(n)||(t=it.isArray(n)))?(t?(t=!1,o=e&&it.isArray(e)?e:[]):o=e&&it.isPlainObject(e)?e:{},s[r]=it.extend(l,o,n)):void 0!==n&&(s[r]=n));return s},it.extend({expando:"jQuery"+(rt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===it.type(e)},isArray:Array.isArray||function(e){return"array"===it.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!it.isArray(e)&&e-parseFloat(e)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==it.type(e)||e.nodeType||it.isWindow(e))return!1;try{if(e.constructor&&!tt.call(e,"constructor")&&!tt.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}if(nt.ownLast)for(t in e)return tt.call(e,t);for(t in e);return void 0===t||tt.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?Z[et.call(e)]||"object":typeof e},globalEval:function(t){t&&it.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(st,"ms-").replace(at,ut)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,r){var i,o=0,s=e.length,a=n(e);if(r){if(a)for(;s>o&&(i=t.apply(e[o],r),i!==!1);o++);else for(o in e)if(i=t.apply(e[o],r),i===!1)break}else if(a)for(;s>o&&(i=t.call(e[o],o,e[o]),i!==!1);o++);else for(o in e)if(i=t.call(e[o],o,e[o]),i===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(ot,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?it.merge(r,"string"==typeof e?[e]:e):Y.call(r,e)),r},inArray:function(e,t,n){var r;if(t){if(Q)return Q.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;n>r;)e[i++]=t[r++];if(n!==n)for(;void 0!==t[r];)e[i++]=t[r++];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,s=e.length,a=!n;s>o;o++)r=!t(e[o],o),r!==a&&i.push(e[o]);return i},map:function(e,t,r){var i,o=0,s=e.length,a=n(e),u=[];if(a)for(;s>o;o++)i=t(e[o],o,r),null!=i&&u.push(i);else for(o in e)i=t(e[o],o,r),null!=i&&u.push(i);return J.apply([],u)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(i=e[t],t=e,e=i),it.isFunction(e)?(n=K.call(arguments,2),r=function(){return e.apply(t||this,n.concat(K.call(arguments)))},r.guid=e.guid=e.guid||it.guid++,r):void 0},now:function(){return+new Date},support:nt}),it.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){Z["[object "+t+"]"]=t.toLowerCase()});var lt=function(e){function t(e,t,n,r){var i,o,s,a,u,l,p,h,f,m;if((t?t.ownerDocument||t:B)!==L&&P(t),t=t||L,n=n||[],a=t.nodeType,"string"!=typeof e||!e||1!==a&&9!==a&&11!==a)return n;if(!r&&R){if(11!==a&&(i=yt.exec(e)))if(s=i[1]){if(9===a){if(o=t.getElementById(s),!o||!o.parentNode)return n;if(o.id===s)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(s))&&H(t,o)&&o.id===s)return n.push(o),n}else{if(i[2])return Q.apply(n,t.getElementsByTagName(e)),n;if((s=i[3])&&_.getElementsByClassName)return Q.apply(n,t.getElementsByClassName(s)),n}if(_.qsa&&(!D||!D.test(e))){if(h=p=U,f=t,m=1!==a&&e,1===a&&"object"!==t.nodeName.toLowerCase()){for(l=C(e),(p=t.getAttribute("id"))?h=p.replace(bt,"\\$&"):t.setAttribute("id",h),h="[id='"+h+"'] ",u=l.length;u--;)l[u]=h+d(l[u]);f=wt.test(e)&&c(t.parentNode)||t,m=l.join(",")}if(m)try{return Q.apply(n,f.querySelectorAll(m)),n}catch(g){}finally{p||t.removeAttribute("id")}}}return E(e.replace(ut,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>S.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[U]=!0,e}function i(e){var t=L.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=e.length;r--;)S.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||G)-(~e.sourceIndex||G);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function p(){}function d(e){for(var t=0,n=e.length,r="";n>t;t++)r+=e[t].value;return r}function h(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=q++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,s){var a,u,l=[$,o];if(s){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,s))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(u=t[U]||(t[U]={}),(a=u[r])&&a[0]===$&&a[1]===o)return l[2]=a[2];if(u[r]=l,l[2]=e(t,n,s))return!0}}}function f(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function m(e,n,r){for(var i=0,o=n.length;o>i;i++)t(e,n[i],r);return r}function g(e,t,n,r,i){for(var o,s=[],a=0,u=e.length,l=null!=t;u>a;a++)(o=e[a])&&(!n||n(o,r,i))&&(s.push(o),l&&t.push(a));return s}function v(e,t,n,i,o,s){return i&&!i[U]&&(i=v(i)),o&&!o[U]&&(o=v(o,s)),r(function(r,s,a,u){var l,c,p,d=[],h=[],f=s.length,v=r||m(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?v:g(v,d,e,a,u),w=n?o||(r?e:f||i)?[]:s:y;if(n&&n(y,w,a,u),i)for(l=g(w,h),i(l,[],a,u),c=l.length;c--;)(p=l[c])&&(w[h[c]]=!(y[h[c]]=p));if(r){if(o||e){if(o){for(l=[],c=w.length;c--;)(p=w[c])&&l.push(y[c]=p);o(null,w=[],l,u)}for(c=w.length;c--;)(p=w[c])&&(l=o?et(r,p):d[c])>-1&&(r[l]=!(s[l]=p))}}else w=g(w===s?w.splice(f,w.length):w),o?o(null,s,w,u):Q.apply(s,w)})}function y(e){for(var t,n,r,i=e.length,o=S.relative[e[0].type],s=o||S.relative[" "],a=o?1:0,u=h(function(e){return e===t},s,!0),l=h(function(e){return et(t,e)>-1},s,!0),c=[function(e,n,r){var i=!o&&(r||n!==A)||((t=n).nodeType?u(e,n,r):l(e,n,r));return t=null,i}];i>a;a++)if(n=S.relative[e[a].type])c=[h(f(c),n)];else{if(n=S.filter[e[a].type].apply(null,e[a].matches),n[U]){for(r=++a;i>r&&!S.relative[e[r].type];r++);return v(a>1&&f(c),a>1&&d(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ut,"$1"),n,r>a&&y(e.slice(a,r)),i>r&&y(e=e.slice(r)),i>r&&d(e))}c.push(n)}return f(c)}function w(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,u,l){var c,p,d,h=0,f="0",m=r&&[],v=[],y=A,w=r||o&&S.find.TAG("*",l),b=$+=null==y?1:Math.random()||.1,_=w.length;for(l&&(A=s!==L&&s);f!==_&&null!=(c=w[f]);f++){if(o&&c){for(p=0;d=e[p++];)if(d(c,s,a)){u.push(c);break}l&&($=b)}i&&((c=!d&&c)&&h--,r&&m.push(c))}if(h+=f,i&&f!==h){for(p=0;d=n[p++];)d(m,v,s,a);if(r){if(h>0)for(;f--;)m[f]||v[f]||(v[f]=J.call(u));v=g(v)}Q.apply(u,v),l&&!r&&v.length>0&&h+n.length>1&&t.uniqueSort(u)}return l&&($=b,A=y),m};return i?r(s):s}var b,_,S,x,k,C,j,E,A,N,T,P,L,O,R,D,M,I,H,U="sizzle"+1*new Date,B=e.document,$=0,q=0,F=n(),W=n(),z=n(),V=function(e,t){return e===t&&(T=!0),0},G=1<<31,X={}.hasOwnProperty,K=[],J=K.pop,Y=K.push,Q=K.push,Z=K.slice,et=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},tt="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",rt="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",it=rt.replace("w","w#"),ot="\\["+nt+"*("+rt+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+it+"))|)"+nt+"*\\]",st=":("+rt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ot+")*)|.*)\\)|)",at=new RegExp(nt+"+","g"),ut=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),lt=new RegExp("^"+nt+"*,"+nt+"*"),ct=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),pt=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),dt=new RegExp(st),ht=new RegExp("^"+it+"$"),ft={ID:new RegExp("^#("+rt+")"),CLASS:new RegExp("^\\.("+rt+")"),TAG:new RegExp("^("+rt.replace("w","w*")+")"),ATTR:new RegExp("^"+ot),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+tt+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},mt=/^(?:input|select|textarea|button)$/i,gt=/^h\d$/i,vt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,wt=/[+~]/,bt=/'|\\/g,_t=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),St=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},xt=function(){P()};try{Q.apply(K=Z.call(B.childNodes),B.childNodes),K[B.childNodes.length].nodeType}catch(kt){Q={apply:K.length?function(e,t){Y.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}_=t.support={},k=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},P=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:B;return r!==L&&9===r.nodeType&&r.documentElement?(L=r,O=r.documentElement,n=r.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",xt,!1):n.attachEvent&&n.attachEvent("onunload",xt)),R=!k(r),_.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),_.getElementsByTagName=i(function(e){return e.appendChild(r.createComment("")),!e.getElementsByTagName("*").length}),_.getElementsByClassName=vt.test(r.getElementsByClassName),_.getById=i(function(e){return O.appendChild(e).id=U,!r.getElementsByName||!r.getElementsByName(U).length}),_.getById?(S.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&R){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},S.filter.ID=function(e){var t=e.replace(_t,St);return function(e){return e.getAttribute("id")===t}}):(delete S.find.ID,S.filter.ID=function(e){var t=e.replace(_t,St);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),S.find.TAG=_.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):_.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},S.find.CLASS=_.getElementsByClassName&&function(e,t){return R?t.getElementsByClassName(e):void 0},M=[],D=[],(_.qsa=vt.test(r.querySelectorAll))&&(i(function(e){O.appendChild(e).innerHTML="<a id='"+U+"'></a><select id='"+U+"-\f]' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&D.push("[*^$]="+nt+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||D.push("\\["+nt+"*(?:value|"+tt+")"),e.querySelectorAll("[id~="+U+"-]").length||D.push("~="),e.querySelectorAll(":checked").length||D.push(":checked"),e.querySelectorAll("a#"+U+"+*").length||D.push(".#.+[+~]")}),i(function(e){var t=r.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&D.push("name"+nt+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||D.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),D.push(",.*:")})),(_.matchesSelector=vt.test(I=O.matches||O.webkitMatchesSelector||O.mozMatchesSelector||O.oMatchesSelector||O.msMatchesSelector))&&i(function(e){_.disconnectedMatch=I.call(e,"div"),I.call(e,"[s!='']:x"),M.push("!=",st)}),D=D.length&&new RegExp(D.join("|")),M=M.length&&new RegExp(M.join("|")),t=vt.test(O.compareDocumentPosition),H=t||vt.test(O.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},V=t?function(e,t){if(e===t)return T=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!_.sortDetached&&t.compareDocumentPosition(e)===n?e===r||e.ownerDocument===B&&H(B,e)?-1:t===r||t.ownerDocument===B&&H(B,t)?1:N?et(N,e)-et(N,t):0:4&n?-1:1)}:function(e,t){if(e===t)return T=!0,0;var n,i=0,o=e.parentNode,a=t.parentNode,u=[e],l=[t];if(!o||!a)return e===r?-1:t===r?1:o?-1:a?1:N?et(N,e)-et(N,t):0;if(o===a)return s(e,t);for(n=e;n=n.parentNode;)u.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;u[i]===l[i];)i++;return i?s(u[i],l[i]):u[i]===B?-1:l[i]===B?1:0},r):L},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==L&&P(e),n=n.replace(pt,"='$1']"),!(!_.matchesSelector||!R||M&&M.test(n)||D&&D.test(n)))try{var r=I.call(e,n);if(r||_.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,L,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==L&&P(e),H(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==L&&P(e);var n=S.attrHandle[t.toLowerCase()],r=n&&X.call(S.attrHandle,t.toLowerCase())?n(e,t,!R):void 0;return void 0!==r?r:_.attributes||!R?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(T=!_.detectDuplicates,N=!_.sortStable&&e.slice(0),e.sort(V),T){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return N=null,e},x=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=x(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=x(t);return n},S=t.selectors={cacheLength:50,createPseudo:r,match:ft,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(_t,St),e[3]=(e[3]||e[4]||e[5]||"").replace(_t,St),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return ft.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&dt.test(n)&&(t=C(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(_t,St).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=F[e+" "];return t||(t=new RegExp("(^|"+nt+")"+e+"("+nt+"|$)"))&&F(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:n?(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(at," ")+" ").indexOf(r)>-1:"|="===n?o===r||o.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode
}:function(t,n,u){var l,c,p,d,h,f,m=o!==s?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!u&&!a;if(g){if(o){for(;m;){for(p=t;p=p[m];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?g.firstChild:g.lastChild],s&&y){for(c=g[U]||(g[U]={}),l=c[e]||[],h=l[0]===$&&l[1],d=l[0]===$&&l[2],p=h&&g.childNodes[h];p=++h&&p&&p[m]||(d=h=0)||f.pop();)if(1===p.nodeType&&++d&&p===t){c[e]=[$,h,d];break}}else if(y&&(l=(t[U]||(t[U]={}))[e])&&l[0]===$)d=l[1];else for(;(p=++h&&p&&p[m]||(d=h=0)||f.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++d||(y&&((p[U]||(p[U]={}))[e]=[$,d]),p!==t)););return d-=i,d===r||d%r===0&&d/r>=0}}},PSEUDO:function(e,n){var i,o=S.pseudos[e]||S.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[U]?o(n):o.length>1?(i=[e,e,"",n],S.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)r=et(e,i[s]),e[r]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=j(e.replace(ut,"$1"));return i[U]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(_t,St),function(t){return(t.textContent||t.innerText||x(t)).indexOf(e)>-1}}),lang:r(function(e){return ht.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(_t,St).toLowerCase(),function(t){var n;do if(n=R?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===O},focus:function(e){return e===L.activeElement&&(!L.hasFocus||L.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!S.pseudos.empty(e)},header:function(e){return gt.test(e.nodeName)},input:function(e){return mt.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[0>n?n+t:n]}),even:l(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var r=0>n?n+t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=0>n?n+t:n;++r<t;)e.push(r);return e})}},S.pseudos.nth=S.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})S.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})S.pseudos[b]=u(b);return p.prototype=S.filters=S.pseudos,S.setFilters=new p,C=t.tokenize=function(e,n){var r,i,o,s,a,u,l,c=W[e+" "];if(c)return n?0:c.slice(0);for(a=e,u=[],l=S.preFilter;a;){(!r||(i=lt.exec(a)))&&(i&&(a=a.slice(i[0].length)||a),u.push(o=[])),r=!1,(i=ct.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ut," ")}),a=a.slice(r.length));for(s in S.filter)!(i=ft[s].exec(a))||l[s]&&!(i=l[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):W(e,u).slice(0)},j=t.compile=function(e,t){var n,r=[],i=[],o=z[e+" "];if(!o){for(t||(t=C(e)),n=t.length;n--;)o=y(t[n]),o[U]?r.push(o):i.push(o);o=z(e,w(i,r)),o.selector=e}return o},E=t.select=function(e,t,n,r){var i,o,s,a,u,l="function"==typeof e&&e,p=!r&&C(e=l.selector||e);if(n=n||[],1===p.length){if(o=p[0]=p[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&_.getById&&9===t.nodeType&&R&&S.relative[o[1].type]){if(t=(S.find.ID(s.matches[0].replace(_t,St),t)||[])[0],!t)return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=ft.needsContext.test(e)?0:o.length;i--&&(s=o[i],!S.relative[a=s.type]);)if((u=S.find[a])&&(r=u(s.matches[0].replace(_t,St),wt.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&d(o),!e)return Q.apply(n,r),n;break}}return(l||j(e,p))(r,t,!R,n,wt.test(e)&&c(t.parentNode)||t),n},_.sortStable=U.split("").sort(V).join("")===U,_.detectDuplicates=!!T,P(),_.sortDetached=i(function(e){return 1&e.compareDocumentPosition(L.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),_.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(tt,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);it.find=lt,it.expr=lt.selectors,it.expr[":"]=it.expr.pseudos,it.unique=lt.uniqueSort,it.text=lt.getText,it.isXMLDoc=lt.isXML,it.contains=lt.contains;var ct=it.expr.match.needsContext,pt=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,dt=/^.[^:#\[\.,]*$/;it.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?it.find.matchesSelector(r,e)?[r]:[]:it.find.matches(e,it.grep(t,function(e){return 1===e.nodeType}))},it.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if("string"!=typeof e)return this.pushStack(it(e).filter(function(){for(t=0;i>t;t++)if(it.contains(r[t],this))return!0}));for(t=0;i>t;t++)it.find(e,r[t],n);return n=this.pushStack(i>1?it.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&ct.test(e)?it(e):e||[],!1).length}});var ht,ft=e.document,mt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,gt=it.fn.init=function(e,t){var n,r;if(!e)return this;if("string"==typeof e){if(n="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:mt.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||ht).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof it?t[0]:t,it.merge(this,it.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:ft,!0)),pt.test(n[1])&&it.isPlainObject(t))for(n in t)it.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}if(r=ft.getElementById(n[2]),r&&r.parentNode){if(r.id!==n[2])return ht.find(e);this.length=1,this[0]=r}return this.context=ft,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):it.isFunction(e)?"undefined"!=typeof ht.ready?ht.ready(e):e(it):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),it.makeArray(e,this))};gt.prototype=it.fn,ht=it(ft);var vt=/^(?:parents|prev(?:Until|All))/,yt={children:!0,contents:!0,next:!0,prev:!0};it.extend({dir:function(e,t,n){for(var r=[],i=e[t];i&&9!==i.nodeType&&(void 0===n||1!==i.nodeType||!it(i).is(n));)1===i.nodeType&&r.push(i),i=i[t];return r},sibling:function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}),it.fn.extend({has:function(e){var t,n=it(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(it.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],s=ct.test(e)||"string"!=typeof e?it(e,t||this.context):0;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&it.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?it.unique(o):o)},index:function(e){return e?"string"==typeof e?it.inArray(this[0],it(e)):it.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(it.unique(it.merge(this.get(),it(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),it.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return it.dir(e,"parentNode")},parentsUntil:function(e,t,n){return it.dir(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return it.dir(e,"nextSibling")},prevAll:function(e){return it.dir(e,"previousSibling")},nextUntil:function(e,t,n){return it.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return it.dir(e,"previousSibling",n)},siblings:function(e){return it.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return it.sibling(e.firstChild)},contents:function(e){return it.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:it.merge([],e.childNodes)}},function(e,t){it.fn[e]=function(n,r){var i=it.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=it.filter(r,i)),this.length>1&&(yt[e]||(i=it.unique(i)),vt.test(e)&&(i=i.reverse())),this.pushStack(i)}});var wt=/\S+/g,bt={};it.Callbacks=function(e){e="string"==typeof e?bt[e]||o(e):it.extend({},e);var t,n,r,i,s,a,u=[],l=!e.once&&[],c=function(o){for(n=e.memory&&o,r=!0,s=a||0,a=0,i=u.length,t=!0;u&&i>s;s++)if(u[s].apply(o[0],o[1])===!1&&e.stopOnFalse){n=!1;break}t=!1,u&&(l?l.length&&c(l.shift()):n?u=[]:p.disable())},p={add:function(){if(u){var r=u.length;!function o(t){it.each(t,function(t,n){var r=it.type(n);"function"===r?e.unique&&p.has(n)||u.push(n):n&&n.length&&"string"!==r&&o(n)})}(arguments),t?i=u.length:n&&(a=r,c(n))}return this},remove:function(){return u&&it.each(arguments,function(e,n){for(var r;(r=it.inArray(n,u,r))>-1;)u.splice(r,1),t&&(i>=r&&i--,s>=r&&s--)}),this},has:function(e){return e?it.inArray(e,u)>-1:!(!u||!u.length)},empty:function(){return u=[],i=0,this},disable:function(){return u=l=n=void 0,this},disabled:function(){return!u},lock:function(){return l=void 0,n||p.disable(),this},locked:function(){return!l},fireWith:function(e,n){return!u||r&&!l||(n=n||[],n=[e,n.slice?n.slice():n],t?l.push(n):c(n)),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!r}};return p},it.extend({Deferred:function(e){var t=[["resolve","done",it.Callbacks("once memory"),"resolved"],["reject","fail",it.Callbacks("once memory"),"rejected"],["notify","progress",it.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return it.Deferred(function(n){it.each(t,function(t,o){var s=it.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&it.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?it.extend(e,r):r}},i={};return r.pipe=r.then,it.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=K.call(arguments),s=o.length,a=1!==s||e&&it.isFunction(e.promise)?s:0,u=1===a?e:it.Deferred(),l=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?K.call(arguments):i,r===t?u.notifyWith(n,r):--a||u.resolveWith(n,r)}};if(s>1)for(t=new Array(s),n=new Array(s),r=new Array(s);s>i;i++)o[i]&&it.isFunction(o[i].promise)?o[i].promise().done(l(i,r,o)).fail(u.reject).progress(l(i,n,t)):--a;return a||u.resolveWith(r,o),u.promise()}});var _t;it.fn.ready=function(e){return it.ready.promise().done(e),this},it.extend({isReady:!1,readyWait:1,holdReady:function(e){e?it.readyWait++:it.ready(!0)},ready:function(e){if(e===!0?!--it.readyWait:!it.isReady){if(!ft.body)return setTimeout(it.ready);it.isReady=!0,e!==!0&&--it.readyWait>0||(_t.resolveWith(ft,[it]),it.fn.triggerHandler&&(it(ft).triggerHandler("ready"),it(ft).off("ready")))}}}),it.ready.promise=function(t){if(!_t)if(_t=it.Deferred(),"complete"===ft.readyState)setTimeout(it.ready);else if(ft.addEventListener)ft.addEventListener("DOMContentLoaded",a,!1),e.addEventListener("load",a,!1);else{ft.attachEvent("onreadystatechange",a),e.attachEvent("onload",a);var n=!1;try{n=null==e.frameElement&&ft.documentElement}catch(r){}n&&n.doScroll&&!function i(){if(!it.isReady){try{n.doScroll("left")}catch(e){return setTimeout(i,50)}s(),it.ready()}}()}return _t.promise(t)};var St,xt="undefined";for(St in it(nt))break;nt.ownLast="0"!==St,nt.inlineBlockNeedsLayout=!1,it(function(){var e,t,n,r;n=ft.getElementsByTagName("body")[0],n&&n.style&&(t=ft.createElement("div"),r=ft.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),typeof t.style.zoom!==xt&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",nt.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(r))}),function(){var e=ft.createElement("div");if(null==nt.deleteExpando){nt.deleteExpando=!0;try{delete e.test}catch(t){nt.deleteExpando=!1}}e=null}(),it.acceptData=function(e){var t=it.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return 1!==n&&9!==n?!1:!t||t!==!0&&e.getAttribute("classid")===t};var kt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ct=/([A-Z])/g;it.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return e=e.nodeType?it.cache[e[it.expando]]:e[it.expando],!!e&&!l(e)},data:function(e,t,n){return c(e,t,n)},removeData:function(e,t){return p(e,t)},_data:function(e,t,n){return c(e,t,n,!0)},_removeData:function(e,t){return p(e,t,!0)}}),it.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=it.data(o),1===o.nodeType&&!it._data(o,"parsedAttrs"))){for(n=s.length;n--;)s[n]&&(r=s[n].name,0===r.indexOf("data-")&&(r=it.camelCase(r.slice(5)),u(o,r,i[r])));it._data(o,"parsedAttrs",!0)}return i}return"object"==typeof e?this.each(function(){it.data(this,e)}):arguments.length>1?this.each(function(){it.data(this,e,t)}):o?u(o,e,it.data(o,e)):void 0},removeData:function(e){return this.each(function(){it.removeData(this,e)})}}),it.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=it._data(e,t),n&&(!r||it.isArray(n)?r=it._data(e,t,it.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=it.queue(e,t),r=n.length,i=n.shift(),o=it._queueHooks(e,t),s=function(){it.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return it._data(e,n)||it._data(e,n,{empty:it.Callbacks("once memory").add(function(){it._removeData(e,t+"queue"),it._removeData(e,n)})})}}),it.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?it.queue(this[0],e):void 0===t?this:this.each(function(){var n=it.queue(this,e,t);it._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&it.dequeue(this,e)})},dequeue:function(e){return this.each(function(){it.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=it.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)n=it._data(o[s],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var jt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Et=["Top","Right","Bottom","Left"],At=function(e,t){return e=t||e,"none"===it.css(e,"display")||!it.contains(e.ownerDocument,e)},Nt=it.access=function(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if("object"===it.type(n)){i=!0;for(a in n)it.access(e,t,a,n[a],!0,o,s)}else if(void 0!==r&&(i=!0,it.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(it(e),n)})),t))for(;u>a;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o},Tt=/^(?:checkbox|radio)$/i;!function(){var e=ft.createElement("input"),t=ft.createElement("div"),n=ft.createDocumentFragment();if(t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",nt.leadingWhitespace=3===t.firstChild.nodeType,nt.tbody=!t.getElementsByTagName("tbody").length,nt.htmlSerialize=!!t.getElementsByTagName("link").length,nt.html5Clone="<:nav></:nav>"!==ft.createElement("nav").cloneNode(!0).outerHTML,e.type="checkbox",e.checked=!0,n.appendChild(e),nt.appendChecked=e.checked,t.innerHTML="<textarea>x</textarea>",nt.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue,n.appendChild(t),t.innerHTML="<input type='radio' checked='checked' name='t'/>",nt.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,nt.noCloneEvent=!0,t.attachEvent&&(t.attachEvent("onclick",function(){nt.noCloneEvent=!1}),t.cloneNode(!0).click()),null==nt.deleteExpando){nt.deleteExpando=!0;try{delete t.test}catch(r){nt.deleteExpando=!1}}}(),function(){var t,n,r=ft.createElement("div");for(t in{submit:!0,change:!0,focusin:!0})n="on"+t,(nt[t+"Bubbles"]=n in e)||(r.setAttribute(n,"t"),nt[t+"Bubbles"]=r.attributes[n].expando===!1);r=null}();var Pt=/^(?:input|select|textarea)$/i,Lt=/^key/,Ot=/^(?:mouse|pointer|contextmenu)|click/,Rt=/^(?:focusinfocus|focusoutblur)$/,Dt=/^([^.]*)(?:\.(.+)|)$/;it.event={global:{},add:function(e,t,n,r,i){var o,s,a,u,l,c,p,d,h,f,m,g=it._data(e);if(g){for(n.handler&&(u=n,n=u.handler,i=u.selector),n.guid||(n.guid=it.guid++),(s=g.events)||(s=g.events={}),(c=g.handle)||(c=g.handle=function(e){return typeof it===xt||e&&it.event.triggered===e.type?void 0:it.event.dispatch.apply(c.elem,arguments)},c.elem=e),t=(t||"").match(wt)||[""],a=t.length;a--;)o=Dt.exec(t[a])||[],h=m=o[1],f=(o[2]||"").split(".").sort(),h&&(l=it.event.special[h]||{},h=(i?l.delegateType:l.bindType)||h,l=it.event.special[h]||{},p=it.extend({type:h,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&it.expr.match.needsContext.test(i),namespace:f.join(".")},u),(d=s[h])||(d=s[h]=[],d.delegateCount=0,l.setup&&l.setup.call(e,r,f,c)!==!1||(e.addEventListener?e.addEventListener(h,c,!1):e.attachEvent&&e.attachEvent("on"+h,c))),l.add&&(l.add.call(e,p),p.handler.guid||(p.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,p):d.push(p),it.event.global[h]=!0);e=null}},remove:function(e,t,n,r,i){var o,s,a,u,l,c,p,d,h,f,m,g=it.hasData(e)&&it._data(e);if(g&&(c=g.events)){for(t=(t||"").match(wt)||[""],l=t.length;l--;)if(a=Dt.exec(t[l])||[],h=m=a[1],f=(a[2]||"").split(".").sort(),h){for(p=it.event.special[h]||{},h=(r?p.delegateType:p.bindType)||h,d=c[h]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),u=o=d.length;o--;)s=d[o],!i&&m!==s.origType||n&&n.guid!==s.guid||a&&!a.test(s.namespace)||r&&r!==s.selector&&("**"!==r||!s.selector)||(d.splice(o,1),s.selector&&d.delegateCount--,p.remove&&p.remove.call(e,s));u&&!d.length&&(p.teardown&&p.teardown.call(e,f,g.handle)!==!1||it.removeEvent(e,h,g.handle),delete c[h])}else for(h in c)it.event.remove(e,h+t[l],n,r,!0);it.isEmptyObject(c)&&(delete g.handle,it._removeData(e,"events"))}},trigger:function(t,n,r,i){var o,s,a,u,l,c,p,d=[r||ft],h=tt.call(t,"type")?t.type:t,f=tt.call(t,"namespace")?t.namespace.split("."):[];if(a=c=r=r||ft,3!==r.nodeType&&8!==r.nodeType&&!Rt.test(h+it.event.triggered)&&(h.indexOf(".")>=0&&(f=h.split("."),h=f.shift(),f.sort()),s=h.indexOf(":")<0&&"on"+h,t=t[it.expando]?t:new it.Event(h,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=f.join("."),t.namespace_re=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:it.makeArray(n,[t]),l=it.event.special[h]||{},i||!l.trigger||l.trigger.apply(r,n)!==!1)){if(!i&&!l.noBubble&&!it.isWindow(r)){for(u=l.delegateType||h,Rt.test(u+h)||(a=a.parentNode);a;a=a.parentNode)d.push(a),c=a;c===(r.ownerDocument||ft)&&d.push(c.defaultView||c.parentWindow||e)}for(p=0;(a=d[p++])&&!t.isPropagationStopped();)t.type=p>1?u:l.bindType||h,o=(it._data(a,"events")||{})[t.type]&&it._data(a,"handle"),o&&o.apply(a,n),o=s&&a[s],o&&o.apply&&it.acceptData(a)&&(t.result=o.apply(a,n),t.result===!1&&t.preventDefault());if(t.type=h,!i&&!t.isDefaultPrevented()&&(!l._default||l._default.apply(d.pop(),n)===!1)&&it.acceptData(r)&&s&&r[h]&&!it.isWindow(r)){c=r[s],c&&(r[s]=null),it.event.triggered=h;try{r[h]()}catch(m){}it.event.triggered=void 0,c&&(r[s]=c)}return t.result}},dispatch:function(e){e=it.event.fix(e);var t,n,r,i,o,s=[],a=K.call(arguments),u=(it._data(this,"events")||{})[e.type]||[],l=it.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,e)!==!1){for(s=it.event.handlers.call(this,e,u),t=0;(i=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,o=0;(r=i.handlers[o++])&&!e.isImmediatePropagationStopped();)(!e.namespace_re||e.namespace_re.test(r.namespace))&&(e.handleObj=r,e.data=r.data,n=((it.event.special[r.origType]||{}).handle||r.handler).apply(i.elem,a),void 0!==n&&(e.result=n)===!1&&(e.preventDefault(),e.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,u=e.target;if(a&&u.nodeType&&(!e.button||"click"!==e.type))for(;u!=this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==e.type)){for(i=[],o=0;a>o;o++)r=t[o],n=r.selector+" ",void 0===i[n]&&(i[n]=r.needsContext?it(n,this).index(u)>=0:it.find(n,this,null,[u]).length),i[n]&&i.push(r);i.length&&s.push({elem:u,handlers:i})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},fix:function(e){if(e[it.expando])return e;var t,n,r,i=e.type,o=e,s=this.fixHooks[i];for(s||(this.fixHooks[i]=s=Ot.test(i)?this.mouseHooks:Lt.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new it.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=o.srcElement||ft),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,o):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button,s=t.fromElement;return null==e.pageX&&null!=t.clientX&&(r=e.target.ownerDocument||ft,i=r.documentElement,n=r.body,e.pageX=t.clientX+(i&&i.scrollLeft||n&&n.scrollLeft||0)-(i&&i.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(i&&i.scrollTop||n&&n.scrollTop||0)-(i&&i.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&s&&(e.relatedTarget=s===e.target?t.toElement:s),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==f()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){return this===f()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return it.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(e){return it.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=it.extend(new it.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?it.event.trigger(i,null,t):it.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},it.removeEvent=ft.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r="on"+t;e.detachEvent&&(typeof e[r]===xt&&(e[r]=null),e.detachEvent(r,n))},it.Event=function(e,t){return this instanceof it.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?d:h):this.type=e,t&&it.extend(this,t),this.timeStamp=e&&e.timeStamp||it.now(),void(this[it.expando]=!0)):new it.Event(e,t)},it.Event.prototype={isDefaultPrevented:h,isPropagationStopped:h,isImmediatePropagationStopped:h,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=d,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=d,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=d,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},it.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){it.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!it.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),nt.submitBubbles||(it.event.special.submit={setup:function(){return it.nodeName(this,"form")?!1:void it.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=it.nodeName(t,"input")||it.nodeName(t,"button")?t.form:void 0;n&&!it._data(n,"submitBubbles")&&(it.event.add(n,"submit._submit",function(e){e._submit_bubble=!0}),it._data(n,"submitBubbles",!0))})},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&it.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){return it.nodeName(this,"form")?!1:void it.event.remove(this,"._submit")}}),nt.changeBubbles||(it.event.special.change={setup:function(){return Pt.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(it.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._just_changed=!0)}),it.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),it.event.simulate("change",this,e,!0)})),!1):void it.event.add(this,"beforeactivate._change",function(e){var t=e.target;Pt.test(t.nodeName)&&!it._data(t,"changeBubbles")&&(it.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||it.event.simulate("change",this.parentNode,e,!0)}),it._data(t,"changeBubbles",!0))})},handle:function(e){var t=e.target;return this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type?e.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return it.event.remove(this,"._change"),!Pt.test(this.nodeName)}}),nt.focusinBubbles||it.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){it.event.simulate(t,e.target,it.event.fix(e),!0)};it.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=it._data(r,t);i||r.addEventListener(e,n,!0),it._data(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=it._data(r,t)-1;i?it._data(r,t,i):(r.removeEventListener(e,n,!0),it._removeData(r,t))}}}),it.fn.extend({on:function(e,t,n,r,i){var o,s;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=void 0);for(o in e)this.on(o,t,n,e[o],i);return this}if(null==n&&null==r?(r=t,n=t=void 0):null==r&&("string"==typeof t?(r=n,n=void 0):(r=n,n=t,t=void 0)),r===!1)r=h;else if(!r)return this;return 1===i&&(s=r,r=function(e){return it().off(e),s.apply(this,arguments)},r.guid=s.guid||(s.guid=it.guid++)),this.each(function(){it.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,it(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=void 0),n===!1&&(n=h),this.each(function(){it.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){it.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?it.event.trigger(e,t,n,!0):void 0}});var Mt="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",It=/ jQuery\d+="(?:null|\d+)"/g,Ht=new RegExp("<(?:"+Mt+")[\\s/>]","i"),Ut=/^\s+/,Bt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,$t=/<([\w:]+)/,qt=/<tbody/i,Ft=/<|&#?\w+;/,Wt=/<(?:script|style|link)/i,zt=/checked\s*(?:[^=]|=\s*.checked.)/i,Vt=/^$|\/(?:java|ecma)script/i,Gt=/^true\/(.*)/,Xt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Kt={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:nt.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},Jt=m(ft),Yt=Jt.appendChild(ft.createElement("div"));Kt.optgroup=Kt.option,Kt.tbody=Kt.tfoot=Kt.colgroup=Kt.caption=Kt.thead,Kt.th=Kt.td,it.extend({clone:function(e,t,n){var r,i,o,s,a,u=it.contains(e.ownerDocument,e);if(nt.html5Clone||it.isXMLDoc(e)||!Ht.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(Yt.innerHTML=e.outerHTML,Yt.removeChild(o=Yt.firstChild)),!(nt.noCloneEvent&&nt.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||it.isXMLDoc(e)))for(r=g(o),a=g(e),s=0;null!=(i=a[s]);++s)r[s]&&x(i,r[s]);if(t)if(n)for(a=a||g(e),r=r||g(o),s=0;null!=(i=a[s]);s++)S(i,r[s]);else S(e,o);return r=g(o,"script"),r.length>0&&_(r,!u&&g(e,"script")),r=a=i=null,o},buildFragment:function(e,t,n,r){for(var i,o,s,a,u,l,c,p=e.length,d=m(t),h=[],f=0;p>f;f++)if(o=e[f],o||0===o)if("object"===it.type(o))it.merge(h,o.nodeType?[o]:o);else if(Ft.test(o)){for(a=a||d.appendChild(t.createElement("div")),u=($t.exec(o)||["",""])[1].toLowerCase(),c=Kt[u]||Kt._default,a.innerHTML=c[1]+o.replace(Bt,"<$1></$2>")+c[2],i=c[0];i--;)a=a.lastChild;if(!nt.leadingWhitespace&&Ut.test(o)&&h.push(t.createTextNode(Ut.exec(o)[0])),!nt.tbody)for(o="table"!==u||qt.test(o)?"<table>"!==c[1]||qt.test(o)?0:a:a.firstChild,i=o&&o.childNodes.length;i--;)it.nodeName(l=o.childNodes[i],"tbody")&&!l.childNodes.length&&o.removeChild(l);for(it.merge(h,a.childNodes),a.textContent="";a.firstChild;)a.removeChild(a.firstChild);a=d.lastChild}else h.push(t.createTextNode(o));for(a&&d.removeChild(a),nt.appendChecked||it.grep(g(h,"input"),v),f=0;o=h[f++];)if((!r||-1===it.inArray(o,r))&&(s=it.contains(o.ownerDocument,o),a=g(d.appendChild(o),"script"),s&&_(a),n))for(i=0;o=a[i++];)Vt.test(o.type||"")&&n.push(o);return a=null,d},cleanData:function(e,t){for(var n,r,i,o,s=0,a=it.expando,u=it.cache,l=nt.deleteExpando,c=it.event.special;null!=(n=e[s]);s++)if((t||it.acceptData(n))&&(i=n[a],o=i&&u[i])){if(o.events)for(r in o.events)c[r]?it.event.remove(n,r):it.removeEvent(n,r,o.handle);u[i]&&(delete u[i],l?delete n[a]:typeof n.removeAttribute!==xt?n.removeAttribute(a):n[a]=null,X.push(i))}}}),it.fn.extend({text:function(e){return Nt(this,function(e){return void 0===e?it.text(this):this.empty().append((this[0]&&this[0].ownerDocument||ft).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=y(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=y(this,e);t.insertBefore(e,t.firstChild)
}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){for(var n,r=e?it.filter(e,this):this,i=0;null!=(n=r[i]);i++)t||1!==n.nodeType||it.cleanData(g(n)),n.parentNode&&(t&&it.contains(n.ownerDocument,n)&&_(g(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&it.cleanData(g(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&it.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return it.clone(this,e,t)})},html:function(e){return Nt(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(It,""):void 0;if(!("string"!=typeof e||Wt.test(e)||!nt.htmlSerialize&&Ht.test(e)||!nt.leadingWhitespace&&Ut.test(e)||Kt[($t.exec(e)||["",""])[1].toLowerCase()])){e=e.replace(Bt,"<$1></$2>");try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(it.cleanData(g(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=arguments[0];return this.domManip(arguments,function(t){e=this.parentNode,it.cleanData(g(this)),e&&e.replaceChild(t,this)}),e&&(e.length||e.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t){e=J.apply([],e);var n,r,i,o,s,a,u=0,l=this.length,c=this,p=l-1,d=e[0],h=it.isFunction(d);if(h||l>1&&"string"==typeof d&&!nt.checkClone&&zt.test(d))return this.each(function(n){var r=c.eq(n);h&&(e[0]=d.call(this,n,r.html())),r.domManip(e,t)});if(l&&(a=it.buildFragment(e,this[0].ownerDocument,!1,this),n=a.firstChild,1===a.childNodes.length&&(a=n),n)){for(o=it.map(g(a,"script"),w),i=o.length;l>u;u++)r=a,u!==p&&(r=it.clone(r,!0,!0),i&&it.merge(o,g(r,"script"))),t.call(this[u],r,u);if(i)for(s=o[o.length-1].ownerDocument,it.map(o,b),u=0;i>u;u++)r=o[u],Vt.test(r.type||"")&&!it._data(r,"globalEval")&&it.contains(s,r)&&(r.src?it._evalUrl&&it._evalUrl(r.src):it.globalEval((r.text||r.textContent||r.innerHTML||"").replace(Xt,"")));a=n=null}return this}}),it.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){it.fn[e]=function(e){for(var n,r=0,i=[],o=it(e),s=o.length-1;s>=r;r++)n=r===s?this:this.clone(!0),it(o[r])[t](n),Y.apply(i,n.get());return this.pushStack(i)}});var Qt,Zt={};!function(){var e;nt.shrinkWrapBlocks=function(){if(null!=e)return e;e=!1;var t,n,r;return n=ft.getElementsByTagName("body")[0],n&&n.style?(t=ft.createElement("div"),r=ft.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),typeof t.style.zoom!==xt&&(t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",t.appendChild(ft.createElement("div")).style.width="5px",e=3!==t.offsetWidth),n.removeChild(r),e):void 0}}();var en,tn,nn=/^margin/,rn=new RegExp("^("+jt+")(?!px)[a-z%]+$","i"),on=/^(top|right|bottom|left)$/;e.getComputedStyle?(en=function(t){return t.ownerDocument.defaultView.opener?t.ownerDocument.defaultView.getComputedStyle(t,null):e.getComputedStyle(t,null)},tn=function(e,t,n){var r,i,o,s,a=e.style;return n=n||en(e),s=n?n.getPropertyValue(t)||n[t]:void 0,n&&(""!==s||it.contains(e.ownerDocument,e)||(s=it.style(e,t)),rn.test(s)&&nn.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0===s?s:s+""}):ft.documentElement.currentStyle&&(en=function(e){return e.currentStyle},tn=function(e,t,n){var r,i,o,s,a=e.style;return n=n||en(e),s=n?n[t]:void 0,null==s&&a&&a[t]&&(s=a[t]),rn.test(s)&&!on.test(t)&&(r=a.left,i=e.runtimeStyle,o=i&&i.left,o&&(i.left=e.currentStyle.left),a.left="fontSize"===t?"1em":s,s=a.pixelLeft+"px",a.left=r,o&&(i.left=o)),void 0===s?s:s+""||"auto"}),function(){function t(){var t,n,r,i;n=ft.getElementsByTagName("body")[0],n&&n.style&&(t=ft.createElement("div"),r=ft.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),t.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",o=s=!1,u=!0,e.getComputedStyle&&(o="1%"!==(e.getComputedStyle(t,null)||{}).top,s="4px"===(e.getComputedStyle(t,null)||{width:"4px"}).width,i=t.appendChild(ft.createElement("div")),i.style.cssText=t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",t.style.width="1px",u=!parseFloat((e.getComputedStyle(i,null)||{}).marginRight),t.removeChild(i)),t.innerHTML="<table><tr><td></td><td>t</td></tr></table>",i=t.getElementsByTagName("td"),i[0].style.cssText="margin:0;border:0;padding:0;display:none",a=0===i[0].offsetHeight,a&&(i[0].style.display="",i[1].style.display="none",a=0===i[0].offsetHeight),n.removeChild(r))}var n,r,i,o,s,a,u;n=ft.createElement("div"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",i=n.getElementsByTagName("a")[0],r=i&&i.style,r&&(r.cssText="float:left;opacity:.5",nt.opacity="0.5"===r.opacity,nt.cssFloat=!!r.cssFloat,n.style.backgroundClip="content-box",n.cloneNode(!0).style.backgroundClip="",nt.clearCloneStyle="content-box"===n.style.backgroundClip,nt.boxSizing=""===r.boxSizing||""===r.MozBoxSizing||""===r.WebkitBoxSizing,it.extend(nt,{reliableHiddenOffsets:function(){return null==a&&t(),a},boxSizingReliable:function(){return null==s&&t(),s},pixelPosition:function(){return null==o&&t(),o},reliableMarginRight:function(){return null==u&&t(),u}}))}(),it.swap=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i};var sn=/alpha\([^)]*\)/i,an=/opacity\s*=\s*([^)]*)/,un=/^(none|table(?!-c[ea]).+)/,ln=new RegExp("^("+jt+")(.*)$","i"),cn=new RegExp("^([+-])=("+jt+")","i"),pn={position:"absolute",visibility:"hidden",display:"block"},dn={letterSpacing:"0",fontWeight:"400"},hn=["Webkit","O","Moz","ms"];it.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=tn(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":nt.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=it.camelCase(t),u=e.style;if(t=it.cssProps[a]||(it.cssProps[a]=E(u,a)),s=it.cssHooks[t]||it.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:u[t];if(o=typeof n,"string"===o&&(i=cn.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(it.css(e,t)),o="number"),null!=n&&n===n&&("number"!==o||it.cssNumber[a]||(n+="px"),nt.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),!(s&&"set"in s&&void 0===(n=s.set(e,n,r)))))try{u[t]=n}catch(l){}}},css:function(e,t,n,r){var i,o,s,a=it.camelCase(t);return t=it.cssProps[a]||(it.cssProps[a]=E(e.style,a)),s=it.cssHooks[t]||it.cssHooks[a],s&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=tn(e,t,r)),"normal"===o&&t in dn&&(o=dn[t]),""===n||n?(i=parseFloat(o),n===!0||it.isNumeric(i)?i||0:o):o}}),it.each(["height","width"],function(e,t){it.cssHooks[t]={get:function(e,n,r){return n?un.test(it.css(e,"display"))&&0===e.offsetWidth?it.swap(e,pn,function(){return P(e,t,r)}):P(e,t,r):void 0},set:function(e,n,r){var i=r&&en(e);return N(e,n,r?T(e,t,r,nt.boxSizing&&"border-box"===it.css(e,"boxSizing",!1,i),i):0)}}}),nt.opacity||(it.cssHooks.opacity={get:function(e,t){return an.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=it.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=r&&r.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===it.trim(o.replace(sn,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=sn.test(o)?o.replace(sn,i):o+" "+i)}}),it.cssHooks.marginRight=j(nt.reliableMarginRight,function(e,t){return t?it.swap(e,{display:"inline-block"},tn,[e,"marginRight"]):void 0}),it.each({margin:"",padding:"",border:"Width"},function(e,t){it.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[e+Et[r]+t]=o[r]||o[r-2]||o[0];return i}},nn.test(e)||(it.cssHooks[e+t].set=N)}),it.fn.extend({css:function(e,t){return Nt(this,function(e,t,n){var r,i,o={},s=0;if(it.isArray(t)){for(r=en(e),i=t.length;i>s;s++)o[t[s]]=it.css(e,t[s],!1,r);return o}return void 0!==n?it.style(e,t,n):it.css(e,t)},e,t,arguments.length>1)},show:function(){return A(this,!0)},hide:function(){return A(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){At(this)?it(this).show():it(this).hide()})}}),it.Tween=L,L.prototype={constructor:L,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(it.cssNumber[n]?"":"px")},cur:function(){var e=L.propHooks[this.prop];return e&&e.get?e.get(this):L.propHooks._default.get(this)},run:function(e){var t,n=L.propHooks[this.prop];return this.pos=t=this.options.duration?it.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):L.propHooks._default.set(this),this}},L.prototype.init.prototype=L.prototype,L.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=it.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){it.fx.step[e.prop]?it.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[it.cssProps[e.prop]]||it.cssHooks[e.prop])?it.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},L.propHooks.scrollTop=L.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},it.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},it.fx=L.prototype.init,it.fx.step={};var fn,mn,gn=/^(?:toggle|show|hide)$/,vn=new RegExp("^(?:([+-])=|)("+jt+")([a-z%]*)$","i"),yn=/queueHooks$/,wn=[M],bn={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=vn.exec(t),o=i&&i[3]||(it.cssNumber[e]?"":"px"),s=(it.cssNumber[e]||"px"!==o&&+r)&&vn.exec(it.css(n.elem,e)),a=1,u=20;if(s&&s[3]!==o){o=o||s[3],i=i||[],s=+r||1;do a=a||".5",s/=a,it.style(n.elem,e,s+o);while(a!==(a=n.cur()/r)&&1!==a&&--u)}return i&&(s=n.start=+s||+r||0,n.unit=o,n.end=i[1]?s+(i[1]+1)*i[2]:+i[2]),n}]};it.Animation=it.extend(H,{tweener:function(e,t){it.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");for(var n,r=0,i=e.length;i>r;r++)n=e[r],bn[n]=bn[n]||[],bn[n].unshift(t)},prefilter:function(e,t){t?wn.unshift(e):wn.push(e)}}),it.speed=function(e,t,n){var r=e&&"object"==typeof e?it.extend({},e):{complete:n||!n&&t||it.isFunction(e)&&e,duration:e,easing:n&&t||t&&!it.isFunction(t)&&t};return r.duration=it.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in it.fx.speeds?it.fx.speeds[r.duration]:it.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){it.isFunction(r.old)&&r.old.call(this),r.queue&&it.dequeue(this,r.queue)},r},it.fn.extend({fadeTo:function(e,t,n,r){return this.filter(At).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=it.isEmptyObject(e),o=it.speed(t,n,r),s=function(){var t=H(this,it.extend({},e),o);(i||it._data(this,"finish"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=it.timers,s=it._data(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&yn.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));(t||!n)&&it.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=it._data(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=it.timers,s=r?r.length:0;for(n.finish=!0,it.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;s>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),it.each(["toggle","show","hide"],function(e,t){var n=it.fn[t];it.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(R(t,!0),e,r,i)}}),it.each({slideDown:R("show"),slideUp:R("hide"),slideToggle:R("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){it.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),it.timers=[],it.fx.tick=function(){var e,t=it.timers,n=0;for(fn=it.now();n<t.length;n++)e=t[n],e()||t[n]!==e||t.splice(n--,1);t.length||it.fx.stop(),fn=void 0},it.fx.timer=function(e){it.timers.push(e),e()?it.fx.start():it.timers.pop()},it.fx.interval=13,it.fx.start=function(){mn||(mn=setInterval(it.fx.tick,it.fx.interval))},it.fx.stop=function(){clearInterval(mn),mn=null},it.fx.speeds={slow:600,fast:200,_default:400},it.fn.delay=function(e,t){return e=it.fx?it.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},function(){var e,t,n,r,i;t=ft.createElement("div"),t.setAttribute("className","t"),t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",r=t.getElementsByTagName("a")[0],n=ft.createElement("select"),i=n.appendChild(ft.createElement("option")),e=t.getElementsByTagName("input")[0],r.style.cssText="top:1px",nt.getSetAttribute="t"!==t.className,nt.style=/top/.test(r.getAttribute("style")),nt.hrefNormalized="/a"===r.getAttribute("href"),nt.checkOn=!!e.value,nt.optSelected=i.selected,nt.enctype=!!ft.createElement("form").enctype,n.disabled=!0,nt.optDisabled=!i.disabled,e=ft.createElement("input"),e.setAttribute("value",""),nt.input=""===e.getAttribute("value"),e.value="t",e.setAttribute("type","radio"),nt.radioValue="t"===e.value}();var _n=/\r/g;it.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=it.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,it(this).val()):e,null==i?i="":"number"==typeof i?i+="":it.isArray(i)&&(i=it.map(i,function(e){return null==e?"":e+""})),t=it.valHooks[this.type]||it.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=it.valHooks[i.type]||it.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(_n,""):null==n?"":n)}}}),it.extend({valHooks:{option:{get:function(e){var t=it.find.attr(e,"value");return null!=t?t:it.trim(it.text(e))}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,s=o?null:[],a=o?i+1:r.length,u=0>i?a:o?i:0;a>u;u++)if(n=r[u],!(!n.selected&&u!==i||(nt.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&it.nodeName(n.parentNode,"optgroup"))){if(t=it(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=it.makeArray(t),s=i.length;s--;)if(r=i[s],it.inArray(it.valHooks.option.get(r),o)>=0)try{r.selected=n=!0}catch(a){r.scrollHeight}else r.selected=!1;return n||(e.selectedIndex=-1),i}}}}),it.each(["radio","checkbox"],function(){it.valHooks[this]={set:function(e,t){return it.isArray(t)?e.checked=it.inArray(it(e).val(),t)>=0:void 0}},nt.checkOn||(it.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Sn,xn,kn=it.expr.attrHandle,Cn=/^(?:checked|selected)$/i,jn=nt.getSetAttribute,En=nt.input;it.fn.extend({attr:function(e,t){return Nt(this,it.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){it.removeAttr(this,e)})}}),it.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(e&&3!==o&&8!==o&&2!==o)return typeof e.getAttribute===xt?it.prop(e,t,n):(1===o&&it.isXMLDoc(e)||(t=t.toLowerCase(),r=it.attrHooks[t]||(it.expr.match.bool.test(t)?xn:Sn)),void 0===n?r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=it.find.attr(e,t),null==i?void 0:i):null!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):void it.removeAttr(e,t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(wt);if(o&&1===e.nodeType)for(;n=o[i++];)r=it.propFix[n]||n,it.expr.match.bool.test(n)?En&&jn||!Cn.test(n)?e[r]=!1:e[it.camelCase("default-"+n)]=e[r]=!1:it.attr(e,n,""),e.removeAttribute(jn?n:r)},attrHooks:{type:{set:function(e,t){if(!nt.radioValue&&"radio"===t&&it.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}}}),xn={set:function(e,t,n){return t===!1?it.removeAttr(e,n):En&&jn||!Cn.test(n)?e.setAttribute(!jn&&it.propFix[n]||n,n):e[it.camelCase("default-"+n)]=e[n]=!0,n}},it.each(it.expr.match.bool.source.match(/\w+/g),function(e,t){var n=kn[t]||it.find.attr;kn[t]=En&&jn||!Cn.test(t)?function(e,t,r){var i,o;return r||(o=kn[t],kn[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,kn[t]=o),i}:function(e,t,n){return n?void 0:e[it.camelCase("default-"+t)]?t.toLowerCase():null}}),En&&jn||(it.attrHooks.value={set:function(e,t,n){return it.nodeName(e,"input")?void(e.defaultValue=t):Sn&&Sn.set(e,t,n)}}),jn||(Sn={set:function(e,t,n){var r=e.getAttributeNode(n);return r||e.setAttributeNode(r=e.ownerDocument.createAttribute(n)),r.value=t+="","value"===n||t===e.getAttribute(n)?t:void 0}},kn.id=kn.name=kn.coords=function(e,t,n){var r;return n?void 0:(r=e.getAttributeNode(t))&&""!==r.value?r.value:null},it.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);return n&&n.specified?n.value:void 0},set:Sn.set},it.attrHooks.contenteditable={set:function(e,t,n){Sn.set(e,""===t?!1:t,n)}},it.each(["width","height"],function(e,t){it.attrHooks[t]={set:function(e,n){return""===n?(e.setAttribute(t,"auto"),n):void 0}}})),nt.style||(it.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var An=/^(?:input|select|textarea|button|object)$/i,Nn=/^(?:a|area)$/i;it.fn.extend({prop:function(e,t){return Nt(this,it.prop,e,t,arguments.length>1)},removeProp:function(e){return e=it.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(t){}})}}),it.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(e,t,n){var r,i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return o=1!==s||!it.isXMLDoc(e),o&&(t=it.propFix[t]||t,i=it.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=it.find.attr(e,"tabindex");return t?parseInt(t,10):An.test(e.nodeName)||Nn.test(e.nodeName)&&e.href?0:-1}}}}),nt.hrefNormalized||it.each(["href","src"],function(e,t){it.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),nt.optSelected||(it.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}}),it.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){it.propFix[this.toLowerCase()]=this}),nt.enctype||(it.propFix.enctype="encoding");var Tn=/[\t\r\n\f]/g;it.fn.extend({addClass:function(e){var t,n,r,i,o,s,a=0,u=this.length,l="string"==typeof e&&e;if(it.isFunction(e))return this.each(function(t){it(this).addClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(wt)||[];u>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Tn," "):" ")){for(o=0;i=t[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");s=it.trim(r),n.className!==s&&(n.className=s)}return this},removeClass:function(e){var t,n,r,i,o,s,a=0,u=this.length,l=0===arguments.length||"string"==typeof e&&e;if(it.isFunction(e))return this.each(function(t){it(this).removeClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(wt)||[];u>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Tn," "):"")){for(o=0;i=t[o++];)for(;r.indexOf(" "+i+" ")>=0;)r=r.replace(" "+i+" "," ");s=e?it.trim(r):"",n.className!==s&&(n.className=s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):this.each(it.isFunction(e)?function(n){it(this).toggleClass(e.call(this,n,this.className,t),t)}:function(){if("string"===n)for(var t,r=0,i=it(this),o=e.match(wt)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else(n===xt||"boolean"===n)&&(this.className&&it._data(this,"__className__",this.className),this.className=this.className||e===!1?"":it._data(this,"__className__")||"")})},hasClass:function(e){for(var t=" "+e+" ",n=0,r=this.length;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(Tn," ").indexOf(t)>=0)return!0;return!1}}),it.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){it.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),it.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var Pn=it.now(),Ln=/\?/,On=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;it.parseJSON=function(t){if(e.JSON&&e.JSON.parse)return e.JSON.parse(t+"");var n,r=null,i=it.trim(t+"");return i&&!it.trim(i.replace(On,function(e,t,i,o){return n&&t&&(r=0),0===r?e:(n=i||t,r+=!o-!i,"")}))?Function("return "+i)():it.error("Invalid JSON: "+t)},it.parseXML=function(t){var n,r;if(!t||"string"!=typeof t)return null;try{e.DOMParser?(r=new DOMParser,n=r.parseFromString(t,"text/xml")):(n=new ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(t))}catch(i){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||it.error("Invalid XML: "+t),n};var Rn,Dn,Mn=/#.*$/,In=/([?&])_=[^&]*/,Hn=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Un=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Bn=/^(?:GET|HEAD)$/,$n=/^\/\//,qn=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Fn={},Wn={},zn="*/".concat("*");try{Dn=location.href}catch(Vn){Dn=ft.createElement("a"),Dn.href="",Dn=Dn.href}Rn=qn.exec(Dn.toLowerCase())||[],it.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Dn,type:"GET",isLocal:Un.test(Rn[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":zn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":it.parseJSON,"text xml":it.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?$($(e,it.ajaxSettings),t):$(it.ajaxSettings,e)},ajaxPrefilter:U(Fn),ajaxTransport:U(Wn),ajax:function(e,t){function n(e,t,n,r){var i,c,v,y,b,S=t;2!==w&&(w=2,a&&clearTimeout(a),l=void 0,s=r||"",_.readyState=e>0?4:0,i=e>=200&&300>e||304===e,n&&(y=q(p,_,n)),y=F(p,y,_,i),i?(p.ifModified&&(b=_.getResponseHeader("Last-Modified"),b&&(it.lastModified[o]=b),b=_.getResponseHeader("etag"),b&&(it.etag[o]=b)),204===e||"HEAD"===p.type?S="nocontent":304===e?S="notmodified":(S=y.state,c=y.data,v=y.error,i=!v)):(v=S,(e||!S)&&(S="error",0>e&&(e=0))),_.status=e,_.statusText=(t||S)+"",i?f.resolveWith(d,[c,S,_]):f.rejectWith(d,[_,S,v]),_.statusCode(g),g=void 0,u&&h.trigger(i?"ajaxSuccess":"ajaxError",[_,p,i?c:v]),m.fireWith(d,[_,S]),u&&(h.trigger("ajaxComplete",[_,p]),--it.active||it.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,s,a,u,l,c,p=it.ajaxSetup({},t),d=p.context||p,h=p.context&&(d.nodeType||d.jquery)?it(d):it.event,f=it.Deferred(),m=it.Callbacks("once memory"),g=p.statusCode||{},v={},y={},w=0,b="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(2===w){if(!c)for(c={};t=Hn.exec(s);)c[t[1].toLowerCase()]=t[2];t=c[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===w?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return w||(e=y[n]=y[n]||e,v[e]=t),this},overrideMimeType:function(e){return w||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>w)for(t in e)g[t]=[g[t],e[t]];else _.always(e[_.status]);return this},abort:function(e){var t=e||b;return l&&l.abort(t),n(0,t),this}};if(f.promise(_).complete=m.add,_.success=_.done,_.error=_.fail,p.url=((e||p.url||Dn)+"").replace(Mn,"").replace($n,Rn[1]+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=it.trim(p.dataType||"*").toLowerCase().match(wt)||[""],null==p.crossDomain&&(r=qn.exec(p.url.toLowerCase()),p.crossDomain=!(!r||r[1]===Rn[1]&&r[2]===Rn[2]&&(r[3]||("http:"===r[1]?"80":"443"))===(Rn[3]||("http:"===Rn[1]?"80":"443")))),p.data&&p.processData&&"string"!=typeof p.data&&(p.data=it.param(p.data,p.traditional)),B(Fn,p,t,_),2===w)return _;u=it.event&&p.global,u&&0===it.active++&&it.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Bn.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(Ln.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=In.test(o)?o.replace(In,"$1_="+Pn++):o+(Ln.test(o)?"&":"?")+"_="+Pn++)),p.ifModified&&(it.lastModified[o]&&_.setRequestHeader("If-Modified-Since",it.lastModified[o]),it.etag[o]&&_.setRequestHeader("If-None-Match",it.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||t.contentType)&&_.setRequestHeader("Content-Type",p.contentType),_.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+zn+"; q=0.01":""):p.accepts["*"]);for(i in p.headers)_.setRequestHeader(i,p.headers[i]);if(p.beforeSend&&(p.beforeSend.call(d,_,p)===!1||2===w))return _.abort();b="abort";for(i in{success:1,error:1,complete:1})_[i](p[i]);if(l=B(Wn,p,t,_)){_.readyState=1,u&&h.trigger("ajaxSend",[_,p]),p.async&&p.timeout>0&&(a=setTimeout(function(){_.abort("timeout")},p.timeout));try{w=1,l.send(v,n)}catch(S){if(!(2>w))throw S;n(-1,S)}}else n(-1,"No Transport");return _},getJSON:function(e,t,n){return it.get(e,t,n,"json")},getScript:function(e,t){return it.get(e,void 0,t,"script")}}),it.each(["get","post"],function(e,t){it[t]=function(e,n,r,i){return it.isFunction(n)&&(i=i||r,r=n,n=void 0),it.ajax({url:e,type:t,dataType:i,data:n,success:r})}}),it._evalUrl=function(e){return it.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},it.fn.extend({wrapAll:function(e){if(it.isFunction(e))return this.each(function(t){it(this).wrapAll(e.call(this,t))});if(this[0]){var t=it(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return this.each(it.isFunction(e)?function(t){it(this).wrapInner(e.call(this,t))}:function(){var t=it(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=it.isFunction(e);return this.each(function(n){it(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){it.nodeName(this,"body")||it(this).replaceWith(this.childNodes)}).end()}}),it.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0||!nt.reliableHiddenOffsets()&&"none"===(e.style&&e.style.display||it.css(e,"display"))},it.expr.filters.visible=function(e){return!it.expr.filters.hidden(e)};var Gn=/%20/g,Xn=/\[\]$/,Kn=/\r?\n/g,Jn=/^(?:submit|button|image|reset|file)$/i,Yn=/^(?:input|select|textarea|keygen)/i;it.param=function(e,t){var n,r=[],i=function(e,t){t=it.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=it.ajaxSettings&&it.ajaxSettings.traditional),it.isArray(e)||e.jquery&&!it.isPlainObject(e))it.each(e,function(){i(this.name,this.value)});else for(n in e)W(n,e[n],t,i);return r.join("&").replace(Gn,"+")},it.fn.extend({serialize:function(){return it.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=it.prop(this,"elements");return e?it.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!it(this).is(":disabled")&&Yn.test(this.nodeName)&&!Jn.test(e)&&(this.checked||!Tt.test(e))}).map(function(e,t){var n=it(this).val();return null==n?null:it.isArray(n)?it.map(n,function(e){return{name:t.name,value:e.replace(Kn,"\r\n")}}):{name:t.name,value:n.replace(Kn,"\r\n")}}).get()}}),it.ajaxSettings.xhr=void 0!==e.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&z()||V()}:z;var Qn=0,Zn={},er=it.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in Zn)Zn[e](void 0,!0)}),nt.cors=!!er&&"withCredentials"in er,er=nt.ajax=!!er,er&&it.ajaxTransport(function(e){if(!e.crossDomain||nt.cors){var t;return{send:function(n,r){var i,o=e.xhr(),s=++Qn;if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)o[i]=e.xhrFields[i];e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(i in n)void 0!==n[i]&&o.setRequestHeader(i,n[i]+"");o.send(e.hasContent&&e.data||null),t=function(n,i){var a,u,l;if(t&&(i||4===o.readyState))if(delete Zn[s],t=void 0,o.onreadystatechange=it.noop,i)4!==o.readyState&&o.abort();else{l={},a=o.status,"string"==typeof o.responseText&&(l.text=o.responseText);try{u=o.statusText}catch(c){u=""}a||!e.isLocal||e.crossDomain?1223===a&&(a=204):a=l.text?200:404}l&&r(a,u,l,o.getAllResponseHeaders())},e.async?4===o.readyState?setTimeout(t):o.onreadystatechange=Zn[s]=t:t()},abort:function(){t&&t(void 0,!0)}}}}),it.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return it.globalEval(e),e}}}),it.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),it.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=ft.head||it("head")[0]||ft.documentElement;return{send:function(r,i){t=ft.createElement("script"),t.async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||i(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var tr=[],nr=/(=)\?(?=&|$)|\?\?/;it.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=tr.pop()||it.expando+"_"+Pn++;return this[e]=!0,e}}),it.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=t.jsonp!==!1&&(nr.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&nr.test(t.data)&&"data");return a||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=it.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(nr,"$1"+i):t.jsonp!==!1&&(t.url+=(Ln.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||it.error(i+" was not called"),s[0]
},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,tr.push(i)),s&&it.isFunction(o)&&o(s[0]),s=o=void 0}),"script"):void 0}),it.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||ft;var r=pt.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=it.buildFragment([e],t,i),i&&i.length&&it(i).remove(),it.merge([],r.childNodes))};var rr=it.fn.load;it.fn.load=function(e,t,n){if("string"!=typeof e&&rr)return rr.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(" ");return a>=0&&(r=it.trim(e.slice(a,e.length)),e=e.slice(0,a)),it.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&it.ajax({url:e,type:o,dataType:"html",data:t}).done(function(e){i=arguments,s.html(r?it("<div>").append(it.parseHTML(e)).find(r):e)}).complete(n&&function(e,t){s.each(n,i||[e.responseText,t,e])}),this},it.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){it.fn[t]=function(e){return this.on(t,e)}}),it.expr.filters.animated=function(e){return it.grep(it.timers,function(t){return e===t.elem}).length};var ir=e.document.documentElement;it.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,l,c=it.css(e,"position"),p=it(e),d={};"static"===c&&(e.style.position="relative"),a=p.offset(),o=it.css(e,"top"),u=it.css(e,"left"),l=("absolute"===c||"fixed"===c)&&it.inArray("auto",[o,u])>-1,l?(r=p.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),it.isFunction(t)&&(t=t.call(e,n,a)),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+i),"using"in t?t.using.call(e,d):p.css(d)}},it.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){it.offset.setOffset(this,e,t)});var t,n,r={top:0,left:0},i=this[0],o=i&&i.ownerDocument;if(o)return t=o.documentElement,it.contains(t,i)?(typeof i.getBoundingClientRect!==xt&&(r=i.getBoundingClientRect()),n=G(o),{top:r.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:r.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):r},position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return"fixed"===it.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),it.nodeName(e[0],"html")||(n=e.offset()),n.top+=it.css(e[0],"borderTopWidth",!0),n.left+=it.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-it.css(r,"marginTop",!0),left:t.left-n.left-it.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent||ir;e&&!it.nodeName(e,"html")&&"static"===it.css(e,"position");)e=e.offsetParent;return e||ir})}}),it.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);it.fn[e]=function(r){return Nt(this,function(e,r,i){var o=G(e);return void 0===i?o?t in o?o[t]:o.document.documentElement[r]:e[r]:void(o?o.scrollTo(n?it(o).scrollLeft():i,n?i:it(o).scrollTop()):e[r]=i)},e,r,arguments.length,null)}}),it.each(["top","left"],function(e,t){it.cssHooks[t]=j(nt.pixelPosition,function(e,n){return n?(n=tn(e,t),rn.test(n)?it(e).position()[t]+"px":n):void 0})}),it.each({Height:"height",Width:"width"},function(e,t){it.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){it.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(r===!0||i===!0?"margin":"border");return Nt(this,function(t,n,r){var i;return it.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?it.css(t,n,s):it.style(t,n,r,s)},t,o?r:void 0,o,null)}})}),it.fn.size=function(){return this.length},it.fn.andSelf=it.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return it});var or=e.jQuery,sr=e.$;return it.noConflict=function(t){return e.$===it&&(e.$=sr),t&&e.jQuery===it&&(e.jQuery=or),it},typeof t===xt&&(e.jQuery=e.$=it),it})},{}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/lodash/index.js":[function(e,t,n){(function(e){(function(){function r(e,t){if(e!==t){var n=e===e,r=t===t;if(e>t||!n||"undefined"==typeof e&&r)return 1;if(t>e||!r||"undefined"==typeof t&&n)return-1}return 0}function i(e,t,n){if(t!==t)return g(e,n);for(var r=(n||0)-1,i=e.length;++r<i;)if(e[r]===t)return r;return-1}function o(e){return"function"==typeof e||!1}function s(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}function a(e){return"string"==typeof e?e:null==e?"":e+""}function u(e){return e.charCodeAt(0)}function l(e,t){for(var n=-1,r=e.length;++n<r&&t.indexOf(e.charAt(n))>-1;);return n}function c(e,t){for(var n=e.length;n--&&t.indexOf(e.charAt(n))>-1;);return n}function p(e,t){return r(e.criteria,t.criteria)||e.index-t.index}function d(e,t){for(var n=-1,i=e.criteria,o=t.criteria,s=i.length;++n<s;){var a=r(i[n],o[n]);if(a)return a}return e.index-t.index}function h(e){return qt[e]}function f(e){return Ft[e]}function m(e){return"\\"+Vt[e]}function g(e,t,n){for(var r=e.length,i=n?t||r:(t||0)-1;n?i--:++i<r;){var o=e[i];if(o!==o)return i}return-1}function v(e){return e&&"object"==typeof e||!1}function y(e){return 160>=e&&e>=9&&13>=e||32==e||160==e||5760==e||6158==e||e>=8192&&(8202>=e||8232==e||8233==e||8239==e||8287==e||12288==e||65279==e)}function w(e,t){for(var n=-1,r=e.length,i=-1,o=[];++n<r;)e[n]===t&&(e[n]=W,o[++i]=n);return o}function b(e,t){for(var n,r=-1,i=e.length,o=-1,s=[];++r<i;){var a=e[r],u=t?t(a,r,e):a;r&&n===u||(n=u,s[++o]=a)}return s}function _(e){for(var t=-1,n=e.length;++t<n&&y(e.charCodeAt(t)););return t}function S(e){for(var t=e.length;t--&&y(e.charCodeAt(t)););return t}function x(e){return Wt[e]}function k(e){function t(e){if(v(e)&&!Qa(e)&&!(e instanceof Y)){if(e instanceof y)return e;if(na.call(e,"__chain__")&&na.call(e,"__wrapped__"))return Ir(e)}return new y(e)}function n(){}function y(e,t,n){this.__wrapped__=e,this.__actions__=n||[],this.__chain__=!!t}function Y(e){this.__wrapped__=e,this.__actions__=null,this.__dir__=1,this.__dropCount__=0,this.__filtered__=!1,this.__iteratees__=null,this.__takeCount__=La,this.__views__=null}function tt(){var e=this.__actions__,t=this.__iteratees__,n=this.__views__,r=new Y(this.__wrapped__);return r.__actions__=e?Zt(e):null,r.__dir__=this.__dir__,r.__dropCount__=this.__dropCount__,r.__filtered__=this.__filtered__,r.__iteratees__=t?Zt(t):null,r.__takeCount__=this.__takeCount__,r.__views__=n?Zt(n):null,r}function rt(){if(this.__filtered__){var e=new Y(this);e.__dir__=-1,e.__filtered__=!0}else e=this.clone(),e.__dir__*=-1;return e}function qt(){var e=this.__wrapped__.value();if(!Qa(e))return Yn(e,this.__actions__);var t=this.__dir__,n=0>t,r=br(0,e.length,this.__views__),i=r.start,o=r.end,s=o-i,a=this.__dropCount__,u=ja(s,this.__takeCount__),l=n?o:i-1,c=this.__iteratees__,p=c?c.length:0,d=0,h=[];e:for(;s--&&u>d;){l+=t;for(var f=-1,m=e[l];++f<p;){var g=c[f],v=g.iteratee,y=v(m,l,e),w=g.type;if(w==$)m=y;else if(!y){if(w==B)continue e;break e}}a?a--:h[d++]=m}return h}function Ft(){this.__data__={}}function Wt(e){return this.has(e)&&delete this.__data__[e]}function zt(e){return"__proto__"==e?C:this.__data__[e]}function Vt(e){return"__proto__"!=e&&na.call(this.__data__,e)}function Xt(e,t){return"__proto__"!=e&&(this.__data__[e]=t),this}function Kt(e){var t=e?e.length:0;for(this.data={hash:Sa(null),set:new ma};t--;)this.push(e[t])}function Jt(e,t){var n=e.data,r="string"==typeof t||No(t)?n.set.has(t):n.hash[t];return r?0:-1}function Yt(e){var t=this.data;"string"==typeof e||No(e)?t.set.add(e):t.hash[e]=!0}function Zt(e,t){var n=-1,r=e.length;for(t||(t=$s(r));++n<r;)t[n]=e[n];return t}function en(e,t){for(var n=-1,r=e.length;++n<r&&t(e[n],n,e)!==!1;);return e}function tn(e,t){for(var n=e.length;n--&&t(e[n],n,e)!==!1;);return e}function nn(e,t){for(var n=-1,r=e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function rn(e,t){for(var n=-1,r=e.length,i=-1,o=[];++n<r;){var s=e[n];t(s,n,e)&&(o[++i]=s)}return o}function on(e,t){for(var n=-1,r=e.length,i=$s(r);++n<r;)i[n]=t(e[n],n,e);return i}function sn(e){for(var t=-1,n=e.length,r=Pa;++t<n;){var i=e[t];i>r&&(r=i)}return r}function an(e){for(var t=-1,n=e.length,r=La;++t<n;){var i=e[t];r>i&&(r=i)}return r}function un(e,t,n,r){var i=-1,o=e.length;for(r&&o&&(n=e[++i]);++i<o;)n=t(n,e[i],i,e);return n}function ln(e,t,n,r){var i=e.length;for(r&&i&&(n=e[--i]);i--;)n=t(n,e[i],i,e);return n}function cn(e,t){for(var n=-1,r=e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function pn(e,t){return"undefined"==typeof e?t:e}function dn(e,t,n,r){return"undefined"!=typeof e&&na.call(r,n)?e:t}function hn(e,t,n){var r=ru(t);if(!n)return mn(t,e,r);for(var i=-1,o=r.length;++i<o;){var s=r[i],a=e[s],u=n(a,t[s],s,e,t);(u===u?u===a:a!==a)&&("undefined"!=typeof a||s in e)||(e[s]=u)}return e}function fn(e,t){for(var n=-1,r=e.length,i=Er(r),o=t.length,s=$s(o);++n<o;){var a=t[n];i?(a=parseFloat(a),s[n]=Cr(a,r)?e[a]:C):s[n]=e[a]}return s}function mn(e,t,n){n||(n=t,t={});for(var r=-1,i=n.length;++r<i;){var o=n[r];t[o]=e[o]}return t}function gn(e,t){for(var n=-1,r=t.length;++n<r;){var i=t[n];e[i]=hr(e[i],E,e)}return e}function vn(e,t,n){var r=typeof e;return"function"==r?"undefined"!=typeof t&&kr(e)?er(e,t,n):e:null==e?Ts:"object"==r?Un(e):"undefined"==typeof t?Fn(e+""):Bn(e+"",t)}function yn(e,t,n,r,i,o,s){var a;if(n&&(a=i?n(e,r,i):n(e)),"undefined"!=typeof a)return a;if(!No(e))return e;var u=Qa(e);if(u){if(a=_r(e),!t)return Zt(e,a)}else{var l=ia.call(e),c=l==J;if(l!=Z&&l!=z&&(!c||i))return Bt[l]?xr(e,l,t):i?e:{};if(a=Sr(c?{}:e),!t)return mn(e,a,ru(e))}o||(o=[]),s||(s=[]);for(var p=o.length;p--;)if(o[p]==e)return s[p];return o.push(e),s.push(a),(u?en:Pn)(e,function(r,i){a[i]=yn(r,t,n,i,e,o,s)}),a}function wn(e,t,n,r){if("function"!=typeof e)throw new Js(F);return ga(function(){e.apply(C,Gn(n,r))},t)}function bn(e,t){var n=e?e.length:0,r=[];if(!n)return r;var o=-1,s=wr(),a=s==i,u=a&&t.length>=200?qa(t):null,l=t.length;u&&(s=Jt,a=!1,t=u);e:for(;++o<n;){var c=e[o];if(a&&c===c){for(var p=l;p--;)if(t[p]===c)continue e;r.push(c)}else s(t,c)<0&&r.push(c)}return r}function _n(e,t){var n=e?e.length:0;if(!Er(n))return Pn(e,t);for(var r=-1,i=Mr(e);++r<n&&t(i[r],r,i)!==!1;);return e}function Sn(e,t){var n=e?e.length:0;if(!Er(n))return Ln(e,t);for(var r=Mr(e);n--&&t(r[n],n,r)!==!1;);return e}function xn(e,t){var n=!0;return _n(e,function(e,r,i){return n=!!t(e,r,i)}),n}function kn(e,t,n,r){var i=e.length;for(n=null==n?0:+n||0,0>n&&(n=-n>i?0:i+n),r="undefined"==typeof r||r>i?i:+r||0,0>r&&(r+=i),i=n>r?0:r>>>0,n>>>=0;i>n;)e[n++]=t;return e}function Cn(e,t){var n=[];return _n(e,function(e,r,i){t(e,r,i)&&n.push(e)}),n}function jn(e,t,n,r){var i;return n(e,function(e,n,o){return t(e,n,o)?(i=r?n:e,!1):void 0}),i}function En(e,t,n,r){for(var i=(r||0)-1,o=e.length,s=-1,a=[];++i<o;){var u=e[i];if(v(u)&&Er(u.length)&&(Qa(u)||So(u))){t&&(u=En(u,t,n));var l=-1,c=u.length;for(a.length+=c;++l<c;)a[++s]=u[l]}else n||(a[++s]=u)}return a}function An(e,t,n){for(var r=-1,i=Mr(e),o=n(e),s=o.length;++r<s;){var a=o[r];if(t(i[a],a,i)===!1)break}return e}function Nn(e,t,n){for(var r=Mr(e),i=n(e),o=i.length;o--;){var s=i[o];if(t(r[s],s,r)===!1)break}return e}function Tn(e,t){return An(e,t,Qo)}function Pn(e,t){return An(e,t,ru)}function Ln(e,t){return Nn(e,t,ru)}function On(e,t){for(var n=-1,r=t.length,i=-1,o=[];++n<r;){var s=t[n];eu(e[s])&&(o[++i]=s)}return o}function Rn(e,t,n){var r=-1,i="function"==typeof t,o=e?e.length:0,s=Er(o)?$s(o):[];return _n(e,function(e){var o=i?t:null!=e&&e[t];s[++r]=o?o.apply(e,n):C}),s}function Dn(e,t,n,r,i,o){if(e===t)return 0!==e||1/e==1/t;var s=typeof e,a=typeof t;return"function"!=s&&"object"!=s&&"function"!=a&&"object"!=a||null==e||null==t?e!==e&&t!==t:Mn(e,t,Dn,n,r,i,o)}function Mn(e,t,n,r,i,o,s){var a=Qa(e),u=Qa(t),l=V,c=V;a||(l=ia.call(e),l==z?l=Z:l!=Z&&(a=Io(e))),u||(c=ia.call(t),c==z?c=Z:c!=Z&&(u=Io(t)));var p=l==Z,d=c==Z,h=l==c;if(h&&!a&&!p)return mr(e,t,l);var f=p&&na.call(e,"__wrapped__"),m=d&&na.call(t,"__wrapped__");if(f||m)return n(f?e.value():e,m?t.value():t,r,i,o,s);if(!h)return!1;o||(o=[]),s||(s=[]);for(var g=o.length;g--;)if(o[g]==e)return s[g]==t;o.push(e),s.push(t);var v=(a?fr:gr)(e,t,n,r,i,o,s);return o.pop(),s.pop(),v}function In(e,t,n,r,i){var o=t.length;if(null==e)return!o;for(var s=-1,a=!i;++s<o;)if(a&&r[s]?n[s]!==e[t[s]]:!na.call(e,t[s]))return!1;for(s=-1;++s<o;){var u=t[s];if(a&&r[s])var l=na.call(e,u);else{var c=e[u],p=n[s];l=i?i(c,p,u):C,"undefined"==typeof l&&(l=Dn(p,c,i,!0))}if(!l)return!1}return!0}function Hn(e,t){var n=[];return _n(e,function(e,r,i){n.push(t(e,r,i))}),n}function Un(e){var t=ru(e),n=t.length;if(1==n){var r=t[0],i=e[r];if(Ar(i))return function(e){return null!=e&&e[r]===i&&na.call(e,r)}}for(var o=$s(n),s=$s(n);n--;)i=e[t[n]],o[n]=i,s[n]=Ar(i);return function(e){return In(e,t,o,s)}}function Bn(e,t){return Ar(t)?function(n){return null!=n&&n[e]===t}:function(n){return null!=n&&Dn(t,n[e],null,!0)}}function $n(e,t,n,r,i){if(!No(e))return e;var o=Er(t.length)&&(Qa(t)||Io(t));return(o?en:Pn)(t,function(t,s,a){if(v(t))return r||(r=[]),i||(i=[]),qn(e,a,s,$n,n,r,i);var u=e[s],l=n?n(u,t,s,e,a):C,c="undefined"==typeof l;c&&(l=t),!o&&"undefined"==typeof l||!c&&(l===l?l===u:u!==u)||(e[s]=l)}),e}function qn(e,t,n,r,i,o,s){for(var a=o.length,u=t[n];a--;)if(o[a]==u)return void(e[n]=s[a]);var l=e[n],c=i?i(l,u,n,e,t):C,p="undefined"==typeof c;p&&(c=u,Er(u.length)&&(Qa(u)||Io(u))?c=Qa(l)?l:l?Zt(l):[]:tu(u)||So(u)?c=So(l)?Bo(l):tu(l)?l:{}:p=!1),o.push(u),s.push(c),p?e[n]=r(c,u,i,o,s):(c===c?c!==l:l===l)&&(e[n]=c)}function Fn(e){return function(t){return null==t?C:t[e]}}function Wn(e,t){var n=t.length,i=fn(e,t);for(t.sort(r);n--;){var o=parseFloat(t[n]);if(o!=s&&Cr(o)){var s=o;va.call(e,o,1)}}return i}function zn(e,t){return e+pa(Ta()*(t-e+1))}function Vn(e,t,n,r,i){return i(e,function(e,i,o){n=r?(r=!1,e):t(n,e,i,o)}),n}function Gn(e,t,n){var r=-1,i=e.length;t=null==t?0:+t||0,0>t&&(t=-t>i?0:i+t),n="undefined"==typeof n||n>i?i:+n||0,0>n&&(n+=i),i=t>n?0:n-t>>>0,t>>>=0;for(var o=$s(i);++r<i;)o[r]=e[r+t];return o}function Xn(e,t){var n;return _n(e,function(e,r,i){return n=t(e,r,i),!n}),!!n}function Kn(e,t){var n=-1,r=wr(),o=e.length,s=r==i,a=s&&o>=200,u=a?qa():null,l=[];u?(r=Jt,s=!1):(a=!1,u=t?[]:l);e:for(;++n<o;){var c=e[n],p=t?t(c,n,e):c;if(s&&c===c){for(var d=u.length;d--;)if(u[d]===p)continue e;t&&u.push(p),l.push(c)}else r(u,p)<0&&((t||a)&&u.push(p),l.push(c))}return l}function Jn(e,t){for(var n=-1,r=t.length,i=$s(r);++n<r;)i[n]=e[t[n]];return i}function Yn(e,t){var n=e;n instanceof Y&&(n=n.value());for(var r=-1,i=t.length;++r<i;){var o=[n],s=t[r];ha.apply(o,s.args),n=s.func.apply(s.thisArg,o)}return n}function Qn(e,t,n){var r=0,i=e?e.length:r;if("number"==typeof t&&t===t&&Da>=i){for(;i>r;){var o=r+i>>>1,s=e[o];(n?t>=s:t>s)?r=o+1:i=o}return i}return Zn(e,t,Ts,n)}function Zn(e,t,n,r){t=n(t);for(var i=0,o=e?e.length:0,s=t!==t,a="undefined"==typeof t;o>i;){var u=pa((i+o)/2),l=n(e[u]),c=l===l;if(s)var p=c||r;else p=a?c&&(r||"undefined"!=typeof l):r?t>=l:t>l;p?i=u+1:o=u}return ja(o,Ra)}function er(e,t,n){if("function"!=typeof e)return Ts;if("undefined"==typeof t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 3:return function(n,r,i){return e.call(t,n,r,i)};case 4:return function(n,r,i,o){return e.call(t,n,r,i,o)};case 5:return function(n,r,i,o,s){return e.call(t,n,r,i,o,s)}}return function(){return e.apply(t,arguments)}}function tr(e){return ua.call(e,0)}function nr(e,t,n){for(var r=n.length,i=-1,o=Ca(e.length-r,0),s=-1,a=t.length,u=$s(o+a);++s<a;)u[s]=t[s];for(;++i<r;)u[n[i]]=e[i];for(;o--;)u[s++]=e[i++];return u}function rr(e,t,n){for(var r=-1,i=n.length,o=-1,s=Ca(e.length-i,0),a=-1,u=t.length,l=$s(s+u);++o<s;)l[o]=e[o];for(var c=o;++a<u;)l[c+a]=t[a];for(;++r<i;)l[c+n[r]]=e[o++];return l}function ir(e,t){return function(n,r,i){var o=t?t():{};if(r=yr(r,i,3),Qa(n))for(var s=-1,a=n.length;++s<a;){var u=n[s];e(o,u,r(u,s,n),n)}else _n(n,function(t,n,i){e(o,t,r(t,n,i),i)});return o}}function or(e){return function(){var t=arguments.length,n=arguments[0];if(2>t||null==n)return n;if(t>3&&jr(arguments[1],arguments[2],arguments[3])&&(t=2),t>3&&"function"==typeof arguments[t-2])var r=er(arguments[--t-1],arguments[t--],5);else t>2&&"function"==typeof arguments[t-1]&&(r=arguments[--t]);for(var i=0;++i<t;){var o=arguments[i];o&&e(n,o,r)}return n}}function sr(e,t){function n(){return(this instanceof n?r:e).apply(t,arguments)}var r=ur(e);return n}function ar(e){return function(t){for(var n=-1,r=js(cs(t)),i=r.length,o="";++n<i;)o=e(o,r[n],n);return o}}function ur(e){return function(){var t=Ba(e.prototype),n=e.apply(t,arguments);return No(n)?n:t}}function lr(e,t){return function(n,r,i){i&&jr(n,r,i)&&(r=null);var o=yr(),s=null==r;if(o===vn&&s||(s=!1,r=o(r,i,3)),s){var a=Qa(n);if(a||!Mo(n))return e(a?n:Dr(n));r=u}return vr(n,r,t)}}function cr(e,t,n,r,i,o,s,a,u,l){function c(){for(var b=arguments.length,_=b,S=$s(b);_--;)S[_]=arguments[_];if(r&&(S=nr(S,r,i)),o&&(S=rr(S,o,s)),f||g){var x=c.placeholder,k=w(S,x);if(b-=k.length,l>b){var C=a?Zt(a):null,j=Ca(l-b,0),N=f?k:null,T=f?null:k,P=f?S:null,R=f?null:S;t|=f?L:O,t&=~(f?O:L),m||(t&=~(E|A));var D=cr(e,t,n,P,N,R,T,C,u,j);return D.placeholder=x,D}}var M=d?n:this;return h&&(e=M[y]),a&&(S=Lr(S,a)),p&&u<S.length&&(S.length=u),(this instanceof c?v||ur(e):e).apply(M,S)}var p=t&D,d=t&E,h=t&A,f=t&T,m=t&N,g=t&P,v=!h&&ur(e),y=e;return c}function pr(e,t,n){var r=e.length;if(t=+t,r>=t||!xa(t))return"";var i=t-r;return n=null==n?" ":n+"",ys(n,la(i/n.length)).slice(0,i)}function dr(e,t,n,r){function i(){for(var t=-1,a=arguments.length,u=-1,l=r.length,c=$s(a+l);++u<l;)c[u]=r[u];for(;a--;)c[u++]=arguments[++t];return(this instanceof i?s:e).apply(o?n:this,c)}var o=t&E,s=ur(e);return i}function hr(e,t,n,r,i,o,s,a){var u=t&A;if(!u&&"function"!=typeof e)throw new Js(F);var l=r?r.length:0;if(l||(t&=~(L|O),r=i=null),l-=i?i.length:0,t&O){var c=r,p=i;r=i=null}var d=!u&&Fa(e),h=[e,t,n,r,i,c,p,o,s,a];if(d&&d!==!0&&(Nr(h,d),t=h[1],a=h[9]),h[9]=null==a?u?0:e.length:Ca(a-l,0)||0,t==E)var f=sr(h[0],h[2]);else f=t!=L&&t!=(E|L)||h[4].length?cr.apply(C,h):dr.apply(C,h);var m=d?$a:Wa;return m(f,h)}function fr(e,t,n,r,i,o,s){var a=-1,u=e.length,l=t.length,c=!0;if(u!=l&&!(i&&l>u))return!1;for(;c&&++a<u;){var p=e[a],d=t[a];if(c=C,r&&(c=i?r(d,p,a):r(p,d,a)),"undefined"==typeof c)if(i)for(var h=l;h--&&(d=t[h],!(c=p&&p===d||n(p,d,r,i,o,s))););else c=p&&p===d||n(p,d,r,i,o,s)}return!!c}function mr(e,t,n){switch(n){case G:case X:return+e==+t;case K:return e.name==t.name&&e.message==t.message;case Q:return e!=+e?t!=+t:0==e?1/e==1/t:e==+t;case et:case nt:return e==t+""}return!1}function gr(e,t,n,r,i,o,s){var a=ru(e),u=a.length,l=ru(t),c=l.length;if(u!=c&&!i)return!1;for(var p,d=-1;++d<u;){var h=a[d],f=na.call(t,h);if(f){var m=e[h],g=t[h];f=C,r&&(f=i?r(g,m,h):r(m,g,h)),"undefined"==typeof f&&(f=m&&m===g||n(m,g,r,i,o,s))}if(!f)return!1;p||(p="constructor"==h)}if(!p){var v=e.constructor,y=t.constructor;if(v!=y&&"constructor"in e&&"constructor"in t&&!("function"==typeof v&&v instanceof v&&"function"==typeof y&&y instanceof y))return!1}return!0}function vr(e,t,n){var r=n?La:Pa,i=r,o=i;return _n(e,function(e,s,a){var u=t(e,s,a);((n?i>u:u>i)||u===r&&u===o)&&(i=u,o=e)}),o}function yr(e,n,r){var i=t.callback||As;return i=i===As?vn:i,r?i(e,n,r):i}function wr(e,n,r){var o=t.indexOf||Yr;return o=o===Yr?i:o,e?o(e,n,r):o}function br(e,t,n){for(var r=-1,i=n?n.length:0;++r<i;){var o=n[r],s=o.size;switch(o.type){case"drop":e+=s;break;case"dropRight":t-=s;break;case"take":t=ja(t,e+s);break;case"takeRight":e=Ca(e,t-s)}}return{start:e,end:t}}function _r(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&na.call(e,"index")&&(n.index=e.index,n.input=e.input),n}function Sr(e){var t=e.constructor;return"function"==typeof t&&t instanceof t||(t=Gs),new t}function xr(e,t,n){var r=e.constructor;switch(t){case it:return tr(e);case G:case X:return new r(+e);case ot:case st:case at:case ut:case lt:case ct:case pt:case dt:case ht:var i=e.buffer;return new r(n?tr(i):i,e.byteOffset,e.length);case Q:case nt:return new r(e);case et:var o=new r(e.source,Ct.exec(e));o.lastIndex=e.lastIndex}return o}function kr(e){var n=t.support,r=!(n.funcNames?e.name:n.funcDecomp);if(!r){var i=ea.call(e);n.funcNames||(r=!jt.test(i)),r||(r=Ot.test(i)||Lo(e),$a(e,r))}return r}function Cr(e,t){return e=+e,t=null==t?Ia:t,e>-1&&e%1==0&&t>e}function jr(e,t,n){if(!No(n))return!1;var r=typeof t;if("number"==r)var i=n.length,o=Er(i)&&Cr(t,i);else o="string"==r&&t in n;if(o){var s=n[t];return e===e?e===s:s!==s}return!1}function Er(e){return"number"==typeof e&&e>-1&&e%1==0&&Ia>=e}function Ar(e){return e===e&&(0===e?1/e>0:!No(e))}function Nr(e,t){var n=e[1],r=t[1],i=n|r,o=D|R,s=E|A,a=o|s|N|P,u=n&D&&!(r&D),l=n&R&&!(r&R),c=(l?e:t)[7],p=(u?e:t)[8],d=!(n>=R&&r>s||n>s&&r>=R),h=i>=o&&a>=i&&(R>n||(l||u)&&c.length<=p);if(!d&&!h)return e;r&E&&(e[2]=t[2],i|=n&E?0:N);var f=t[3];if(f){var m=e[3];e[3]=m?nr(m,f,t[4]):Zt(f),e[4]=m?w(e[3],W):Zt(t[4])}return f=t[5],f&&(m=e[5],e[5]=m?rr(m,f,t[6]):Zt(f),e[6]=m?w(e[5],W):Zt(t[6])),f=t[7],f&&(e[7]=Zt(f)),r&D&&(e[8]=null==e[8]?t[8]:ja(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=i,e}function Tr(e,t){e=Mr(e);for(var n=-1,r=t.length,i={};++n<r;){var o=t[n];o in e&&(i[o]=e[o])}return i}function Pr(e,t){var n={};return Tn(e,function(e,r,i){t(e,r,i)&&(n[r]=e)}),n}function Lr(e,t){for(var n=e.length,r=ja(t.length,n),i=Zt(e);r--;){var o=t[r];e[r]=Cr(o,n)?i[o]:C}return e}function Or(e){{var n;t.support}if(!v(e)||ia.call(e)!=Z||!na.call(e,"constructor")&&(n=e.constructor,"function"==typeof n&&!(n instanceof n)))return!1;var r;return Tn(e,function(e,t){r=t}),"undefined"==typeof r||na.call(e,r)}function Rr(e){for(var n=Qo(e),r=n.length,i=r&&e.length,o=t.support,s=i&&Er(i)&&(Qa(e)||o.nonEnumArgs&&So(e)),a=-1,u=[];++a<r;){var l=n[a];(s&&Cr(l,i)||na.call(e,l))&&u.push(l)}return u}function Dr(e){return null==e?[]:Er(e.length)?No(e)?e:Gs(e):os(e)}function Mr(e){return No(e)?e:Gs(e)}function Ir(e){return e instanceof Y?e.clone():new y(e.__wrapped__,e.__chain__,Zt(e.__actions__))}function Hr(e,t,n){t=(n?jr(e,t,n):null==t)?1:Ca(+t||1,1);for(var r=0,i=e?e.length:0,o=-1,s=$s(la(i/t));i>r;)s[++o]=Gn(e,r,r+=t);return s}function Ur(e){for(var t=-1,n=e?e.length:0,r=-1,i=[];++t<n;){var o=e[t];o&&(i[++r]=o)}return i}function Br(){for(var e=-1,t=arguments.length;++e<t;){var n=arguments[e];if(Qa(n)||So(n))break}return bn(n,En(arguments,!1,!0,++e))}function $r(e,t,n){var r=e?e.length:0;return r?((n?jr(e,t,n):null==t)&&(t=1),Gn(e,0>t?0:t)):[]}function qr(e,t,n){var r=e?e.length:0;return r?((n?jr(e,t,n):null==t)&&(t=1),t=r-(+t||0),Gn(e,0,0>t?0:t)):[]}function Fr(e,t,n){var r=e?e.length:0;if(!r)return[];for(t=yr(t,n,3);r--&&t(e[r],r,e););return Gn(e,0,r+1)}function Wr(e,t,n){var r=e?e.length:0;if(!r)return[];var i=-1;for(t=yr(t,n,3);++i<r&&t(e[i],i,e););return Gn(e,i)}function zr(e,t,n,r){var i=e?e.length:0;return i?(n&&"number"!=typeof n&&jr(e,t,n)&&(n=0,r=i),kn(e,t,n,r)):[]}function Vr(e,t,n){var r=-1,i=e?e.length:0;for(t=yr(t,n,3);++r<i;)if(t(e[r],r,e))return r;return-1}function Gr(e,t,n){var r=e?e.length:0;for(t=yr(t,n,3);r--;)if(t(e[r],r,e))return r;return-1}function Xr(e){return e?e[0]:C}function Kr(e,t,n){var r=e?e.length:0;return n&&jr(e,t,n)&&(t=!1),r?En(e,t):[]}function Jr(e){var t=e?e.length:0;return t?En(e,!0):[]}function Yr(e,t,n){var r=e?e.length:0;if(!r)return-1;if("number"==typeof n)n=0>n?Ca(r+n,0):n||0;else if(n){var o=Qn(e,t),s=e[o];return(t===t?t===s:s!==s)?o:-1}return i(e,t,n)}function Qr(e){return qr(e,1)}function Zr(){for(var e=[],t=-1,n=arguments.length,r=[],o=wr(),s=o==i;++t<n;){var a=arguments[t];(Qa(a)||So(a))&&(e.push(a),r.push(s&&a.length>=120?qa(t&&a):null))}n=e.length;var u=e[0],l=-1,c=u?u.length:0,p=[],d=r[0];e:for(;++l<c;)if(a=u[l],(d?Jt(d,a):o(p,a))<0){for(t=n;--t;){var h=r[t];if((h?Jt(h,a):o(e[t],a))<0)continue e}d&&d.push(a),p.push(a)}return p}function ei(e){var t=e?e.length:0;return t?e[t-1]:C}function ti(e,t,n){var r=e?e.length:0;if(!r)return-1;var i=r;if("number"==typeof n)i=(0>n?Ca(r+n,0):ja(n||0,r-1))+1;else if(n){i=Qn(e,t,!0)-1;var o=e[i];return(t===t?t===o:o!==o)?i:-1}if(t!==t)return g(e,i,!0);for(;i--;)if(e[i]===t)return i;return-1}function ni(){var e=arguments[0];if(!e||!e.length)return e;for(var t=0,n=wr(),r=arguments.length;++t<r;)for(var i=0,o=arguments[t];(i=n(e,o,i))>-1;)va.call(e,i,1);return e}function ri(e){return Wn(e||[],En(arguments,!1,!1,1))}function ii(e,t,n){var r=-1,i=e?e.length:0,o=[];for(t=yr(t,n,3);++r<i;){var s=e[r];t(s,r,e)&&(o.push(s),va.call(e,r--,1),i--)}return o}function oi(e){return $r(e,1)}function si(e,t,n){var r=e?e.length:0;return r?(n&&"number"!=typeof n&&jr(e,t,n)&&(t=0,n=r),Gn(e,t,n)):[]}function ai(e,t,n,r){var i=yr(n);return i===vn&&null==n?Qn(e,t):Zn(e,t,i(n,r,1))}function ui(e,t,n,r){var i=yr(n);return i===vn&&null==n?Qn(e,t,!0):Zn(e,t,i(n,r,1),!0)}function li(e,t,n){var r=e?e.length:0;return r?((n?jr(e,t,n):null==t)&&(t=1),Gn(e,0,0>t?0:t)):[]}function ci(e,t,n){var r=e?e.length:0;return r?((n?jr(e,t,n):null==t)&&(t=1),t=r-(+t||0),Gn(e,0>t?0:t)):[]}function pi(e,t,n){var r=e?e.length:0;if(!r)return[];for(t=yr(t,n,3);r--&&t(e[r],r,e););return Gn(e,r+1)}function di(e,t,n){var r=e?e.length:0;if(!r)return[];var i=-1;for(t=yr(t,n,3);++i<r&&t(e[i],i,e););return Gn(e,0,i)}function hi(){return Kn(En(arguments,!1,!0))}function fi(e,t,n,r){var o=e?e.length:0;if(!o)return[];null!=t&&"boolean"!=typeof t&&(r=n,n=jr(e,t,r)?null:t,t=!1);var s=yr();return(s!==vn||null!=n)&&(n=s(n,r,3)),t&&wr()==i?b(e,n):Kn(e,n)}function mi(e){for(var t=-1,n=(e&&e.length&&sn(on(e,ta)))>>>0,r=$s(n);++t<n;)r[t]=on(e,Fn(t));return r}function gi(e){return bn(e,Gn(arguments,1))}function vi(){for(var e=-1,t=arguments.length;++e<t;){var n=arguments[e];if(Qa(n)||So(n))var r=r?bn(r,n).concat(bn(n,r)):n}return r?Kn(r):[]}function yi(){for(var e=arguments.length,t=$s(e);e--;)t[e]=arguments[e];return mi(t)}function wi(e,t){var n=-1,r=e?e.length:0,i={};for(!r||t||Qa(e[0])||(t=[]);++n<r;){var o=e[n];t?i[o]=t[n]:o&&(i[o[0]]=o[1])}return i}function bi(e){var n=t(e);return n.__chain__=!0,n}function _i(e,t,n){return t.call(n,e),e}function Si(e,t,n){return t.call(n,e)}function xi(){return bi(this)}function ki(){return new y(this.value(),this.__chain__)}function Ci(e){for(var t,r=this;r instanceof n;){var i=Ir(r);t?o.__wrapped__=i:t=i;var o=i;r=r.__wrapped__}return o.__wrapped__=e,t}function ji(){var e=this.__wrapped__;return e instanceof Y?(this.__actions__.length&&(e=new Y(this)),new y(e.reverse(),this.__chain__)):this.thru(function(e){return e.reverse()})}function Ei(){return this.value()+""}function Ai(){return Yn(this.__wrapped__,this.__actions__)}function Ni(e){var t=e?e.length:0;return Er(t)&&(e=Dr(e)),fn(e,En(arguments,!1,!1,1))}function Ti(e,t,n){var r=Qa(e)?nn:xn;return("function"!=typeof t||"undefined"!=typeof n)&&(t=yr(t,n,3)),r(e,t)}function Pi(e,t,n){var r=Qa(e)?rn:Cn;return t=yr(t,n,3),r(e,t)}function Li(e,t,n){if(Qa(e)){var r=Vr(e,t,n);return r>-1?e[r]:C}return t=yr(t,n,3),jn(e,t,_n)}function Oi(e,t,n){return t=yr(t,n,3),jn(e,t,Sn)}function Ri(e,t){return Li(e,Un(t))}function Di(e,t,n){return"function"==typeof t&&"undefined"==typeof n&&Qa(e)?en(e,t):_n(e,er(t,n,3))}function Mi(e,t,n){return"function"==typeof t&&"undefined"==typeof n&&Qa(e)?tn(e,t):Sn(e,er(t,n,3))}function Ii(e,t,n){var r=e?e.length:0;return Er(r)||(e=os(e),r=e.length),r?(n="number"==typeof n?0>n?Ca(r+n,0):n||0:0,"string"==typeof e||!Qa(e)&&Mo(e)?r>n&&e.indexOf(t,n)>-1:wr(e,t,n)>-1):!1}function Hi(e,t){return Rn(e,t,Gn(arguments,2))}function Ui(e,t,n){var r=Qa(e)?on:Hn;return t=yr(t,n,3),r(e,t)}function Bi(e,t){return Ui(e,Fn(t))}function $i(e,t,n,r){var i=Qa(e)?un:Vn;return i(e,yr(t,r,4),n,arguments.length<3,_n)}function qi(e,t,n,r){var i=Qa(e)?ln:Vn;return i(e,yr(t,r,4),n,arguments.length<3,Sn)}function Fi(e,t,n){var r=Qa(e)?rn:Cn;return t=yr(t,n,3),r(e,function(e,n,r){return!t(e,n,r)})}function Wi(e,t,n){if(n?jr(e,t,n):null==t){e=Dr(e);var r=e.length;return r>0?e[zn(0,r-1)]:C}var i=zi(e);return i.length=ja(0>t?0:+t||0,i.length),i}function zi(e){e=Dr(e);for(var t=-1,n=e.length,r=$s(n);++t<n;){var i=zn(0,t);t!=i&&(r[t]=r[i]),r[i]=e[t]}return r}function Vi(e){var t=e?e.length:0;return Er(t)?t:ru(e).length}function Gi(e,t,n){var r=Qa(e)?cn:Xn;return("function"!=typeof t||"undefined"!=typeof n)&&(t=yr(t,n,3)),r(e,t)}function Xi(e,t,n){var r=-1,i=e?e.length:0,o=Er(i)?$s(i):[];return n&&jr(e,t,n)&&(t=null),t=yr(t,n,3),_n(e,function(e,n,i){o[++r]={criteria:t(e,n,i),index:r,value:e}}),s(o,p)}function Ki(e){var t=arguments;t.length>3&&jr(t[1],t[2],t[3])&&(t=[e,t[1]]);var n=-1,r=e?e.length:0,i=En(t,!1,!1,1),o=Er(r)?$s(r):[];return _n(e,function(e){for(var t=i.length,r=$s(t);t--;)r[t]=null==e?C:e[i[t]];o[++n]={criteria:r,index:n,value:e}}),s(o,d)}function Ji(e,t){return Pi(e,Un(t))}function Yi(e,t){if("function"!=typeof t){if("function"!=typeof e)throw new Js(F);var n=e;e=t,t=n}return e=xa(e=+e)?e:0,function(){return--e<1?t.apply(this,arguments):void 0}}function Qi(e,t,n){return n&&jr(e,t,n)&&(t=null),t=e&&null==t?e.length:Ca(+t||0,0),hr(e,D,null,null,null,null,t)}function Zi(e,t){var n;if("function"!=typeof t){if("function"!=typeof e)throw new Js(F);var r=e;e=t,t=r}return function(){return--e>0?n=t.apply(this,arguments):t=null,n}}function eo(e,t){var n=E;if(arguments.length>2){var r=Gn(arguments,2),i=w(r,eo.placeholder);n|=L}return hr(e,n,t,r,i)}function to(e){return gn(e,arguments.length>1?En(arguments,!1,!1,1):Ko(e))}function no(e,t){var n=E|A;if(arguments.length>2){var r=Gn(arguments,2),i=w(r,no.placeholder);n|=L}return hr(t,n,e,r,i)}function ro(e,t,n){n&&jr(e,t,n)&&(t=null);var r=hr(e,T,null,null,null,null,null,t);return r.placeholder=ro.placeholder,r}function io(e,t,n){n&&jr(e,t,n)&&(t=null);var r=hr(e,P,null,null,null,null,null,t);return r.placeholder=io.placeholder,r}function oo(e,t,n){function r(){d&&ca(d),u&&ca(u),u=d=h=C}function i(){var n=t-(Ya()-c);if(0>=n||n>t){u&&ca(u);var r=h;u=d=h=C,r&&(f=Ya(),l=e.apply(p,a),d||u||(a=p=null))}else d=ga(i,n)}function o(){d&&ca(d),u=d=h=C,(g||m!==t)&&(f=Ya(),l=e.apply(p,a),d||u||(a=p=null))}function s(){if(a=arguments,c=Ya(),p=this,h=g&&(d||!v),m===!1)var n=v&&!d;else{u||v||(f=c);var r=m-(c-f),s=0>=r||r>m;s?(u&&(u=ca(u)),f=c,l=e.apply(p,a)):u||(u=ga(o,r))}return s&&d?d=ca(d):d||t===m||(d=ga(i,t)),n&&(s=!0,l=e.apply(p,a)),!s||d||u||(a=p=null),l}var a,u,l,c,p,d,h,f=0,m=!1,g=!0;if("function"!=typeof e)throw new Js(F);if(t=0>t?0:+t||0,n===!0){var v=!0;g=!1}else No(n)&&(v=n.leading,m="maxWait"in n&&Ca(+n.maxWait||0,t),g="trailing"in n?n.trailing:g);return s.cancel=r,s}function so(e){return wn(e,1,arguments,1)}function ao(e,t){return wn(e,t,arguments,2)}function uo(){var e=arguments,t=e.length;if(!t)return function(){return arguments[0]};if(!nn(e,o))throw new Js(F);return function(){for(var n=0,r=e[n].apply(this,arguments);++n<t;)r=e[n].call(this,r);return r}}function lo(){var e=arguments,t=e.length-1;if(0>t)return function(){return arguments[0]};if(!nn(e,o))throw new Js(F);return function(){for(var n=t,r=e[n].apply(this,arguments);n--;)r=e[n].call(this,r);return r}}function co(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new Js(F);var n=function(){var r=n.cache,i=t?t.apply(this,arguments):arguments[0];if(r.has(i))return r.get(i);var o=e.apply(this,arguments);return r.set(i,o),o};return n.cache=new co.Cache,n}function po(e){if("function"!=typeof e)throw new Js(F);return function(){return!e.apply(this,arguments)}}function ho(e){return Zi(e,2)}function fo(e){var t=Gn(arguments,1),n=w(t,fo.placeholder);return hr(e,L,null,t,n)}function mo(e){var t=Gn(arguments,1),n=w(t,mo.placeholder);return hr(e,O,null,t,n)}function go(e){var t=En(arguments,!1,!1,1);return hr(e,R,null,null,null,t)}function vo(e){if("function"!=typeof e)throw new Js(F);return function(t){return e.apply(this,t)}}function yo(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new Js(F);return n===!1?r=!1:No(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),$t.leading=r,$t.maxWait=+t,$t.trailing=i,oo(e,t,$t)}function wo(e,t){return t=null==t?Ts:t,hr(t,L,null,[e],[])
}function bo(e,t,n,r){return t&&"boolean"!=typeof t&&jr(e,t,n)?t=!1:"function"==typeof t&&(r=n,n=t,t=!1),n="function"==typeof n&&er(n,r,1),yn(e,t,n)}function _o(e,t,n){return t="function"==typeof t&&er(t,n,1),yn(e,!0,t)}function So(e){var t=v(e)?e.length:C;return Er(t)&&ia.call(e)==z||!1}function xo(e){return e===!0||e===!1||v(e)&&ia.call(e)==G||!1}function ko(e){return v(e)&&ia.call(e)==X||!1}function Co(e){return e&&1===e.nodeType&&v(e)&&ia.call(e).indexOf("Element")>-1||!1}function jo(e){if(null==e)return!0;var t=e.length;return Er(t)&&(Qa(e)||Mo(e)||So(e)||v(e)&&eu(e.splice))?!t:!ru(e).length}function Eo(e,t,n,r){if(n="function"==typeof n&&er(n,r,3),!n&&Ar(e)&&Ar(t))return e===t;var i=n?n(e,t):C;return"undefined"==typeof i?Dn(e,t,n):!!i}function Ao(e){return v(e)&&"string"==typeof e.message&&ia.call(e)==K||!1}function No(e){var t=typeof e;return"function"==t||e&&"object"==t||!1}function To(e,t,n,r){var i=ru(t),o=i.length;if(n="function"==typeof n&&er(n,r,3),!n&&1==o){var s=i[0],a=t[s];if(Ar(a))return null!=e&&a===e[s]&&na.call(e,s)}for(var u=$s(o),l=$s(o);o--;)a=u[o]=t[i[o]],l[o]=Ar(a);return In(e,i,u,l,n)}function Po(e){return Ro(e)&&e!=+e}function Lo(e){return null==e?!1:ia.call(e)==J?sa.test(ea.call(e)):v(e)&&At.test(e)||!1}function Oo(e){return null===e}function Ro(e){return"number"==typeof e||v(e)&&ia.call(e)==Q||!1}function Do(e){return v(e)&&ia.call(e)==et||!1}function Mo(e){return"string"==typeof e||v(e)&&ia.call(e)==nt||!1}function Io(e){return v(e)&&Er(e.length)&&Ut[ia.call(e)]||!1}function Ho(e){return"undefined"==typeof e}function Uo(e){var t=e?e.length:0;return Er(t)?t?Zt(e):[]:os(e)}function Bo(e){return mn(e,Qo(e))}function $o(e,t,n){var r=Ba(e);return n&&jr(e,t,n)&&(t=null),t?mn(t,r,ru(t)):r}function qo(e){if(null==e)return e;var t=Zt(arguments);return t.push(pn),nu.apply(C,t)}function Fo(e,t,n){return t=yr(t,n,3),jn(e,t,Pn,!0)}function Wo(e,t,n){return t=yr(t,n,3),jn(e,t,Ln,!0)}function zo(e,t,n){return("function"!=typeof t||"undefined"!=typeof n)&&(t=er(t,n,3)),An(e,t,Qo)}function Vo(e,t,n){return t=er(t,n,3),Nn(e,t,Qo)}function Go(e,t,n){return("function"!=typeof t||"undefined"!=typeof n)&&(t=er(t,n,3)),Pn(e,t)}function Xo(e,t,n){return t=er(t,n,3),Nn(e,t,ru)}function Ko(e){return On(e,Qo(e))}function Jo(e,t){return e?na.call(e,t):!1}function Yo(e,t,n){n&&jr(e,t,n)&&(t=null);for(var r=-1,i=ru(e),o=i.length,s={};++r<o;){var a=i[r],u=e[a];t?na.call(s,u)?s[u].push(a):s[u]=[a]:s[u]=a}return s}function Qo(e){if(null==e)return[];No(e)||(e=Gs(e));var t=e.length;t=t&&Er(t)&&(Qa(e)||Ua.nonEnumArgs&&So(e))&&t||0;for(var n=e.constructor,r=-1,i="function"==typeof n&&n.prototype===e,o=$s(t),s=t>0;++r<t;)o[r]=r+"";for(var a in e)s&&Cr(a,t)||"constructor"==a&&(i||!na.call(e,a))||o.push(a);return o}function Zo(e,t,n){var r={};return t=yr(t,n,3),Pn(e,function(e,n,i){r[n]=t(e,n,i)}),r}function es(e,t,n){if(null==e)return{};if("function"!=typeof t){var r=on(En(arguments,!1,!1,1),Ks);return Tr(e,bn(Qo(e),r))}return t=er(t,n,3),Pr(e,function(e,n,r){return!t(e,n,r)})}function ts(e){for(var t=-1,n=ru(e),r=n.length,i=$s(r);++t<r;){var o=n[t];i[t]=[o,e[o]]}return i}function ns(e,t,n){return null==e?{}:"function"==typeof t?Pr(e,er(t,n,3)):Tr(e,En(arguments,!1,!1,1))}function rs(e,t,n){var r=null==e?C:e[t];return"undefined"==typeof r&&(r=n),eu(r)?r.call(e):r}function is(e,t,n,r){var i=Qa(e)||Io(e);if(t=yr(t,r,4),null==n)if(i||No(e)){var o=e.constructor;n=i?Qa(e)?new o:[]:Ba(eu(o)&&o.prototype)}else n={};return(i?en:Pn)(e,function(e,r,i){return t(n,e,r,i)}),n}function os(e){return Jn(e,ru(e))}function ss(e){return Jn(e,Qo(e))}function as(e,t,n){return t=+t||0,"undefined"==typeof n?(n=t,t=0):n=+n||0,e>=t&&n>e}function us(e,t,n){n&&jr(e,t,n)&&(t=n=null);var r=null==e,i=null==t;if(null==n&&(i&&"boolean"==typeof e?(n=e,e=1):"boolean"==typeof t&&(n=t,i=!0)),r&&i&&(t=1,i=!1),e=+e||0,i?(t=e,e=0):t=+t||0,n||e%1||t%1){var o=Ta();return ja(e+o*(t-e+parseFloat("1e-"+((o+"").length-1))),t)}return zn(e,t)}function ls(e){return e=a(e),e&&e.charAt(0).toUpperCase()+e.slice(1)}function cs(e){return e=a(e),e&&e.replace(Nt,h)}function ps(e,t,n){e=a(e),t+="";var r=e.length;return n=("undefined"==typeof n?r:ja(0>n?0:+n||0,r))-t.length,n>=0&&e.indexOf(t,n)==n}function ds(e){return e=a(e),e&&bt.test(e)?e.replace(yt,f):e}function hs(e){return e=a(e),e&&Lt.test(e)?e.replace(Pt,"\\$&"):e}function fs(e,t,n){e=a(e),t=+t;var r=e.length;if(r>=t||!xa(t))return e;var i=(t-r)/2,o=pa(i),s=la(i);return n=pr("",s,n),n.slice(0,o)+e+n}function ms(e,t,n){return e=a(e),e&&pr(e,t,n)+e}function gs(e,t,n){return e=a(e),e&&e+pr(e,t,n)}function vs(e,t,n){return n&&jr(e,t,n)&&(t=0),Na(e,t)}function ys(e,t){var n="";if(e=a(e),t=+t,1>t||!e||!xa(t))return n;do t%2&&(n+=e),t=pa(t/2),e+=e;while(t);return n}function ws(e,t,n){return e=a(e),n=null==n?0:ja(0>n?0:+n||0,e.length),e.lastIndexOf(t,n)==n}function bs(e,n,r){var i=t.templateSettings;r&&jr(e,n,r)&&(n=r=null),e=a(e),n=hn(hn({},r||n),i,dn);var o,s,u=hn(hn({},n.imports),i.imports,dn),l=ru(u),c=Jn(u,l),p=0,d=n.interpolate||Tt,h="__p += '",f=Xs((n.escape||Tt).source+"|"+d.source+"|"+(d===xt?kt:Tt).source+"|"+(n.evaluate||Tt).source+"|$","g"),g="//# sourceURL="+("sourceURL"in n?n.sourceURL:"lodash.templateSources["+ ++Ht+"]")+"\n";e.replace(f,function(t,n,r,i,a,u){return r||(r=i),h+=e.slice(p,u).replace(Rt,m),n&&(o=!0,h+="' +\n__e("+n+") +\n'"),a&&(s=!0,h+="';\n"+a+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),p=u+t.length,t}),h+="';\n";var v=n.variable;v||(h="with (obj) {\n"+h+"\n}\n"),h=(s?h.replace(ft,""):h).replace(mt,"$1").replace(gt,"$1;"),h="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(s?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var y=Es(function(){return Ws(l,g+"return "+h).apply(C,c)});if(y.source=h,Ao(y))throw y;return y}function _s(e,t,n){var r=e;return(e=a(e))?(n?jr(r,t,n):null==t)?e.slice(_(e),S(e)+1):(t+="",e.slice(l(e,t),c(e,t)+1)):e}function Ss(e,t,n){var r=e;return e=a(e),e?e.slice((n?jr(r,t,n):null==t)?_(e):l(e,t+"")):e}function xs(e,t,n){var r=e;return e=a(e),e?(n?jr(r,t,n):null==t)?e.slice(0,S(e)+1):e.slice(0,c(e,t+"")+1):e}function ks(e,t,n){n&&jr(e,t,n)&&(t=null);var r=M,i=I;if(null!=t)if(No(t)){var o="separator"in t?t.separator:o;r="length"in t?+t.length||0:r,i="omission"in t?a(t.omission):i}else r=+t||0;if(e=a(e),r>=e.length)return e;var s=r-i.length;if(1>s)return i;var u=e.slice(0,s);if(null==o)return u+i;if(Do(o)){if(e.slice(s).search(o)){var l,c,p=e.slice(0,s);for(o.global||(o=Xs(o.source,(Ct.exec(o)||"")+"g")),o.lastIndex=0;l=o.exec(p);)c=l.index;u=u.slice(0,null==c?s:c)}}else if(e.indexOf(o,s)!=s){var d=u.lastIndexOf(o);d>-1&&(u=u.slice(0,d))}return u+i}function Cs(e){return e=a(e),e&&wt.test(e)?e.replace(vt,x):e}function js(e,t,n){return n&&jr(e,t,n)&&(t=null),e=a(e),e.match(t||Dt)||[]}function Es(){var e=arguments.length,t=arguments[0];try{for(var n=$s(e?e-1:0);--e>0;)n[e-1]=arguments[e];return t.apply(C,n)}catch(r){return Ao(r)?r:new Fs(r)}}function As(e,t,n){return n&&jr(e,t,n)&&(t=null),v(e)?Ps(e):vn(e,t)}function Ns(e){return function(){return e}}function Ts(e){return e}function Ps(e){return Un(yn(e,!0))}function Ls(e,t){return Bn(e+"",yn(t,!0))}function Os(e,t,n){if(null==n){var r=No(t),i=r&&ru(t),o=i&&i.length&&On(t,i);(o?o.length:r)||(o=!1,n=t,t=e,e=this)}o||(o=On(t,ru(t)));var s=!0,a=-1,u=eu(e),l=o.length;n===!1?s=!1:No(n)&&"chain"in n&&(s=n.chain);for(;++a<l;){var c=o[a],p=t[c];e[c]=p,u&&(e.prototype[c]=function(t){return function(){var n=this.__chain__;if(s||n){var r=e(this.__wrapped__);return(r.__actions__=Zt(this.__actions__)).push({func:t,args:arguments,thisArg:e}),r.__chain__=n,r}var i=[this.value()];return ha.apply(i,arguments),t.apply(e,i)}}(p))}return e}function Rs(){return e._=oa,this}function Ds(){}function Ms(e){return Fn(e+"")}function Is(e){return function(t){return null==e?C:e[t]}}function Hs(e,t,n){n&&jr(e,t,n)&&(t=n=null),e=+e||0,n=null==n?1:+n||0,null==t?(t=e,e=0):t=+t||0;for(var r=-1,i=Ca(la((t-e)/(n||1)),0),o=$s(i);++r<i;)o[r]=e,e+=n;return o}function Us(e,t,n){if(e=+e,1>e||!xa(e))return[];var r=-1,i=$s(ja(e,Oa));for(t=er(t,n,1);++r<e;)Oa>r?i[r]=t(r):t(r);return i}function Bs(e){var t=++ra;return a(e)+t}e=e?Qt.defaults(Gt.Object(),e,Qt.pick(Gt,It)):Gt;var $s=e.Array,qs=e.Date,Fs=e.Error,Ws=e.Function,zs=e.Math,Vs=e.Number,Gs=e.Object,Xs=e.RegExp,Ks=e.String,Js=e.TypeError,Ys=$s.prototype,Qs=Gs.prototype,Zs=(Zs=e.window)&&Zs.document,ea=Ws.prototype.toString,ta=Fn("length"),na=Qs.hasOwnProperty,ra=0,ia=Qs.toString,oa=e._,sa=Xs("^"+hs(ia).replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),aa=Lo(aa=e.ArrayBuffer)&&aa,ua=Lo(ua=aa&&new aa(0).slice)&&ua,la=zs.ceil,ca=e.clearTimeout,pa=zs.floor,da=Lo(da=Gs.getPrototypeOf)&&da,ha=Ys.push,fa=Qs.propertyIsEnumerable,ma=Lo(ma=e.Set)&&ma,ga=e.setTimeout,va=Ys.splice,ya=Lo(ya=e.Uint8Array)&&ya,wa=Lo(wa=e.WeakMap)&&wa,ba=function(){try{var t=Lo(t=e.Float64Array)&&t,n=new t(new aa(10),0,1)&&t}catch(r){}return n}(),_a=Lo(_a=$s.isArray)&&_a,Sa=Lo(Sa=Gs.create)&&Sa,xa=e.isFinite,ka=Lo(ka=Gs.keys)&&ka,Ca=zs.max,ja=zs.min,Ea=Lo(Ea=qs.now)&&Ea,Aa=Lo(Aa=Vs.isFinite)&&Aa,Na=e.parseInt,Ta=zs.random,Pa=Vs.NEGATIVE_INFINITY,La=Vs.POSITIVE_INFINITY,Oa=zs.pow(2,32)-1,Ra=Oa-1,Da=Oa>>>1,Ma=ba?ba.BYTES_PER_ELEMENT:0,Ia=zs.pow(2,53)-1,Ha=wa&&new wa,Ua=t.support={};!function(){Ua.funcDecomp=!Lo(e.WinRTError)&&Ot.test(k),Ua.funcNames="string"==typeof Ws.name;try{Ua.dom=11===Zs.createDocumentFragment().nodeType}catch(t){Ua.dom=!1}try{Ua.nonEnumArgs=!fa.call(arguments,1)}catch(t){Ua.nonEnumArgs=!0}}(0,0),t.templateSettings={escape:_t,evaluate:St,interpolate:xt,variable:"",imports:{_:t}};var Ba=function(){function t(){}return function(n){if(No(n)){t.prototype=n;var r=new t;t.prototype=null}return r||e.Object()}}(),$a=Ha?function(e,t){return Ha.set(e,t),e}:Ts;ua||(tr=aa&&ya?function(e){var t=e.byteLength,n=ba?pa(t/Ma):0,r=n*Ma,i=new aa(t);if(n){var o=new ba(i,0,n);o.set(new ba(e,0,n))}return t!=r&&(o=new ya(i,r),o.set(new ya(e,r))),i}:Ns(null));var qa=Sa&&ma?function(e){return new Kt(e)}:Ns(null),Fa=Ha?function(e){return Ha.get(e)}:Ds,Wa=function(){var e=0,t=0;return function(n,r){var i=Ya(),o=U-(i-t);if(t=i,o>0){if(++e>=H)return n}else e=0;return $a(n,r)}}(),za=ir(function(e,t,n){na.call(e,n)?++e[n]:e[n]=1}),Va=ir(function(e,t,n){na.call(e,n)?e[n].push(t):e[n]=[t]}),Ga=ir(function(e,t,n){e[n]=t}),Xa=lr(sn),Ka=lr(an,!0),Ja=ir(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]}),Ya=Ea||function(){return(new qs).getTime()},Qa=_a||function(e){return v(e)&&Er(e.length)&&ia.call(e)==V||!1};Ua.dom||(Co=function(e){return e&&1===e.nodeType&&v(e)&&!tu(e)||!1});var Za=Aa||function(e){return"number"==typeof e&&xa(e)},eu=o(/x/)||ya&&!o(ya)?function(e){return ia.call(e)==J}:o,tu=da?function(e){if(!e||ia.call(e)!=Z)return!1;var t=e.valueOf,n=Lo(t)&&(n=da(t))&&da(n);return n?e==n||da(e)==n:Or(e)}:Or,nu=or(hn),ru=ka?function(e){if(e)var t=e.constructor,n=e.length;return"function"==typeof t&&t.prototype===e||"function"!=typeof e&&n&&Er(n)?Rr(e):No(e)?ka(e):[]}:Rr,iu=or($n),ou=ar(function(e,t,n){return t=t.toLowerCase(),e+(n?t.charAt(0).toUpperCase()+t.slice(1):t)}),su=ar(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()});8!=Na(Mt+"08")&&(vs=function(e,t,n){return(n?jr(e,t,n):null==t)?t=0:t&&(t=+t),e=_s(e),Na(e,t||(Et.test(e)?16:10))});var au=ar(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}),uu=ar(function(e,t,n){return e+(n?" ":"")+(t.charAt(0).toUpperCase()+t.slice(1))});return t.prototype=n.prototype,y.prototype=Ba(n.prototype),y.prototype.constructor=y,Y.prototype=Ba(n.prototype),Y.prototype.constructor=Y,Ft.prototype["delete"]=Wt,Ft.prototype.get=zt,Ft.prototype.has=Vt,Ft.prototype.set=Xt,Kt.prototype.push=Yt,co.Cache=Ft,t.after=Yi,t.ary=Qi,t.assign=nu,t.at=Ni,t.before=Zi,t.bind=eo,t.bindAll=to,t.bindKey=no,t.callback=As,t.chain=bi,t.chunk=Hr,t.compact=Ur,t.constant=Ns,t.countBy=za,t.create=$o,t.curry=ro,t.curryRight=io,t.debounce=oo,t.defaults=qo,t.defer=so,t.delay=ao,t.difference=Br,t.drop=$r,t.dropRight=qr,t.dropRightWhile=Fr,t.dropWhile=Wr,t.fill=zr,t.filter=Pi,t.flatten=Kr,t.flattenDeep=Jr,t.flow=uo,t.flowRight=lo,t.forEach=Di,t.forEachRight=Mi,t.forIn=zo,t.forInRight=Vo,t.forOwn=Go,t.forOwnRight=Xo,t.functions=Ko,t.groupBy=Va,t.indexBy=Ga,t.initial=Qr,t.intersection=Zr,t.invert=Yo,t.invoke=Hi,t.keys=ru,t.keysIn=Qo,t.map=Ui,t.mapValues=Zo,t.matches=Ps,t.matchesProperty=Ls,t.memoize=co,t.merge=iu,t.mixin=Os,t.negate=po,t.omit=es,t.once=ho,t.pairs=ts,t.partial=fo,t.partialRight=mo,t.partition=Ja,t.pick=ns,t.pluck=Bi,t.property=Ms,t.propertyOf=Is,t.pull=ni,t.pullAt=ri,t.range=Hs,t.rearg=go,t.reject=Fi,t.remove=ii,t.rest=oi,t.shuffle=zi,t.slice=si,t.sortBy=Xi,t.sortByAll=Ki,t.spread=vo,t.take=li,t.takeRight=ci,t.takeRightWhile=pi,t.takeWhile=di,t.tap=_i,t.throttle=yo,t.thru=Si,t.times=Us,t.toArray=Uo,t.toPlainObject=Bo,t.transform=is,t.union=hi,t.uniq=fi,t.unzip=mi,t.values=os,t.valuesIn=ss,t.where=Ji,t.without=gi,t.wrap=wo,t.xor=vi,t.zip=yi,t.zipObject=wi,t.backflow=lo,t.collect=Ui,t.compose=lo,t.each=Di,t.eachRight=Mi,t.extend=nu,t.iteratee=As,t.methods=Ko,t.object=wi,t.select=Pi,t.tail=oi,t.unique=fi,Os(t,t),t.attempt=Es,t.camelCase=ou,t.capitalize=ls,t.clone=bo,t.cloneDeep=_o,t.deburr=cs,t.endsWith=ps,t.escape=ds,t.escapeRegExp=hs,t.every=Ti,t.find=Li,t.findIndex=Vr,t.findKey=Fo,t.findLast=Oi,t.findLastIndex=Gr,t.findLastKey=Wo,t.findWhere=Ri,t.first=Xr,t.has=Jo,t.identity=Ts,t.includes=Ii,t.indexOf=Yr,t.inRange=as,t.isArguments=So,t.isArray=Qa,t.isBoolean=xo,t.isDate=ko,t.isElement=Co,t.isEmpty=jo,t.isEqual=Eo,t.isError=Ao,t.isFinite=Za,t.isFunction=eu,t.isMatch=To,t.isNaN=Po,t.isNative=Lo,t.isNull=Oo,t.isNumber=Ro,t.isObject=No,t.isPlainObject=tu,t.isRegExp=Do,t.isString=Mo,t.isTypedArray=Io,t.isUndefined=Ho,t.kebabCase=su,t.last=ei,t.lastIndexOf=ti,t.max=Xa,t.min=Ka,t.noConflict=Rs,t.noop=Ds,t.now=Ya,t.pad=fs,t.padLeft=ms,t.padRight=gs,t.parseInt=vs,t.random=us,t.reduce=$i,t.reduceRight=qi,t.repeat=ys,t.result=rs,t.runInContext=k,t.size=Vi,t.snakeCase=au,t.some=Gi,t.sortedIndex=ai,t.sortedLastIndex=ui,t.startCase=uu,t.startsWith=ws,t.template=bs,t.trim=_s,t.trimLeft=Ss,t.trimRight=xs,t.trunc=ks,t.unescape=Cs,t.uniqueId=Bs,t.words=js,t.all=Ti,t.any=Gi,t.contains=Ii,t.detect=Li,t.foldl=$i,t.foldr=qi,t.head=Xr,t.include=Ii,t.inject=$i,Os(t,function(){var e={};return Pn(t,function(n,r){t.prototype[r]||(e[r]=n)}),e}(),!1),t.sample=Wi,t.prototype.sample=function(e){return this.__chain__||null!=e?this.thru(function(t){return Wi(t,e)}):Wi(this.value())},t.VERSION=j,en(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){t[e].placeholder=t}),en(["filter","map","takeWhile"],function(e,t){var n=t==B||t==q;Y.prototype[e]=function(e,r){var i=this.clone(),o=i.__iteratees__||(i.__iteratees__=[]);return i.__filtered__=i.__filtered__||n,o.push({iteratee:yr(e,r,3),type:t}),i}}),en(["drop","take"],function(e,t){var n="__"+e+"Count__",r=e+"While";Y.prototype[e]=function(r){r=null==r?1:Ca(pa(r)||0,0);var i=this.clone();if(i.__filtered__){var o=i[n];i[n]=t?ja(o,r):o+r}else{var s=i.__views__||(i.__views__=[]);s.push({size:r,type:e+(i.__dir__<0?"Right":"")})}return i},Y.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()},Y.prototype[e+"RightWhile"]=function(e,t){return this.reverse()[r](e,t).reverse()}}),en(["first","last"],function(e,t){var n="take"+(t?"Right":"");Y.prototype[e]=function(){return this[n](1).value()[0]}}),en(["initial","rest"],function(e,t){var n="drop"+(t?"":"Right");Y.prototype[e]=function(){return this[n](1)}}),en(["pluck","where"],function(e,t){var n=t?"filter":"map",r=t?Un:Fn;Y.prototype[e]=function(e){return this[n](r(e))}}),Y.prototype.compact=function(){return this.filter(Ts)},Y.prototype.dropWhile=function(e,t){var n,r,i=this.__dir__<0;return e=yr(e,t,3),this.filter(function(t,o,s){return n=n&&(i?r>o:o>r),r=o,n||(n=!e(t,o,s))})},Y.prototype.reject=function(e,t){return e=yr(e,t,3),this.filter(function(t,n,r){return!e(t,n,r)})},Y.prototype.slice=function(e,t){e=null==e?0:+e||0;var n=0>e?this.takeRight(-e):this.drop(e);return"undefined"!=typeof t&&(t=+t||0,n=0>t?n.dropRight(-t):n.take(t-e)),n},Y.prototype.toArray=function(){return this.drop(0)},Pn(Y.prototype,function(e,n){var r=t[n],i=/^(?:first|last)$/.test(n);t.prototype[n]=function(){var n=this.__wrapped__,o=arguments,s=this.__chain__,a=!!this.__actions__.length,u=n instanceof Y,l=u&&!a;if(i&&!s)return l?e.call(n):r.call(t,this.value());var c=function(e){var n=[e];return ha.apply(n,o),r.apply(t,n)};if(u||Qa(n)){var p=l?n:new Y(this),d=e.apply(p,o);if(!i&&(a||d.__actions__)){var h=d.__actions__||(d.__actions__=[]);h.push({func:Si,args:[c],thisArg:t})}return new y(d,s)}return this.thru(c)}}),en(["concat","join","pop","push","shift","sort","splice","unshift"],function(e){var n=Ys[e],r=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",i=/^(?:join|pop|shift)$/.test(e);t.prototype[e]=function(){var e=arguments;return i&&!this.__chain__?n.apply(this.value(),e):this[r](function(t){return n.apply(t,e)})}}),Y.prototype.clone=tt,Y.prototype.reverse=rt,Y.prototype.value=qt,t.prototype.chain=xi,t.prototype.commit=ki,t.prototype.plant=Ci,t.prototype.reverse=ji,t.prototype.toString=Ei,t.prototype.run=t.prototype.toJSON=t.prototype.valueOf=t.prototype.value=Ai,t.prototype.collect=t.prototype.map,t.prototype.head=t.prototype.first,t.prototype.select=t.prototype.filter,t.prototype.tail=t.prototype.rest,t}var C,j="3.3.1",E=1,A=2,N=4,T=8,P=16,L=32,O=64,R=128,D=256,M=30,I="...",H=150,U=16,B=0,$=1,q=2,F="Expected a function",W="__lodash_placeholder__",z="[object Arguments]",V="[object Array]",G="[object Boolean]",X="[object Date]",K="[object Error]",J="[object Function]",Y="[object Map]",Q="[object Number]",Z="[object Object]",et="[object RegExp]",tt="[object Set]",nt="[object String]",rt="[object WeakMap]",it="[object ArrayBuffer]",ot="[object Float32Array]",st="[object Float64Array]",at="[object Int8Array]",ut="[object Int16Array]",lt="[object Int32Array]",ct="[object Uint8Array]",pt="[object Uint8ClampedArray]",dt="[object Uint16Array]",ht="[object Uint32Array]",ft=/\b__p \+= '';/g,mt=/\b(__p \+=) '' \+/g,gt=/(__e\(.*?\)|\b__t\)) \+\n'';/g,vt=/&(?:amp|lt|gt|quot|#39|#96);/g,yt=/[&<>"'`]/g,wt=RegExp(vt.source),bt=RegExp(yt.source),_t=/<%-([\s\S]+?)%>/g,St=/<%([\s\S]+?)%>/g,xt=/<%=([\s\S]+?)%>/g,kt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Ct=/\w*$/,jt=/^\s*function[ \n\r\t]+\w/,Et=/^0[xX]/,At=/^\[object .+?Constructor\]$/,Nt=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g,Tt=/($^)/,Pt=/[.*+?^${}()|[\]\/\\]/g,Lt=RegExp(Pt.source),Ot=/\bthis\b/,Rt=/['\n\r\u2028\u2029\\]/g,Dt=function(){var e="[A-Z\\xc0-\\xd6\\xd8-\\xde]",t="[a-z\\xdf-\\xf6\\xf8-\\xff]+";return RegExp(e+"{2,}(?="+e+t+")|"+e+"?"+t+"|"+e+"+|[0-9]+","g")}(),Mt=" 	\f ﻿\n\r\u2028\u2029 ᠎             　",It=["Array","ArrayBuffer","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Math","Number","Object","RegExp","Set","String","_","clearTimeout","document","isFinite","parseInt","setTimeout","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","window","WinRTError"],Ht=-1,Ut={};Ut[ot]=Ut[st]=Ut[at]=Ut[ut]=Ut[lt]=Ut[ct]=Ut[pt]=Ut[dt]=Ut[ht]=!0,Ut[z]=Ut[V]=Ut[it]=Ut[G]=Ut[X]=Ut[K]=Ut[J]=Ut[Y]=Ut[Q]=Ut[Z]=Ut[et]=Ut[tt]=Ut[nt]=Ut[rt]=!1;var Bt={};Bt[z]=Bt[V]=Bt[it]=Bt[G]=Bt[X]=Bt[ot]=Bt[st]=Bt[at]=Bt[ut]=Bt[lt]=Bt[Q]=Bt[Z]=Bt[et]=Bt[nt]=Bt[ct]=Bt[pt]=Bt[dt]=Bt[ht]=!0,Bt[K]=Bt[J]=Bt[Y]=Bt[tt]=Bt[rt]=!1;var $t={leading:!1,maxWait:0,trailing:!1},qt={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss"},Ft={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},Wt={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"},zt={"function":!0,object:!0},Vt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Gt=zt[typeof window]&&window!==(this&&this.window)?window:this,Xt=zt[typeof n]&&n&&!n.nodeType&&n,Kt=zt[typeof t]&&t&&!t.nodeType&&t,Jt=Xt&&Kt&&"object"==typeof e&&e;!Jt||Jt.global!==Jt&&Jt.window!==Jt&&Jt.self!==Jt||(Gt=Jt);var Yt=Kt&&Kt.exports===Xt&&Xt,Qt=k();"function"==typeof define&&"object"==typeof define.amd&&define.amd?(Gt._=Qt,define(function(){return Qt})):Xt&&Kt?Yt?(Kt.exports=Qt)._=Qt:Xt._=Qt:Gt._=Qt}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/demo.js":[function(e,t){(function(n){"use strict";var r=e("handlebars");t.exports=function(){n.dataRwdSlider={article:[{title:"my product #1",imgUrl:"img/1539-1.jpg",desc:"Description of product #1"},{title:"my product #2",imgUrl:"img/1539-2.jpg",desc:"Description of product #2"},{title:"my product #3",imgUrl:"img/1539-3.jpg",desc:"Description of product #3"},{title:"my product #4",imgUrl:"img/1539-4.jpg",desc:"Description of product #4"},{title:"my product #5",imgUrl:"img/1539-5.jpg",desc:"Description of product #5"},{title:"my product #6",imgUrl:"img/1539-6.jpg",desc:"Description of product #6"},{title:"my product #7",imgUrl:"img/1539-7.jpg",desc:"Description of product #7"},{title:"my product #8",imgUrl:"img/1539-8.jpg",desc:"Description of product #8"},{title:"my product #9",imgUrl:"img/1539-9.jpg",desc:"Description of product #9"}]};var e=$("#article-list").html(),t=r.compile(e),i=t(dataRwdSlider);$("#article-list").parent().html(i)}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{handlebars:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/lib/index.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/contructTransitionValue.js":[function(e,t){t.exports=function(e,t,n){return e+t+n}},{}],"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/extends.js":[function(e,t){"use strict";var n=function(e,t){for(var r in t){var i=t[r];i&&"[object Object]"===Object.prototype.toString.call(i)?(e[r]=e[r]||{},n(e[r],i)):e[r]=i}return e};t.exports=n},{}],"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/extractFloating.js":[function(e,t){t.exports=function(e,t,n){return"number"==typeof e?(e=e.toFixed(2),t=""+e,n=t.indexOf("."),-1!=n?parseInt(t.substr(n+1),10):0):(console.error(" This parameter is not a number (NaN)"),!1)}},{}],"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/findElementByHasClass.js":[function(e,t){var n=e("jquery");t.exports=function(e,t,r){var i=n(e,t).filter(function(){var e=n(this).prop("class");return-1!=e.indexOf(r)?!0:void 0});return i}},{jquery:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/jquery/dist/jquery.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/rwdSlider.js":[function(e,t){"use strict";var n=e("./modules/extends"),r=e("./modules/extractFloating"),i=e("./modules/contructTransitionValue"),o=e("./modules/findElementByHasClass"),s=e("lodash"),a=function(e){this.options={nbMove:2,nbView:4,wrapper:"",container:"ul",item:"li",breakpoint:{px:0,nb:0}},a.prototype.init=function(t){n(this.options,e),t=this,this._sliderWidth,this._itemWidth,this._totalWidth,this._nbTotalItem,this._steps=[],this._nbSteps=0,this._position=0,this._nbView=this.options.nbView,this._rest=0,this._decalage=0,this._pad=0,this._stepsUpdated=!1,"undefined"==typeof t.options.breakpoint.px?(t.getSizes(),t.generateSteps()):t.responsive(),t.bindEvents(),t.checkViewControls()},a.prototype.getSizes=function(e,t){e=this,t=document.querySelector(e.options.wrapper),e._sliderWidth=document.querySelector(e.options.wrapper).clientWidth,e._nbTotalItem=t.querySelectorAll(e.options.item).length,e._itemWidth=parseInt(e._sliderWidth/e._nbView,10),e._totalWidth=parseInt(e._itemWidth*e._nbTotalItem,10),s.map(t.querySelectorAll(e.options.item),function(t){t.style.width=e._itemWidth+"px"}),t.querySelector(e.options.container).style.width=e._totalWidth+"px"},a.prototype.generateSteps=function(e,t,n,i,o,s,a){e=this,t=e._pad=parseInt(e._itemWidth*e.options.nbMove,10),n=parseInt(e._nbTotalItem-e._nbView,10),i=parseFloat(n/e.options.nbMove),o=parseFloat(i+e._nbView/e.options.nbMove)-parseFloat(e._nbView/e.options.nbMove),s=parseInt(o,10),a=r(o),e._steps=[],e._steps.unshift(0);for(var u=1;s>=u;u++)e._steps.push(parseInt(u*t,10));if(a){e._rest=e._nbTotalItem-s*e._nbView;var l=e._decalage=parseFloat(a/100),c=e._steps[e._steps.length-1]+l*t;e._steps.push(c)}e._nbSteps=e._steps.length,e._stepsUpdated=!1},a.prototype.bindEvents=function(e,t,n,r,i){e=this,t=e.options.wrapper,n=o("a",t,"next"),r=o("a",t,"prev"),i=function(){e.responsive()},n.click(function(){0===e._position&&e._stepsUpdated&&e.generateSteps(),e.move(!0)}),r.click(function(){e._position!==e._steps.length-1||e._stepsUpdated||e.updateStepsBackWay(),e.move(!1)}),window.addEventListener("resize",s.throttle(i,200))},a.prototype.updateStepsBackWay=function(e,t,n,r){e=this,t=e._steps.splice(1,e._steps.length-2),n=1,r=t.length;for(var i in t){var o=t[i],s=(1-e._decalage)*e._pad,a=parseInt(o-s,10);e._steps.splice(n,0,a),n++}e._stepsUpdated=!0},a.prototype.move=function(e,t){if(t=this,e){if(!(t._position<t._nbSteps-1))return;t._position=t._position+1}else{if(!(t._position>0))return;t._position=t._position-1}t.setPosition(t._position),t.checkViewControls()},a.prototype.setPosition=function(e,t,n,r,o){t=this,n=i("-",t._steps[e],"px"),r=document.querySelector(t.options.wrapper),o=r.querySelector(t.options.container),o.style.transform="translateX("+n+")"},a.prototype.responsive=function(e,t){e=this,t=document.addEventListener?window.matchMedia("(max-width:"+e.options.breakpoint.px+"px)").matches:document.documentElement.clientWidth>e.options.breakpoint.px?!1:!0,e._nbView=t?e.options.breakpoint.nb:e.options.nbView,e._position=0,e.setPosition(e._position),e.getSizes(),e.generateSteps()},a.prototype.checkViewControls=function(e,t,n,r){e=this,t=e.options.wrapper,n=o("a",t,"next")[0],r=o("a",t,"prev")[0],0===e._position?r.classList.add("desactive"):e._position===e._steps.length-1?n.classList.add("desactive"):(n.classList.remove("desactive"),r.classList.remove("desactive"))},this.init()};t.exports=a},{"./modules/contructTransitionValue":"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/contructTransitionValue.js","./modules/extends":"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/extends.js","./modules/extractFloating":"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/extractFloating.js","./modules/findElementByHasClass":"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/findElementByHasClass.js",lodash:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/lodash/index.js"}]},{},["./src/javascripts/bundle.js"]);
//# sourceMappingURL=data:application/json;base64,