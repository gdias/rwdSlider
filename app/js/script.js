!function e(t,n,r){function i(o,a){if(!n[o]){if(!t[o]){var l="function"==typeof require&&require;if(!a&&l)return l(o,!0);if(s)return s(o,!0);var u=new Error("Cannot find module '"+o+"'");throw u.code="MODULE_NOT_FOUND",u}var c=n[o]={exports:{}};t[o][0].call(c.exports,function(e){var n=t[o][1][e];return i(n?n:e)},c,c.exports,e,t,n,r)}return n[o].exports}for(var s="function"==typeof require&&require,o=0;o<r.length;o++)i(r[o]);return i}({"./src/javascripts/bundle.js":[function(e){(function(t){t.$=e("jquery"),t.rwdSlider=e("./rwdSlider.js"),t.demo=e("./demo")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./demo":"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/demo.js","./rwdSlider.js":"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/rwdSlider.js",jquery:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/jquery/dist/jquery.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/browserify/lib/_empty.js":[function(){},{}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/browserify/node_modules/path-browserify/index.js":[function(e,t,n){(function(e){function t(e,t){for(var n=0,r=e.length-1;r>=0;r--){var i=e[r];"."===i?e.splice(r,1):".."===i?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;n)e.unshift("..");return e}function r(e,t){if(e.filter)return e.filter(t);for(var n=[],r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}var i=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,s=function(e){return i.exec(e).slice(1)};n.resolve=function(){for(var n="",i=!1,s=arguments.length-1;s>=-1&&!i;s--){var o=s>=0?arguments[s]:e.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(n=o+"/"+n,i="/"===o.charAt(0))}return n=t(r(n.split("/"),function(e){return!!e}),!i).join("/"),(i?"/":"")+n||"."},n.normalize=function(e){var i=n.isAbsolute(e),s="/"===o(e,-1);return e=t(r(e.split("/"),function(e){return!!e}),!i).join("/"),e||i||(e="."),e&&s&&(e+="/"),(i?"/":"")+e},n.isAbsolute=function(e){return"/"===e.charAt(0)},n.join=function(){var e=Array.prototype.slice.call(arguments,0);return n.normalize(r(e,function(e){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},n.relative=function(e,t){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;n>=0&&""===e[n];n--);return t>n?[]:e.slice(t,n-t+1)}e=n.resolve(e).substr(1),t=n.resolve(t).substr(1);for(var i=r(e.split("/")),s=r(t.split("/")),o=Math.min(i.length,s.length),a=o,l=0;o>l;l++)if(i[l]!==s[l]){a=l;break}for(var u=[],l=a;l<i.length;l++)u.push("..");return u=u.concat(s.slice(a)),u.join("/")},n.sep="/",n.delimiter=":",n.dirname=function(e){var t=s(e),n=t[0],r=t[1];return n||r?(r&&(r=r.substr(0,r.length-1)),n+r):"."},n.basename=function(e,t){var n=s(e)[2];return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},n.extname=function(e){return s(e)[3]};var o="b"==="ab".substr(-1)?function(e,t,n){return e.substr(t,n)}:function(e,t,n){return 0>t&&(t=e.length+t),e.substr(t,n)}}).call(this,e("_process"))},{_process:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/browserify/node_modules/process/browser.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/browserify/node_modules/process/browser.js":[function(e,t){function n(){if(!o){o=!0;for(var e,t=s.length;t;){e=s,s=[];for(var n=-1;++n<t;)e[n]();t=s.length}o=!1}}function r(){}var i=t.exports={},s=[],o=!1;i.nextTick=function(e){s.push(e),o||setTimeout(n,0)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.on=r,i.addListener=r,i.once=r,i.off=r,i.removeListener=r,i.removeAllListeners=r,i.emit=r,i.binding=function(){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},{}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars.js":[function(e,t,n){(function(t){"use strict";var r=e("./handlebars.runtime")["default"],i=e("./handlebars/compiler/ast")["default"],s=e("./handlebars/compiler/base").parser,o=e("./handlebars/compiler/base").parse,a=e("./handlebars/compiler/compiler").Compiler,l=e("./handlebars/compiler/compiler").compile,u=e("./handlebars/compiler/compiler").precompile,c=e("./handlebars/compiler/javascript-compiler")["default"],d=r.create,p=function(){var e=d();return e.compile=function(t,n){return l(t,n,e)},e.precompile=function(t,n){return u(t,n,e)},e.AST=i,e.Compiler=a,e.JavaScriptCompiler=c,e.Parser=s,e.parse=o,e};r=p(),r.create=p;var h="undefined"!=typeof t?t:window,f=h.Handlebars;r.noConflict=function(){h.Handlebars===r&&(h.Handlebars=f)},r["default"]=r,n["default"]=r}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./handlebars.runtime":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars.runtime.js","./handlebars/compiler/ast":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js","./handlebars/compiler/base":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/base.js","./handlebars/compiler/compiler":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js","./handlebars/compiler/javascript-compiler":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars.runtime.js":[function(e,t,n){(function(t){"use strict";var r=e("./handlebars/base"),i=e("./handlebars/safe-string")["default"],s=e("./handlebars/exception")["default"],o=e("./handlebars/utils"),a=e("./handlebars/runtime"),l=function(){var e=new r.HandlebarsEnvironment;return o.extend(e,r),e.SafeString=i,e.Exception=s,e.Utils=o,e.escapeExpression=o.escapeExpression,e.VM=a,e.template=function(t){return a.template(t,e)},e},u=l();u.create=l;var c="undefined"!=typeof t?t:window,d=c.Handlebars;u.noConflict=function(){c.Handlebars===u&&(c.Handlebars=d)},u["default"]=u,n["default"]=u}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./handlebars/base":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/base.js","./handlebars/exception":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js","./handlebars/runtime":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/runtime.js","./handlebars/safe-string":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/safe-string.js","./handlebars/utils":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/base.js":[function(e,t,n){"use strict";function r(e,t){this.helpers=e||{},this.partials=t||{},i(this)}function i(e){e.registerHelper("helperMissing",function(){if(1===arguments.length)return void 0;throw new o("Missing helper: '"+arguments[arguments.length-1].name+"'")}),e.registerHelper("blockHelperMissing",function(t,n){var r=n.inverse,i=n.fn;if(t===!0)return i(this);if(t===!1||null==t)return r(this);if(c(t))return t.length>0?(n.ids&&(n.ids=[n.name]),e.helpers.each(t,n)):r(this);if(n.data&&n.ids){var o=g(n.data);o.contextPath=s.appendContextPath(n.data.contextPath,n.name),n={data:o}}return i(t,n)}),e.registerHelper("each",function(e,t){function n(t,n,o){r&&(r.key=t,r.index=n,r.first=0===n,r.last=!!o,i&&(r.contextPath=i+t)),p+=a(e[t],{data:r,blockParams:s.blockParams([e[t],t],[i+t,null])})}if(!t)throw new o("Must pass iterator to #each");var r,i,a=t.fn,l=t.inverse,u=0,p="";if(t.data&&t.ids&&(i=s.appendContextPath(t.data.contextPath,t.ids[0])+"."),d(e)&&(e=e.call(this)),t.data&&(r=g(t.data)),e&&"object"==typeof e)if(c(e))for(var h=e.length;h>u;u++)n(u,u,u===e.length-1);else{var f;for(var m in e)e.hasOwnProperty(m)&&(f&&n(f,u-1),f=m,u++);f&&n(f,u-1,!0)}return 0===u&&(p=l(this)),p}),e.registerHelper("if",function(e,t){return d(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||s.isEmpty(e)?t.inverse(this):t.fn(this)}),e.registerHelper("unless",function(t,n){return e.helpers["if"].call(this,t,{fn:n.inverse,inverse:n.fn,hash:n.hash})}),e.registerHelper("with",function(e,t){d(e)&&(e=e.call(this));var n=t.fn;if(s.isEmpty(e))return t.inverse(this);if(t.data&&t.ids){var r=g(t.data);r.contextPath=s.appendContextPath(t.data.contextPath,t.ids[0]),t={data:r}}return n(e,t)}),e.registerHelper("log",function(t,n){var r=n.data&&null!=n.data.level?parseInt(n.data.level,10):1;e.log(r,t)}),e.registerHelper("lookup",function(e,t){return e&&e[t]})}var s=e("./utils"),o=e("./exception")["default"],a="3.0.0";n.VERSION=a;var l=6;n.COMPILER_REVISION=l;var u={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1"};n.REVISION_CHANGES=u;var c=s.isArray,d=s.isFunction,p=s.toString,h="[object Object]";n.HandlebarsEnvironment=r,r.prototype={constructor:r,logger:f,log:m,registerHelper:function(e,t){if(p.call(e)===h){if(t)throw new o("Arg not supported with multiple helpers");s.extend(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if(p.call(e)===h)s.extend(this.partials,e);else{if("undefined"==typeof t)throw new o("Attempting to register a partial as undefined");this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]}};var f={methodMap:{0:"debug",1:"info",2:"warn",3:"error"},DEBUG:0,INFO:1,WARN:2,ERROR:3,level:1,log:function(e,t){if("undefined"!=typeof console&&f.level<=e){var n=f.methodMap[e];(console[n]||console.log).call(console,t)}}};n.logger=f;var m=f.log;n.log=m;var g=function(e){var t=s.extend({},e);return t._parent=e,t};n.createFrame=g},{"./exception":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js","./utils":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js":[function(e,t,n){"use strict";var r={Program:function(e,t,n,r){this.loc=r,this.type="Program",this.body=e,this.blockParams=t,this.strip=n},MustacheStatement:function(e,t,n,r,i,s){this.loc=s,this.type="MustacheStatement",this.path=e,this.params=t||[],this.hash=n,this.escaped=r,this.strip=i},BlockStatement:function(e,t,n,r,i,s,o,a,l){this.loc=l,this.type="BlockStatement",this.path=e,this.params=t||[],this.hash=n,this.program=r,this.inverse=i,this.openStrip=s,this.inverseStrip=o,this.closeStrip=a},PartialStatement:function(e,t,n,r,i){this.loc=i,this.type="PartialStatement",this.name=e,this.params=t||[],this.hash=n,this.indent="",this.strip=r},ContentStatement:function(e,t){this.loc=t,this.type="ContentStatement",this.original=this.value=e},CommentStatement:function(e,t,n){this.loc=n,this.type="CommentStatement",this.value=e,this.strip=t},SubExpression:function(e,t,n,r){this.loc=r,this.type="SubExpression",this.path=e,this.params=t||[],this.hash=n},PathExpression:function(e,t,n,r,i){this.loc=i,this.type="PathExpression",this.data=e,this.original=r,this.parts=n,this.depth=t},StringLiteral:function(e,t){this.loc=t,this.type="StringLiteral",this.original=this.value=e},NumberLiteral:function(e,t){this.loc=t,this.type="NumberLiteral",this.original=this.value=Number(e)},BooleanLiteral:function(e,t){this.loc=t,this.type="BooleanLiteral",this.original=this.value="true"===e},Hash:function(e,t){this.loc=t,this.type="Hash",this.pairs=e},HashPair:function(e,t,n){this.loc=n,this.type="HashPair",this.key=e,this.value=t},helpers:{helperExpression:function(e){return!("SubExpression"!==e.type&&!e.params.length&&!e.hash)},scopedId:function(e){return/^\.|this\b/.test(e.original)},simpleId:function(e){return 1===e.parts.length&&!r.helpers.scopedId(e)&&!e.depth}}};n["default"]=r},{}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/base.js":[function(e,t,n){"use strict";function r(e,t){if("Program"===e.type)return e;i.yy=u,u.locInfo=function(e){return new u.SourceLocation(t&&t.srcName,e)};var n=new o;return n.accept(i.parse(e))}var i=e("./parser")["default"],s=e("./ast")["default"],o=e("./whitespace-control")["default"],a=e("./helpers"),l=e("../utils").extend;n.parser=i;var u={};l(u,a,s),n.parse=r},{"../utils":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js","./ast":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js","./helpers":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js","./parser":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js","./whitespace-control":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js":[function(e,t,n){"use strict";function r(e,t,n){if(s(e)){for(var r=[],i=0,o=e.length;o>i;i++)r.push(t.wrap(e[i],n));return r}return"boolean"==typeof e||"number"==typeof e?e+"":e}function i(e){this.srcFile=e,this.source=[]}var s=e("../utils").isArray;try{var o=e("source-map"),a=o.SourceNode}catch(l){a=function(e,t,n,r){this.src="",r&&this.add(r)},a.prototype={add:function(e){s(e)&&(e=e.join("")),this.src+=e},prepend:function(e){s(e)&&(e=e.join("")),this.src=e+this.src},toStringWithSourceMap:function(){return{code:this.toString()}},toString:function(){return this.src}}}i.prototype={prepend:function(e,t){this.source.unshift(this.wrap(e,t))},push:function(e,t){this.source.push(this.wrap(e,t))},merge:function(){var e=this.empty();return this.each(function(t){e.add(["  ",t,"\n"])}),e},each:function(e){for(var t=0,n=this.source.length;n>t;t++)e(this.source[t])},empty:function(e){return e=e||this.currentLocation||{start:{}},new a(e.start.line,e.start.column,this.srcFile)},wrap:function(e,t){return e instanceof a?e:(t=t||this.currentLocation||{start:{}},e=r(e,this,t),new a(t.start.line,t.start.column,this.srcFile,e))},functionCall:function(e,t,n){return n=this.generateList(n),this.wrap([e,t?"."+t+"(":"(",n,")"])},quotedString:function(e){return'"'+(e+"").replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")+'"'},objectLiteral:function(e){var t=[];for(var n in e)if(e.hasOwnProperty(n)){var i=r(e[n],this);"undefined"!==i&&t.push([this.quotedString(n),":",i])}var s=this.generateList(t);return s.prepend("{"),s.add("}"),s},generateList:function(e,t){for(var n=this.empty(t),i=0,s=e.length;s>i;i++)i&&n.add(","),n.add(r(e[i],this,t));return n},generateArray:function(e,t){var n=this.generateList(e,t);return n.prepend("["),n.add("]"),n}},n["default"]=i},{"../utils":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js","source-map":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js":[function(e,t,n){"use strict";function r(){}function i(e,t,n){if(null==e||"string"!=typeof e&&"Program"!==e.type)throw new l("You must pass a string or Handlebars AST to Handlebars.precompile. You passed "+e);t=t||{},"data"in t||(t.data=!0),t.compat&&(t.useDepths=!0);var r=n.parse(e,t),i=(new n.Compiler).compile(r,t);return(new n.JavaScriptCompiler).compile(i,t)}function s(e,t,n){function r(){var r=n.parse(e,t),i=(new n.Compiler).compile(r,t),s=(new n.JavaScriptCompiler).compile(i,t,void 0,!0);return n.template(s)}if(null==e||"string"!=typeof e&&"Program"!==e.type)throw new l("You must pass a string or Handlebars AST to Handlebars.compile. You passed "+e);t=t||{},"data"in t||(t.data=!0),t.compat&&(t.useDepths=!0);var i,s=function(e,t){return i||(i=r()),i.call(this,e,t)};return s._setup=function(e){return i||(i=r()),i._setup(e)},s._child=function(e,t,n,s){return i||(i=r()),i._child(e,t,n,s)},s}function o(e,t){if(e===t)return!0;if(u(e)&&u(t)&&e.length===t.length){for(var n=0;n<e.length;n++)if(!o(e[n],t[n]))return!1;return!0}}function a(e){if(!e.path.parts){var t=e.path;e.path=new d.PathExpression(!1,0,[t.original+""],t.original+"",t.log)}}var l=e("../exception")["default"],u=e("../utils").isArray,c=e("../utils").indexOf,d=e("./ast")["default"],p=[].slice;n.Compiler=r,r.prototype={compiler:r,equals:function(e){var t=this.opcodes.length;if(e.opcodes.length!==t)return!1;for(var n=0;t>n;n++){var r=this.opcodes[n],i=e.opcodes[n];if(r.opcode!==i.opcode||!o(r.args,i.args))return!1}for(t=this.children.length,n=0;t>n;n++)if(!this.children[n].equals(e.children[n]))return!1;return!0},guid:0,compile:function(e,t){this.sourceNode=[],this.opcodes=[],this.children=[],this.options=t,this.stringParams=t.stringParams,this.trackIds=t.trackIds,t.blockParams=t.blockParams||[];var n=t.knownHelpers;if(t.knownHelpers={helperMissing:!0,blockHelperMissing:!0,each:!0,"if":!0,unless:!0,"with":!0,log:!0,lookup:!0},n)for(var r in n)t.knownHelpers[r]=n[r];return this.accept(e)},compileProgram:function(e){var t=(new this.compiler).compile(e,this.options),n=this.guid++;return this.usePartial=this.usePartial||t.usePartial,this.children[n]=t,this.useDepths=this.useDepths||t.useDepths,n},accept:function(e){this.sourceNode.unshift(e);var t=this[e.type](e);return this.sourceNode.shift(),t},Program:function(e){this.options.blockParams.unshift(e.blockParams);for(var t=e.body,n=0,r=t.length;r>n;n++)this.accept(t[n]);return this.options.blockParams.shift(),this.isSimple=1===r,this.blockParams=e.blockParams?e.blockParams.length:0,this},BlockStatement:function(e){a(e);var t=e.program,n=e.inverse;t=t&&this.compileProgram(t),n=n&&this.compileProgram(n);var r=this.classifySexpr(e);"helper"===r?this.helperSexpr(e,t,n):"simple"===r?(this.simpleSexpr(e),this.opcode("pushProgram",t),this.opcode("pushProgram",n),this.opcode("emptyHash"),this.opcode("blockValue",e.path.original)):(this.ambiguousSexpr(e,t,n),this.opcode("pushProgram",t),this.opcode("pushProgram",n),this.opcode("emptyHash"),this.opcode("ambiguousBlockValue")),this.opcode("append")},PartialStatement:function(e){this.usePartial=!0;var t=e.params;if(t.length>1)throw new l("Unsupported number of partial arguments: "+t.length,e);t.length||t.push({type:"PathExpression",parts:[],depth:0});var n=e.name.original,r="SubExpression"===e.name.type;r&&this.accept(e.name),this.setupFullMustacheParams(e,void 0,void 0,!0);var i=e.indent||"";this.options.preventIndent&&i&&(this.opcode("appendContent",i),i=""),this.opcode("invokePartial",r,n,i),this.opcode("append")},MustacheStatement:function(e){this.SubExpression(e),this.opcode(e.escaped&&!this.options.noEscape?"appendEscaped":"append")},ContentStatement:function(e){e.value&&this.opcode("appendContent",e.value)},CommentStatement:function(){},SubExpression:function(e){a(e);var t=this.classifySexpr(e);"simple"===t?this.simpleSexpr(e):"helper"===t?this.helperSexpr(e):this.ambiguousSexpr(e)},ambiguousSexpr:function(e,t,n){var r=e.path,i=r.parts[0],s=null!=t||null!=n;this.opcode("getContext",r.depth),this.opcode("pushProgram",t),this.opcode("pushProgram",n),this.accept(r),this.opcode("invokeAmbiguous",i,s)},simpleSexpr:function(e){this.accept(e.path),this.opcode("resolvePossibleLambda")},helperSexpr:function(e,t,n){var r=this.setupFullMustacheParams(e,t,n),i=e.path,s=i.parts[0];if(this.options.knownHelpers[s])this.opcode("invokeKnownHelper",r.length,s);else{if(this.options.knownHelpersOnly)throw new l("You specified knownHelpersOnly, but used the unknown helper "+s,e);i.falsy=!0,this.accept(i),this.opcode("invokeHelper",r.length,i.original,d.helpers.simpleId(i))}},PathExpression:function(e){this.addDepth(e.depth),this.opcode("getContext",e.depth);var t=e.parts[0],n=d.helpers.scopedId(e),r=!e.depth&&!n&&this.blockParamIndex(t);r?this.opcode("lookupBlockParam",r,e.parts):t?e.data?(this.options.data=!0,this.opcode("lookupData",e.depth,e.parts)):this.opcode("lookupOnContext",e.parts,e.falsy,n):this.opcode("pushContext")},StringLiteral:function(e){this.opcode("pushString",e.value)},NumberLiteral:function(e){this.opcode("pushLiteral",e.value)},BooleanLiteral:function(e){this.opcode("pushLiteral",e.value)},Hash:function(e){var t,n,r=e.pairs;for(this.opcode("pushHash"),t=0,n=r.length;n>t;t++)this.pushParam(r[t].value);for(;t--;)this.opcode("assignToHash",r[t].key);this.opcode("popHash")},opcode:function(e){this.opcodes.push({opcode:e,args:p.call(arguments,1),loc:this.sourceNode[0].loc})},addDepth:function(e){e&&(this.useDepths=!0)},classifySexpr:function(e){var t=d.helpers.simpleId(e.path),n=t&&!!this.blockParamIndex(e.path.parts[0]),r=!n&&d.helpers.helperExpression(e),i=!n&&(r||t),s=this.options;if(i&&!r){var o=e.path.parts[0];s.knownHelpers[o]?r=!0:s.knownHelpersOnly&&(i=!1)}return r?"helper":i?"ambiguous":"simple"},pushParams:function(e){for(var t=0,n=e.length;n>t;t++)this.pushParam(e[t])},pushParam:function(e){var t=null!=e.value?e.value:e.original||"";if(this.stringParams)t.replace&&(t=t.replace(/^(\.?\.\/)*/g,"").replace(/\//g,".")),e.depth&&this.addDepth(e.depth),this.opcode("getContext",e.depth||0),this.opcode("pushStringParam",t,e.type),"SubExpression"===e.type&&this.accept(e);else{if(this.trackIds){var n;if(!e.parts||d.helpers.scopedId(e)||e.depth||(n=this.blockParamIndex(e.parts[0])),n){var r=e.parts.slice(1).join(".");this.opcode("pushId","BlockParam",n,r)}else t=e.original||t,t.replace&&(t=t.replace(/^\.\//g,"").replace(/^\.$/g,"")),this.opcode("pushId",e.type,t)}this.accept(e)}},setupFullMustacheParams:function(e,t,n,r){var i=e.params;return this.pushParams(i),this.opcode("pushProgram",t),this.opcode("pushProgram",n),e.hash?this.accept(e.hash):this.opcode("emptyHash",r),i},blockParamIndex:function(e){for(var t=0,n=this.options.blockParams.length;n>t;t++){var r=this.options.blockParams[t],i=r&&c(r,e);if(r&&i>=0)return[t,i]}}},n.precompile=i,n.compile=s},{"../exception":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js","../utils":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js","./ast":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js":[function(e,t,n){"use strict";function r(e,t){this.source=e,this.start={line:t.first_line,column:t.first_column},this.end={line:t.last_line,column:t.last_column}}function i(e,t){return{open:"~"===e.charAt(2),close:"~"===t.charAt(t.length-3)}}function s(e){return e.replace(/^\{\{~?\!-?-?/,"").replace(/-?-?~?\}\}$/,"")}function o(e,t,n){n=this.locInfo(n);for(var r=e?"@":"",i=[],s=0,o="",a=0,l=t.length;l>a;a++){var u=t[a].part;if(r+=(t[a].separator||"")+u,".."===u||"."===u||"this"===u){if(i.length>0)throw new c("Invalid path: "+r,{loc:n});".."===u&&(s++,o+="../")}else i.push(u)}return new this.PathExpression(e,s,i,r,n)}function a(e,t,n,r,i,s){var o=r.charAt(3)||r.charAt(2),a="{"!==o&&"&"!==o;return new this.MustacheStatement(e,t,n,a,i,this.locInfo(s))}function l(e,t,n,r){if(e.path.original!==n){var i={loc:e.path.loc};throw new c(e.path.original+" doesn't match "+n,i)}r=this.locInfo(r);var s=new this.Program([t],null,{},r);return new this.BlockStatement(e.path,e.params,e.hash,s,void 0,{},{},{},r)}function u(e,t,n,r,i,s){if(r&&r.path&&e.path.original!==r.path.original){var o={loc:e.path.loc};throw new c(e.path.original+" doesn't match "+r.path.original,o)}t.blockParams=e.blockParams;var a,l;return n&&(n.chain&&(n.program.body[0].closeStrip=r.strip),l=n.strip,a=n.program),i&&(i=a,a=t,t=i),new this.BlockStatement(e.path,e.params,e.hash,t,a,e.strip,l,r&&r.strip,this.locInfo(s))}var c=e("../exception")["default"];n.SourceLocation=r,n.stripFlags=i,n.stripComment=s,n.preparePath=o,n.prepareMustache=a,n.prepareRawBlock=l,n.prepareBlock=u},{"../exception":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js":[function(e,t,n){"use strict";function r(e){this.value=e}function i(){}function s(e,t,n,r){var i=t.popStack(),s=0,o=n.length;for(e&&o--;o>s;s++)i=t.nameLookup(i,n[s],r);return e?[t.aliasable("this.strict"),"(",i,", ",t.quotedString(n[s]),")"]:i}var o=e("../base").COMPILER_REVISION,a=e("../base").REVISION_CHANGES,l=e("../exception")["default"],u=e("../utils").isArray,c=e("./code-gen")["default"];i.prototype={nameLookup:function(e,t){return i.isValidJavaScriptVariableName(t)?[e,".",t]:[e,"['",t,"']"]},depthedLookup:function(e){return[this.aliasable("this.lookup"),'(depths, "',e,'")']},compilerInfo:function(){var e=o,t=a[e];return[e,t]},appendToBuffer:function(e,t,n){return u(e)||(e=[e]),e=this.source.wrap(e,t),this.environment.isSimple?["return ",e,";"]:n?["buffer += ",e,";"]:(e.appendToBuffer=!0,e)},initializeBuffer:function(){return this.quotedString("")},compile:function(e,t,n,r){this.environment=e,this.options=t,this.stringParams=this.options.stringParams,this.trackIds=this.options.trackIds,this.precompile=!r,this.name=this.environment.name,this.isChild=!!n,this.context=n||{programs:[],environments:[]},this.preamble(),this.stackSlot=0,this.stackVars=[],this.aliases={},this.registers={list:[]},this.hashes=[],this.compileStack=[],this.inlineStack=[],this.blockParams=[],this.compileChildren(e,t),this.useDepths=this.useDepths||e.useDepths||this.options.compat,this.useBlockParams=this.useBlockParams||e.useBlockParams;var i,s,o,a,u=e.opcodes;for(o=0,a=u.length;a>o;o++)i=u[o],this.source.currentLocation=i.loc,s=s||i.loc,this[i.opcode].apply(this,i.args);if(this.source.currentLocation=s,this.pushSource(""),this.stackSlot||this.inlineStack.length||this.compileStack.length)throw new l("Compile completed with content left on stack");var c=this.createFunctionContext(r);if(this.isChild)return c;var d={compiler:this.compilerInfo(),main:c},p=this.context.programs;for(o=0,a=p.length;a>o;o++)p[o]&&(d[o]=p[o]);return this.environment.usePartial&&(d.usePartial=!0),this.options.data&&(d.useData=!0),this.useDepths&&(d.useDepths=!0),this.useBlockParams&&(d.useBlockParams=!0),this.options.compat&&(d.compat=!0),r?d.compilerOptions=this.options:(d.compiler=JSON.stringify(d.compiler),this.source.currentLocation={start:{line:1,column:0}},d=this.objectLiteral(d),t.srcName?(d=d.toStringWithSourceMap({file:t.destName}),d.map=d.map&&d.map.toString()):d=d.toString()),d},preamble:function(){this.lastContext=0,this.source=new c(this.options.srcName)},createFunctionContext:function(e){var t="",n=this.stackVars.concat(this.registers.list);n.length>0&&(t+=", "+n.join(", "));var r=0;for(var i in this.aliases){var s=this.aliases[i];this.aliases.hasOwnProperty(i)&&s.children&&s.referenceCount>1&&(t+=", alias"+ ++r+"="+i,s.children[0]="alias"+r)}var o=["depth0","helpers","partials","data"];(this.useBlockParams||this.useDepths)&&o.push("blockParams"),this.useDepths&&o.push("depths");var a=this.mergeSource(t);return e?(o.push(a),Function.apply(this,o)):this.source.wrap(["function(",o.join(","),") {\n  ",a,"}"])},mergeSource:function(e){var t,n,r,i,s=this.environment.isSimple,o=!this.forceBuffer;return this.source.each(function(e){e.appendToBuffer?(r?e.prepend("  + "):r=e,i=e):(r&&(n?r.prepend("buffer += "):t=!0,i.add(";"),r=i=void 0),n=!0,s||(o=!1))}),o?r?(r.prepend("return "),i.add(";")):n||this.source.push('return "";'):(e+=", buffer = "+(t?"":this.initializeBuffer()),r?(r.prepend("return buffer + "),i.add(";")):this.source.push("return buffer;")),e&&this.source.prepend("var "+e.substring(2)+(t?"":";\n")),this.source.merge()},blockValue:function(e){var t=this.aliasable("helpers.blockHelperMissing"),n=[this.contextName(0)];this.setupHelperArgs(e,0,n);var r=this.popStack();n.splice(1,0,r),this.push(this.source.functionCall(t,"call",n))},ambiguousBlockValue:function(){var e=this.aliasable("helpers.blockHelperMissing"),t=[this.contextName(0)];this.setupHelperArgs("",0,t,!0),this.flushInline();var n=this.topStack();t.splice(1,0,n),this.pushSource(["if (!",this.lastHelper,") { ",n," = ",this.source.functionCall(e,"call",t),"}"])},appendContent:function(e){this.pendingContent?e=this.pendingContent+e:this.pendingLocation=this.source.currentLocation,this.pendingContent=e},append:function(){if(this.isInline())this.replaceStack(function(e){return[" != null ? ",e,' : ""']}),this.pushSource(this.appendToBuffer(this.popStack()));else{var e=this.popStack();this.pushSource(["if (",e," != null) { ",this.appendToBuffer(e,void 0,!0)," }"]),this.environment.isSimple&&this.pushSource(["else { ",this.appendToBuffer("''",void 0,!0)," }"])}},appendEscaped:function(){this.pushSource(this.appendToBuffer([this.aliasable("this.escapeExpression"),"(",this.popStack(),")"]))},getContext:function(e){this.lastContext=e},pushContext:function(){this.pushStackLiteral(this.contextName(this.lastContext))},lookupOnContext:function(e,t,n){var r=0;n||!this.options.compat||this.lastContext?this.pushContext():this.push(this.depthedLookup(e[r++])),this.resolvePath("context",e,r,t)},lookupBlockParam:function(e,t){this.useBlockParams=!0,this.push(["blockParams[",e[0],"][",e[1],"]"]),this.resolvePath("context",t,1)},lookupData:function(e,t){this.pushStackLiteral(e?"this.data(data, "+e+")":"data"),this.resolvePath("data",t,0,!0)},resolvePath:function(e,t,n,r){if(this.options.strict||this.options.assumeObjects)return void this.push(s(this.options.strict,this,t,e));for(var i=t.length;i>n;n++)this.replaceStack(function(i){var s=this.nameLookup(i,t[n],e);return r?[" && ",s]:[" != null ? ",s," : ",i]})},resolvePossibleLambda:function(){this.push([this.aliasable("this.lambda"),"(",this.popStack(),", ",this.contextName(0),")"])},pushStringParam:function(e,t){this.pushContext(),this.pushString(t),"SubExpression"!==t&&("string"==typeof e?this.pushString(e):this.pushStackLiteral(e))},emptyHash:function(e){this.trackIds&&this.push("{}"),this.stringParams&&(this.push("{}"),this.push("{}")),this.pushStackLiteral(e?"undefined":"{}")},pushHash:function(){this.hash&&this.hashes.push(this.hash),this.hash={values:[],types:[],contexts:[],ids:[]}},popHash:function(){var e=this.hash;this.hash=this.hashes.pop(),this.trackIds&&this.push(this.objectLiteral(e.ids)),this.stringParams&&(this.push(this.objectLiteral(e.contexts)),this.push(this.objectLiteral(e.types))),this.push(this.objectLiteral(e.values))},pushString:function(e){this.pushStackLiteral(this.quotedString(e))},pushLiteral:function(e){this.pushStackLiteral(e)},pushProgram:function(e){this.pushStackLiteral(null!=e?this.programExpression(e):null)},invokeHelper:function(e,t,n){var r=this.popStack(),i=this.setupHelper(e,t),s=n?[i.name," || "]:"",o=["("].concat(s,r);this.options.strict||o.push(" || ",this.aliasable("helpers.helperMissing")),o.push(")"),this.push(this.source.functionCall(o,"call",i.callParams))},invokeKnownHelper:function(e,t){var n=this.setupHelper(e,t);this.push(this.source.functionCall(n.name,"call",n.callParams))},invokeAmbiguous:function(e,t){this.useRegister("helper");var n=this.popStack();this.emptyHash();var r=this.setupHelper(0,e,t),i=this.lastHelper=this.nameLookup("helpers",e,"helper"),s=["(","(helper = ",i," || ",n,")"];this.options.strict||(s[0]="(helper = ",s.push(" != null ? helper : ",this.aliasable("helpers.helperMissing"))),this.push(["(",s,r.paramsInit?["),(",r.paramsInit]:[],"),","(typeof helper === ",this.aliasable('"function"')," ? ",this.source.functionCall("helper","call",r.callParams)," : helper))"])},invokePartial:function(e,t,n){var r=[],i=this.setupParams(t,1,r,!1);e&&(t=this.popStack(),delete i.name),n&&(i.indent=JSON.stringify(n)),i.helpers="helpers",i.partials="partials",r.unshift(e?t:this.nameLookup("partials",t,"partial")),this.options.compat&&(i.depths="depths"),i=this.objectLiteral(i),r.push(i),this.push(this.source.functionCall("this.invokePartial","",r))
},assignToHash:function(e){var t,n,r,i=this.popStack();this.trackIds&&(r=this.popStack()),this.stringParams&&(n=this.popStack(),t=this.popStack());var s=this.hash;t&&(s.contexts[e]=t),n&&(s.types[e]=n),r&&(s.ids[e]=r),s.values[e]=i},pushId:function(e,t,n){"BlockParam"===e?this.pushStackLiteral("blockParams["+t[0]+"].path["+t[1]+"]"+(n?" + "+JSON.stringify("."+n):"")):"PathExpression"===e?this.pushString(t):this.pushStackLiteral("SubExpression"===e?"true":"null")},compiler:i,compileChildren:function(e,t){for(var n,r,i=e.children,s=0,o=i.length;o>s;s++){n=i[s],r=new this.compiler;var a=this.matchExistingProgram(n);null==a?(this.context.programs.push(""),a=this.context.programs.length,n.index=a,n.name="program"+a,this.context.programs[a]=r.compile(n,t,this.context,!this.precompile),this.context.environments[a]=n,this.useDepths=this.useDepths||r.useDepths,this.useBlockParams=this.useBlockParams||r.useBlockParams):(n.index=a,n.name="program"+a,this.useDepths=this.useDepths||n.useDepths,this.useBlockParams=this.useBlockParams||n.useBlockParams)}},matchExistingProgram:function(e){for(var t=0,n=this.context.environments.length;n>t;t++){var r=this.context.environments[t];if(r&&r.equals(e))return t}},programExpression:function(e){var t=this.environment.children[e],n=[t.index,"data",t.blockParams];return(this.useBlockParams||this.useDepths)&&n.push("blockParams"),this.useDepths&&n.push("depths"),"this.program("+n.join(", ")+")"},useRegister:function(e){this.registers[e]||(this.registers[e]=!0,this.registers.list.push(e))},push:function(e){return e instanceof r||(e=this.source.wrap(e)),this.inlineStack.push(e),e},pushStackLiteral:function(e){this.push(new r(e))},pushSource:function(e){this.pendingContent&&(this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent),this.pendingLocation)),this.pendingContent=void 0),e&&this.source.push(e)},replaceStack:function(e){var t,n,i,s=["("];if(!this.isInline())throw new l("replaceStack on non-inline");var o=this.popStack(!0);if(o instanceof r)t=[o.value],s=["(",t],i=!0;else{n=!0;var a=this.incrStack();s=["((",this.push(a)," = ",o,")"],t=this.topStack()}var u=e.call(this,t);i||this.popStack(),n&&this.stackSlot--,this.push(s.concat(u,")"))},incrStack:function(){return this.stackSlot++,this.stackSlot>this.stackVars.length&&this.stackVars.push("stack"+this.stackSlot),this.topStackName()},topStackName:function(){return"stack"+this.stackSlot},flushInline:function(){var e=this.inlineStack;this.inlineStack=[];for(var t=0,n=e.length;n>t;t++){var i=e[t];if(i instanceof r)this.compileStack.push(i);else{var s=this.incrStack();this.pushSource([s," = ",i,";"]),this.compileStack.push(s)}}},isInline:function(){return this.inlineStack.length},popStack:function(e){var t=this.isInline(),n=(t?this.inlineStack:this.compileStack).pop();if(!e&&n instanceof r)return n.value;if(!t){if(!this.stackSlot)throw new l("Invalid stack pop");this.stackSlot--}return n},topStack:function(){var e=this.isInline()?this.inlineStack:this.compileStack,t=e[e.length-1];return t instanceof r?t.value:t},contextName:function(e){return this.useDepths&&e?"depths["+e+"]":"depth"+e},quotedString:function(e){return this.source.quotedString(e)},objectLiteral:function(e){return this.source.objectLiteral(e)},aliasable:function(e){var t=this.aliases[e];return t?(t.referenceCount++,t):(t=this.aliases[e]=this.source.wrap(e),t.aliasable=!0,t.referenceCount=1,t)},setupHelper:function(e,t,n){var r=[],i=this.setupHelperArgs(t,e,r,n),s=this.nameLookup("helpers",t,"helper");return{params:r,paramsInit:i,name:s,callParams:[this.contextName(0)].concat(r)}},setupParams:function(e,t,n){var r,i={},s=[],o=[],a=[];i.name=this.quotedString(e),i.hash=this.popStack(),this.trackIds&&(i.hashIds=this.popStack()),this.stringParams&&(i.hashTypes=this.popStack(),i.hashContexts=this.popStack());var l=this.popStack(),u=this.popStack();(u||l)&&(i.fn=u||"this.noop",i.inverse=l||"this.noop");for(var c=t;c--;)r=this.popStack(),n[c]=r,this.trackIds&&(a[c]=this.popStack()),this.stringParams&&(o[c]=this.popStack(),s[c]=this.popStack());return this.trackIds&&(i.ids=this.source.generateArray(a)),this.stringParams&&(i.types=this.source.generateArray(o),i.contexts=this.source.generateArray(s)),this.options.data&&(i.data="data"),this.useBlockParams&&(i.blockParams="blockParams"),i},setupHelperArgs:function(e,t,n,r){var i=this.setupParams(e,t,n,!0);return i=this.objectLiteral(i),r?(this.useRegister("options"),n.push("options"),["options=",i]):(n.push(i),"")}};for(var d="break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" "),p=i.RESERVED_WORDS={},h=0,f=d.length;f>h;h++)p[d[h]]=!0;i.isValidJavaScriptVariableName=function(e){return!i.RESERVED_WORDS[e]&&/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(e)},n["default"]=i},{"../base":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/base.js","../exception":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js","../utils":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js","./code-gen":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js":[function(e,t,n){"use strict";var r=function(){function e(){this.yy={}}var t={trace:function(){},yy:{},symbols_:{error:2,root:3,program:4,EOF:5,program_repetition0:6,statement:7,mustache:8,block:9,rawBlock:10,partial:11,content:12,COMMENT:13,CONTENT:14,openRawBlock:15,END_RAW_BLOCK:16,OPEN_RAW_BLOCK:17,helperName:18,openRawBlock_repetition0:19,openRawBlock_option0:20,CLOSE_RAW_BLOCK:21,openBlock:22,block_option0:23,closeBlock:24,openInverse:25,block_option1:26,OPEN_BLOCK:27,openBlock_repetition0:28,openBlock_option0:29,openBlock_option1:30,CLOSE:31,OPEN_INVERSE:32,openInverse_repetition0:33,openInverse_option0:34,openInverse_option1:35,openInverseChain:36,OPEN_INVERSE_CHAIN:37,openInverseChain_repetition0:38,openInverseChain_option0:39,openInverseChain_option1:40,inverseAndProgram:41,INVERSE:42,inverseChain:43,inverseChain_option0:44,OPEN_ENDBLOCK:45,OPEN:46,mustache_repetition0:47,mustache_option0:48,OPEN_UNESCAPED:49,mustache_repetition1:50,mustache_option1:51,CLOSE_UNESCAPED:52,OPEN_PARTIAL:53,partialName:54,partial_repetition0:55,partial_option0:56,param:57,sexpr:58,OPEN_SEXPR:59,sexpr_repetition0:60,sexpr_option0:61,CLOSE_SEXPR:62,hash:63,hash_repetition_plus0:64,hashSegment:65,ID:66,EQUALS:67,blockParams:68,OPEN_BLOCK_PARAMS:69,blockParams_repetition_plus0:70,CLOSE_BLOCK_PARAMS:71,path:72,dataName:73,STRING:74,NUMBER:75,BOOLEAN:76,DATA:77,pathSegments:78,SEP:79,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",13:"COMMENT",14:"CONTENT",16:"END_RAW_BLOCK",17:"OPEN_RAW_BLOCK",21:"CLOSE_RAW_BLOCK",27:"OPEN_BLOCK",31:"CLOSE",32:"OPEN_INVERSE",37:"OPEN_INVERSE_CHAIN",42:"INVERSE",45:"OPEN_ENDBLOCK",46:"OPEN",49:"OPEN_UNESCAPED",52:"CLOSE_UNESCAPED",53:"OPEN_PARTIAL",59:"OPEN_SEXPR",62:"CLOSE_SEXPR",66:"ID",67:"EQUALS",69:"OPEN_BLOCK_PARAMS",71:"CLOSE_BLOCK_PARAMS",74:"STRING",75:"NUMBER",76:"BOOLEAN",77:"DATA",79:"SEP"},productions_:[0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[12,1],[10,3],[15,5],[9,4],[9,4],[22,6],[25,6],[36,6],[41,2],[43,3],[43,1],[24,3],[8,5],[8,5],[11,5],[57,1],[57,1],[58,5],[63,1],[65,3],[68,3],[18,1],[18,1],[18,1],[18,1],[18,1],[54,1],[54,1],[73,2],[72,1],[78,3],[78,1],[6,0],[6,2],[19,0],[19,2],[20,0],[20,1],[23,0],[23,1],[26,0],[26,1],[28,0],[28,2],[29,0],[29,1],[30,0],[30,1],[33,0],[33,2],[34,0],[34,1],[35,0],[35,1],[38,0],[38,2],[39,0],[39,1],[40,0],[40,1],[44,0],[44,1],[47,0],[47,2],[48,0],[48,1],[50,0],[50,2],[51,0],[51,1],[55,0],[55,2],[56,0],[56,1],[60,0],[60,2],[61,0],[61,1],[64,1],[64,2],[70,1],[70,2]],performAction:function(e,t,n,r,i,s){var o=s.length-1;switch(i){case 1:return s[o-1];case 2:this.$=new r.Program(s[o],null,{},r.locInfo(this._$));break;case 3:this.$=s[o];break;case 4:this.$=s[o];break;case 5:this.$=s[o];break;case 6:this.$=s[o];break;case 7:this.$=s[o];break;case 8:this.$=new r.CommentStatement(r.stripComment(s[o]),r.stripFlags(s[o],s[o]),r.locInfo(this._$));break;case 9:this.$=new r.ContentStatement(s[o],r.locInfo(this._$));break;case 10:this.$=r.prepareRawBlock(s[o-2],s[o-1],s[o],this._$);break;case 11:this.$={path:s[o-3],params:s[o-2],hash:s[o-1]};break;case 12:this.$=r.prepareBlock(s[o-3],s[o-2],s[o-1],s[o],!1,this._$);break;case 13:this.$=r.prepareBlock(s[o-3],s[o-2],s[o-1],s[o],!0,this._$);break;case 14:this.$={path:s[o-4],params:s[o-3],hash:s[o-2],blockParams:s[o-1],strip:r.stripFlags(s[o-5],s[o])};break;case 15:this.$={path:s[o-4],params:s[o-3],hash:s[o-2],blockParams:s[o-1],strip:r.stripFlags(s[o-5],s[o])};break;case 16:this.$={path:s[o-4],params:s[o-3],hash:s[o-2],blockParams:s[o-1],strip:r.stripFlags(s[o-5],s[o])};break;case 17:this.$={strip:r.stripFlags(s[o-1],s[o-1]),program:s[o]};break;case 18:var a=r.prepareBlock(s[o-2],s[o-1],s[o],s[o],!1,this._$),l=new r.Program([a],null,{},r.locInfo(this._$));l.chained=!0,this.$={strip:s[o-2].strip,program:l,chain:!0};break;case 19:this.$=s[o];break;case 20:this.$={path:s[o-1],strip:r.stripFlags(s[o-2],s[o])};break;case 21:this.$=r.prepareMustache(s[o-3],s[o-2],s[o-1],s[o-4],r.stripFlags(s[o-4],s[o]),this._$);break;case 22:this.$=r.prepareMustache(s[o-3],s[o-2],s[o-1],s[o-4],r.stripFlags(s[o-4],s[o]),this._$);break;case 23:this.$=new r.PartialStatement(s[o-3],s[o-2],s[o-1],r.stripFlags(s[o-4],s[o]),r.locInfo(this._$));break;case 24:this.$=s[o];break;case 25:this.$=s[o];break;case 26:this.$=new r.SubExpression(s[o-3],s[o-2],s[o-1],r.locInfo(this._$));break;case 27:this.$=new r.Hash(s[o],r.locInfo(this._$));break;case 28:this.$=new r.HashPair(s[o-2],s[o],r.locInfo(this._$));break;case 29:this.$=s[o-1];break;case 30:this.$=s[o];break;case 31:this.$=s[o];break;case 32:this.$=new r.StringLiteral(s[o],r.locInfo(this._$));break;case 33:this.$=new r.NumberLiteral(s[o],r.locInfo(this._$));break;case 34:this.$=new r.BooleanLiteral(s[o],r.locInfo(this._$));break;case 35:this.$=s[o];break;case 36:this.$=s[o];break;case 37:this.$=r.preparePath(!0,s[o],this._$);break;case 38:this.$=r.preparePath(!1,s[o],this._$);break;case 39:s[o-2].push({part:s[o],separator:s[o-1]}),this.$=s[o-2];break;case 40:this.$=[{part:s[o]}];break;case 41:this.$=[];break;case 42:s[o-1].push(s[o]);break;case 43:this.$=[];break;case 44:s[o-1].push(s[o]);break;case 51:this.$=[];break;case 52:s[o-1].push(s[o]);break;case 57:this.$=[];break;case 58:s[o-1].push(s[o]);break;case 63:this.$=[];break;case 64:s[o-1].push(s[o]);break;case 71:this.$=[];break;case 72:s[o-1].push(s[o]);break;case 75:this.$=[];break;case 76:s[o-1].push(s[o]);break;case 79:this.$=[];break;case 80:s[o-1].push(s[o]);break;case 83:this.$=[];break;case 84:s[o-1].push(s[o]);break;case 87:this.$=[s[o]];break;case 88:s[o-1].push(s[o]);break;case 89:this.$=[s[o]];break;case 90:s[o-1].push(s[o])}},table:[{3:1,4:2,5:[2,41],6:3,13:[2,41],14:[2,41],17:[2,41],27:[2,41],32:[2,41],46:[2,41],49:[2,41],53:[2,41]},{1:[3]},{5:[1,4]},{5:[2,2],7:5,8:6,9:7,10:8,11:9,12:10,13:[1,11],14:[1,18],15:16,17:[1,21],22:14,25:15,27:[1,19],32:[1,20],37:[2,2],42:[2,2],45:[2,2],46:[1,12],49:[1,13],53:[1,17]},{1:[2,1]},{5:[2,42],13:[2,42],14:[2,42],17:[2,42],27:[2,42],32:[2,42],37:[2,42],42:[2,42],45:[2,42],46:[2,42],49:[2,42],53:[2,42]},{5:[2,3],13:[2,3],14:[2,3],17:[2,3],27:[2,3],32:[2,3],37:[2,3],42:[2,3],45:[2,3],46:[2,3],49:[2,3],53:[2,3]},{5:[2,4],13:[2,4],14:[2,4],17:[2,4],27:[2,4],32:[2,4],37:[2,4],42:[2,4],45:[2,4],46:[2,4],49:[2,4],53:[2,4]},{5:[2,5],13:[2,5],14:[2,5],17:[2,5],27:[2,5],32:[2,5],37:[2,5],42:[2,5],45:[2,5],46:[2,5],49:[2,5],53:[2,5]},{5:[2,6],13:[2,6],14:[2,6],17:[2,6],27:[2,6],32:[2,6],37:[2,6],42:[2,6],45:[2,6],46:[2,6],49:[2,6],53:[2,6]},{5:[2,7],13:[2,7],14:[2,7],17:[2,7],27:[2,7],32:[2,7],37:[2,7],42:[2,7],45:[2,7],46:[2,7],49:[2,7],53:[2,7]},{5:[2,8],13:[2,8],14:[2,8],17:[2,8],27:[2,8],32:[2,8],37:[2,8],42:[2,8],45:[2,8],46:[2,8],49:[2,8],53:[2,8]},{18:22,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{18:31,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{4:32,6:3,13:[2,41],14:[2,41],17:[2,41],27:[2,41],32:[2,41],37:[2,41],42:[2,41],45:[2,41],46:[2,41],49:[2,41],53:[2,41]},{4:33,6:3,13:[2,41],14:[2,41],17:[2,41],27:[2,41],32:[2,41],42:[2,41],45:[2,41],46:[2,41],49:[2,41],53:[2,41]},{12:34,14:[1,18]},{18:36,54:35,58:37,59:[1,38],66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{5:[2,9],13:[2,9],14:[2,9],16:[2,9],17:[2,9],27:[2,9],32:[2,9],37:[2,9],42:[2,9],45:[2,9],46:[2,9],49:[2,9],53:[2,9]},{18:39,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{18:40,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{18:41,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{31:[2,71],47:42,59:[2,71],66:[2,71],74:[2,71],75:[2,71],76:[2,71],77:[2,71]},{21:[2,30],31:[2,30],52:[2,30],59:[2,30],62:[2,30],66:[2,30],69:[2,30],74:[2,30],75:[2,30],76:[2,30],77:[2,30]},{21:[2,31],31:[2,31],52:[2,31],59:[2,31],62:[2,31],66:[2,31],69:[2,31],74:[2,31],75:[2,31],76:[2,31],77:[2,31]},{21:[2,32],31:[2,32],52:[2,32],59:[2,32],62:[2,32],66:[2,32],69:[2,32],74:[2,32],75:[2,32],76:[2,32],77:[2,32]},{21:[2,33],31:[2,33],52:[2,33],59:[2,33],62:[2,33],66:[2,33],69:[2,33],74:[2,33],75:[2,33],76:[2,33],77:[2,33]},{21:[2,34],31:[2,34],52:[2,34],59:[2,34],62:[2,34],66:[2,34],69:[2,34],74:[2,34],75:[2,34],76:[2,34],77:[2,34]},{21:[2,38],31:[2,38],52:[2,38],59:[2,38],62:[2,38],66:[2,38],69:[2,38],74:[2,38],75:[2,38],76:[2,38],77:[2,38],79:[1,43]},{66:[1,30],78:44},{21:[2,40],31:[2,40],52:[2,40],59:[2,40],62:[2,40],66:[2,40],69:[2,40],74:[2,40],75:[2,40],76:[2,40],77:[2,40],79:[2,40]},{50:45,52:[2,75],59:[2,75],66:[2,75],74:[2,75],75:[2,75],76:[2,75],77:[2,75]},{23:46,36:48,37:[1,50],41:49,42:[1,51],43:47,45:[2,47]},{26:52,41:53,42:[1,51],45:[2,49]},{16:[1,54]},{31:[2,79],55:55,59:[2,79],66:[2,79],74:[2,79],75:[2,79],76:[2,79],77:[2,79]},{31:[2,35],59:[2,35],66:[2,35],74:[2,35],75:[2,35],76:[2,35],77:[2,35]},{31:[2,36],59:[2,36],66:[2,36],74:[2,36],75:[2,36],76:[2,36],77:[2,36]},{18:56,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{28:57,31:[2,51],59:[2,51],66:[2,51],69:[2,51],74:[2,51],75:[2,51],76:[2,51],77:[2,51]},{31:[2,57],33:58,59:[2,57],66:[2,57],69:[2,57],74:[2,57],75:[2,57],76:[2,57],77:[2,57]},{19:59,21:[2,43],59:[2,43],66:[2,43],74:[2,43],75:[2,43],76:[2,43],77:[2,43]},{18:63,31:[2,73],48:60,57:61,58:64,59:[1,38],63:62,64:65,65:66,66:[1,67],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{66:[1,68]},{21:[2,37],31:[2,37],52:[2,37],59:[2,37],62:[2,37],66:[2,37],69:[2,37],74:[2,37],75:[2,37],76:[2,37],77:[2,37],79:[1,43]},{18:63,51:69,52:[2,77],57:70,58:64,59:[1,38],63:71,64:65,65:66,66:[1,67],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{24:72,45:[1,73]},{45:[2,48]},{4:74,6:3,13:[2,41],14:[2,41],17:[2,41],27:[2,41],32:[2,41],37:[2,41],42:[2,41],45:[2,41],46:[2,41],49:[2,41],53:[2,41]},{45:[2,19]},{18:75,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{4:76,6:3,13:[2,41],14:[2,41],17:[2,41],27:[2,41],32:[2,41],45:[2,41],46:[2,41],49:[2,41],53:[2,41]},{24:77,45:[1,73]},{45:[2,50]},{5:[2,10],13:[2,10],14:[2,10],17:[2,10],27:[2,10],32:[2,10],37:[2,10],42:[2,10],45:[2,10],46:[2,10],49:[2,10],53:[2,10]},{18:63,31:[2,81],56:78,57:79,58:64,59:[1,38],63:80,64:65,65:66,66:[1,67],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{59:[2,83],60:81,62:[2,83],66:[2,83],74:[2,83],75:[2,83],76:[2,83],77:[2,83]},{18:63,29:82,31:[2,53],57:83,58:64,59:[1,38],63:84,64:65,65:66,66:[1,67],69:[2,53],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{18:63,31:[2,59],34:85,57:86,58:64,59:[1,38],63:87,64:65,65:66,66:[1,67],69:[2,59],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{18:63,20:88,21:[2,45],57:89,58:64,59:[1,38],63:90,64:65,65:66,66:[1,67],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{31:[1,91]},{31:[2,72],59:[2,72],66:[2,72],74:[2,72],75:[2,72],76:[2,72],77:[2,72]},{31:[2,74]},{21:[2,24],31:[2,24],52:[2,24],59:[2,24],62:[2,24],66:[2,24],69:[2,24],74:[2,24],75:[2,24],76:[2,24],77:[2,24]},{21:[2,25],31:[2,25],52:[2,25],59:[2,25],62:[2,25],66:[2,25],69:[2,25],74:[2,25],75:[2,25],76:[2,25],77:[2,25]},{21:[2,27],31:[2,27],52:[2,27],62:[2,27],65:92,66:[1,93],69:[2,27]},{21:[2,87],31:[2,87],52:[2,87],62:[2,87],66:[2,87],69:[2,87]},{21:[2,40],31:[2,40],52:[2,40],59:[2,40],62:[2,40],66:[2,40],67:[1,94],69:[2,40],74:[2,40],75:[2,40],76:[2,40],77:[2,40],79:[2,40]},{21:[2,39],31:[2,39],52:[2,39],59:[2,39],62:[2,39],66:[2,39],69:[2,39],74:[2,39],75:[2,39],76:[2,39],77:[2,39],79:[2,39]},{52:[1,95]},{52:[2,76],59:[2,76],66:[2,76],74:[2,76],75:[2,76],76:[2,76],77:[2,76]},{52:[2,78]},{5:[2,12],13:[2,12],14:[2,12],17:[2,12],27:[2,12],32:[2,12],37:[2,12],42:[2,12],45:[2,12],46:[2,12],49:[2,12],53:[2,12]},{18:96,66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{36:48,37:[1,50],41:49,42:[1,51],43:98,44:97,45:[2,69]},{31:[2,63],38:99,59:[2,63],66:[2,63],69:[2,63],74:[2,63],75:[2,63],76:[2,63],77:[2,63]},{45:[2,17]},{5:[2,13],13:[2,13],14:[2,13],17:[2,13],27:[2,13],32:[2,13],37:[2,13],42:[2,13],45:[2,13],46:[2,13],49:[2,13],53:[2,13]},{31:[1,100]},{31:[2,80],59:[2,80],66:[2,80],74:[2,80],75:[2,80],76:[2,80],77:[2,80]},{31:[2,82]},{18:63,57:102,58:64,59:[1,38],61:101,62:[2,85],63:103,64:65,65:66,66:[1,67],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{30:104,31:[2,55],68:105,69:[1,106]},{31:[2,52],59:[2,52],66:[2,52],69:[2,52],74:[2,52],75:[2,52],76:[2,52],77:[2,52]},{31:[2,54],69:[2,54]},{31:[2,61],35:107,68:108,69:[1,106]},{31:[2,58],59:[2,58],66:[2,58],69:[2,58],74:[2,58],75:[2,58],76:[2,58],77:[2,58]},{31:[2,60],69:[2,60]},{21:[1,109]},{21:[2,44],59:[2,44],66:[2,44],74:[2,44],75:[2,44],76:[2,44],77:[2,44]},{21:[2,46]},{5:[2,21],13:[2,21],14:[2,21],17:[2,21],27:[2,21],32:[2,21],37:[2,21],42:[2,21],45:[2,21],46:[2,21],49:[2,21],53:[2,21]},{21:[2,88],31:[2,88],52:[2,88],62:[2,88],66:[2,88],69:[2,88]},{67:[1,94]},{18:63,57:110,58:64,59:[1,38],66:[1,30],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{5:[2,22],13:[2,22],14:[2,22],17:[2,22],27:[2,22],32:[2,22],37:[2,22],42:[2,22],45:[2,22],46:[2,22],49:[2,22],53:[2,22]},{31:[1,111]},{45:[2,18]},{45:[2,70]},{18:63,31:[2,65],39:112,57:113,58:64,59:[1,38],63:114,64:65,65:66,66:[1,67],69:[2,65],72:23,73:24,74:[1,25],75:[1,26],76:[1,27],77:[1,29],78:28},{5:[2,23],13:[2,23],14:[2,23],17:[2,23],27:[2,23],32:[2,23],37:[2,23],42:[2,23],45:[2,23],46:[2,23],49:[2,23],53:[2,23]},{62:[1,115]},{59:[2,84],62:[2,84],66:[2,84],74:[2,84],75:[2,84],76:[2,84],77:[2,84]},{62:[2,86]},{31:[1,116]},{31:[2,56]},{66:[1,118],70:117},{31:[1,119]},{31:[2,62]},{14:[2,11]},{21:[2,28],31:[2,28],52:[2,28],62:[2,28],66:[2,28],69:[2,28]},{5:[2,20],13:[2,20],14:[2,20],17:[2,20],27:[2,20],32:[2,20],37:[2,20],42:[2,20],45:[2,20],46:[2,20],49:[2,20],53:[2,20]},{31:[2,67],40:120,68:121,69:[1,106]},{31:[2,64],59:[2,64],66:[2,64],69:[2,64],74:[2,64],75:[2,64],76:[2,64],77:[2,64]},{31:[2,66],69:[2,66]},{21:[2,26],31:[2,26],52:[2,26],59:[2,26],62:[2,26],66:[2,26],69:[2,26],74:[2,26],75:[2,26],76:[2,26],77:[2,26]},{13:[2,14],14:[2,14],17:[2,14],27:[2,14],32:[2,14],37:[2,14],42:[2,14],45:[2,14],46:[2,14],49:[2,14],53:[2,14]},{66:[1,123],71:[1,122]},{66:[2,89],71:[2,89]},{13:[2,15],14:[2,15],17:[2,15],27:[2,15],32:[2,15],42:[2,15],45:[2,15],46:[2,15],49:[2,15],53:[2,15]},{31:[1,124]},{31:[2,68]},{31:[2,29]},{66:[2,90],71:[2,90]},{13:[2,16],14:[2,16],17:[2,16],27:[2,16],32:[2,16],37:[2,16],42:[2,16],45:[2,16],46:[2,16],49:[2,16],53:[2,16]}],defaultActions:{4:[2,1],47:[2,48],49:[2,19],53:[2,50],62:[2,74],71:[2,78],76:[2,17],80:[2,82],90:[2,46],97:[2,18],98:[2,70],103:[2,86],105:[2,56],108:[2,62],109:[2,11],121:[2,68],122:[2,29]},parseError:function(e){throw new Error(e)},parse:function(e){function t(){var e;return e=n.lexer.lex()||1,"number"!=typeof e&&(e=n.symbols_[e]||e),e}var n=this,r=[0],i=[null],s=[],o=this.table,a="",l=0,u=0,c=0;this.lexer.setInput(e),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,this.yy.parser=this,"undefined"==typeof this.lexer.yylloc&&(this.lexer.yylloc={});var d=this.lexer.yylloc;s.push(d);var p=this.lexer.options&&this.lexer.options.ranges;"function"==typeof this.yy.parseError&&(this.parseError=this.yy.parseError);for(var h,f,m,g,v,y,w,b,S,x={};;){if(m=r[r.length-1],this.defaultActions[m]?g=this.defaultActions[m]:((null===h||"undefined"==typeof h)&&(h=t()),g=o[m]&&o[m][h]),"undefined"==typeof g||!g.length||!g[0]){var _="";if(!c){S=[];for(y in o[m])this.terminals_[y]&&y>2&&S.push("'"+this.terminals_[y]+"'");_=this.lexer.showPosition?"Parse error on line "+(l+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+S.join(", ")+", got '"+(this.terminals_[h]||h)+"'":"Parse error on line "+(l+1)+": Unexpected "+(1==h?"end of input":"'"+(this.terminals_[h]||h)+"'"),this.parseError(_,{text:this.lexer.match,token:this.terminals_[h]||h,line:this.lexer.yylineno,loc:d,expected:S})}}if(g[0]instanceof Array&&g.length>1)throw new Error("Parse Error: multiple actions possible at state: "+m+", token: "+h);switch(g[0]){case 1:r.push(h),i.push(this.lexer.yytext),s.push(this.lexer.yylloc),r.push(g[1]),h=null,f?(h=f,f=null):(u=this.lexer.yyleng,a=this.lexer.yytext,l=this.lexer.yylineno,d=this.lexer.yylloc,c>0&&c--);break;case 2:if(w=this.productions_[g[1]][1],x.$=i[i.length-w],x._$={first_line:s[s.length-(w||1)].first_line,last_line:s[s.length-1].last_line,first_column:s[s.length-(w||1)].first_column,last_column:s[s.length-1].last_column},p&&(x._$.range=[s[s.length-(w||1)].range[0],s[s.length-1].range[1]]),v=this.performAction.call(x,a,u,l,this.yy,g[1],i,s),"undefined"!=typeof v)return v;w&&(r=r.slice(0,-1*w*2),i=i.slice(0,-1*w),s=s.slice(0,-1*w)),r.push(this.productions_[g[1]][0]),i.push(x.$),s.push(x._$),b=o[r[r.length-2]][r[r.length-1]],r.push(b);break;case 3:return!0}}return!0}},n=function(){var e={EOF:1,parseError:function(e,t){if(!this.yy.parser)throw new Error(e);this.yy.parser.parseError(e,t)},setInput:function(e){return this._input=e,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e;var t=e.match(/(?:\r\n?|\n).*/g);return t?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,n=e.split(/(?:\r\n?|\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t-1),this.offset-=t;var r=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),n.length-1&&(this.yylineno-=n.length-1);var i=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:n?(n.length===r.length?this.yylloc.first_column:0)+r[r.length-n.length].length-n[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[i[0],i[0]+this.yyleng-t]),this},more:function(){return this._more=!0,this},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var e=this.pastInput(),t=new Array(e.length+1).join("-");return e+this.upcomingInput()+"\n"+t+"^"},next:function(){if(this.done)return this.EOF;this._input||(this.done=!0);var e,t,n,r,i;this._more||(this.yytext="",this.match="");for(var s=this._currentRules(),o=0;o<s.length&&(n=this._input.match(this.rules[s[o]]),!n||t&&!(n[0].length>t[0].length)||(t=n,r=o,this.options.flex));o++);return t?(i=t[0].match(/(?:\r\n?|\n).*/g),i&&(this.yylineno+=i.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:i?i[i.length-1].length-i[i.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+t[0].length},this.yytext+=t[0],this.match+=t[0],this.matches=t,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(t[0].length),this.matched+=t[0],e=this.performAction.call(this,this.yy,this,s[r],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),e?e:void 0):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var e=this.next();return"undefined"!=typeof e?e:this.lex()},begin:function(e){this.conditionStack.push(e)},popState:function(){return this.conditionStack.pop()},_currentRules:function(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function(){return this.conditionStack[this.conditionStack.length-2]},pushState:function(e){this.begin(e)}};return e.options={},e.performAction=function(e,t,n,r){function i(e,n){return t.yytext=t.yytext.substr(e,t.yyleng-n)}switch(n){case 0:if("\\\\"===t.yytext.slice(-2)?(i(0,1),this.begin("mu")):"\\"===t.yytext.slice(-1)?(i(0,1),this.begin("emu")):this.begin("mu"),t.yytext)return 14;break;case 1:return 14;case 2:return this.popState(),14;case 3:return t.yytext=t.yytext.substr(5,t.yyleng-9),this.popState(),16;case 4:return 14;case 5:return this.popState(),13;case 6:return 59;case 7:return 62;case 8:return 17;case 9:return this.popState(),this.begin("raw"),21;case 10:return 53;case 11:return 27;case 12:return 45;case 13:return this.popState(),42;case 14:return this.popState(),42;case 15:return 32;case 16:return 37;case 17:return 49;case 18:return 46;case 19:this.unput(t.yytext),this.popState(),this.begin("com");break;case 20:return this.popState(),13;case 21:return 46;case 22:return 67;case 23:return 66;case 24:return 66;case 25:return 79;case 26:break;case 27:return this.popState(),52;case 28:return this.popState(),31;case 29:return t.yytext=i(1,2).replace(/\\"/g,'"'),74;case 30:return t.yytext=i(1,2).replace(/\\'/g,"'"),74;case 31:return 77;case 32:return 76;case 33:return 76;case 34:return 75;case 35:return 69;case 36:return 71;case 37:return 66;case 38:return t.yytext=i(1,2),66;case 39:return"INVALID";case 40:return 5}},e.rules=[/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,/^(?:[^\x00]*?(?=(\{\{\{\{\/)))/,/^(?:[\s\S]*?--(~)?\}\})/,/^(?:\()/,/^(?:\))/,/^(?:\{\{\{\{)/,/^(?:\}\}\}\})/,/^(?:\{\{(~)?>)/,/^(?:\{\{(~)?#)/,/^(?:\{\{(~)?\/)/,/^(?:\{\{(~)?\^\s*(~)?\}\})/,/^(?:\{\{(~)?\s*else\s*(~)?\}\})/,/^(?:\{\{(~)?\^)/,/^(?:\{\{(~)?\s*else\b)/,/^(?:\{\{(~)?\{)/,/^(?:\{\{(~)?&)/,/^(?:\{\{(~)?!--)/,/^(?:\{\{(~)?![\s\S]*?\}\})/,/^(?:\{\{(~)?)/,/^(?:=)/,/^(?:\.\.)/,/^(?:\.(?=([=~}\s\/.)|])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}(~)?\}\})/,/^(?:(~)?\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\s)])))/,/^(?:false(?=([~}\s)])))/,/^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,/^(?:as\s+\|)/,/^(?:\|)/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:$)/],e.conditions={mu:{rules:[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],inclusive:!1},emu:{rules:[2],inclusive:!1},com:{rules:[5],inclusive:!1},raw:{rules:[3,4],inclusive:!1},INITIAL:{rules:[0,1,40],inclusive:!0}},e}();return t.lexer=n,e.prototype=t,t.Parser=e,new e}();n["default"]=r},{}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/printer.js":[function(e,t,n){"use strict";function r(e){return(new i).accept(e)}function i(){this.padding=0}var s=e("./visitor")["default"];n.print=r,n.PrintVisitor=i,i.prototype=new s,i.prototype.pad=function(e){for(var t="",n=0,r=this.padding;r>n;n++)t+="  ";return t=t+e+"\n"},i.prototype.Program=function(e){var t,n,r="",i=e.body;if(e.blockParams){var s="BLOCK PARAMS: [";for(t=0,n=e.blockParams.length;n>t;t++)s+=" "+e.blockParams[t];s+=" ]",r+=this.pad(s)}for(t=0,n=i.length;n>t;t++)r+=this.accept(i[t]);return this.padding--,r},i.prototype.MustacheStatement=function(e){return this.pad("{{ "+this.SubExpression(e)+" }}")},i.prototype.BlockStatement=function(e){var t="";return t+=this.pad("BLOCK:"),this.padding++,t+=this.pad(this.SubExpression(e)),e.program&&(t+=this.pad("PROGRAM:"),this.padding++,t+=this.accept(e.program),this.padding--),e.inverse&&(e.program&&this.padding++,t+=this.pad("{{^}}"),this.padding++,t+=this.accept(e.inverse),this.padding--,e.program&&this.padding--),this.padding--,t},i.prototype.PartialStatement=function(e){var t="PARTIAL:"+e.name.original;return e.params[0]&&(t+=" "+this.accept(e.params[0])),e.hash&&(t+=" "+this.accept(e.hash)),this.pad("{{> "+t+" }}")},i.prototype.ContentStatement=function(e){return this.pad("CONTENT[ '"+e.value+"' ]")},i.prototype.CommentStatement=function(e){return this.pad("{{! '"+e.value+"' }}")},i.prototype.SubExpression=function(e){for(var t,n=e.params,r=[],i=0,s=n.length;s>i;i++)r.push(this.accept(n[i]));return n="["+r.join(", ")+"]",t=e.hash?" "+this.accept(e.hash):"",this.accept(e.path)+" "+n+t},i.prototype.PathExpression=function(e){var t=e.parts.join("/");return(e.data?"@":"")+"PATH:"+t},i.prototype.StringLiteral=function(e){return'"'+e.value+'"'},i.prototype.NumberLiteral=function(e){return"NUMBER{"+e.value+"}"},i.prototype.BooleanLiteral=function(e){return"BOOLEAN{"+e.value+"}"},i.prototype.Hash=function(e){for(var t=e.pairs,n=[],r=0,i=t.length;i>r;r++)n.push(this.accept(t[r]));return"HASH{"+n.join(", ")+"}"},i.prototype.HashPair=function(e){return e.key+"="+this.accept(e.value)}},{"./visitor":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js":[function(e,t,n){"use strict";function r(){this.parents=[]}var i=e("../exception")["default"],s=e("./ast")["default"];r.prototype={constructor:r,mutating:!1,acceptKey:function(e,t){var n=this.accept(e[t]);if(this.mutating){if(n&&(!n.type||!s[n.type]))throw new i('Unexpected node type "'+n.type+'" found when accepting '+t+" on "+e.type);e[t]=n}},acceptRequired:function(e,t){if(this.acceptKey(e,t),!e[t])throw new i(e.type+" requires "+t)},acceptArray:function(e){for(var t=0,n=e.length;n>t;t++)this.acceptKey(e,t),e[t]||(e.splice(t,1),t--,n--)},accept:function(e){if(e){this.current&&this.parents.unshift(this.current),this.current=e;var t=this[e.type](e);return this.current=this.parents.shift(),!this.mutating||t?t:t!==!1?e:void 0}},Program:function(e){this.acceptArray(e.body)},MustacheStatement:function(e){this.acceptRequired(e,"path"),this.acceptArray(e.params),this.acceptKey(e,"hash")},BlockStatement:function(e){this.acceptRequired(e,"path"),this.acceptArray(e.params),this.acceptKey(e,"hash"),this.acceptKey(e,"program"),this.acceptKey(e,"inverse")},PartialStatement:function(e){this.acceptRequired(e,"name"),this.acceptArray(e.params),this.acceptKey(e,"hash")},ContentStatement:function(){},CommentStatement:function(){},SubExpression:function(e){this.acceptRequired(e,"path"),this.acceptArray(e.params),this.acceptKey(e,"hash")
},PartialExpression:function(e){this.acceptRequired(e,"name"),this.acceptArray(e.params),this.acceptKey(e,"hash")},PathExpression:function(){},StringLiteral:function(){},NumberLiteral:function(){},BooleanLiteral:function(){},Hash:function(e){this.acceptArray(e.pairs)},HashPair:function(e){this.acceptRequired(e,"value")}},n["default"]=r},{"../exception":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js","./ast":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js":[function(e,t,n){"use strict";function r(){}function i(e,t,n){void 0===t&&(t=e.length);var r=e[t-1],i=e[t-2];return r?"ContentStatement"===r.type?(i||!n?/\r?\n\s*?$/:/(^|\r?\n)\s*?$/).test(r.original):void 0:n}function s(e,t,n){void 0===t&&(t=-1);var r=e[t+1],i=e[t+2];return r?"ContentStatement"===r.type?(i||!n?/^\s*?\r?\n/:/^\s*?(\r?\n|$)/).test(r.original):void 0:n}function o(e,t,n){var r=e[null==t?0:t+1];if(r&&"ContentStatement"===r.type&&(n||!r.rightStripped)){var i=r.value;r.value=r.value.replace(n?/^\s+/:/^[ \t]*\r?\n?/,""),r.rightStripped=r.value!==i}}function a(e,t,n){var r=e[null==t?e.length-1:t-1];if(r&&"ContentStatement"===r.type&&(n||!r.leftStripped)){var i=r.value;return r.value=r.value.replace(n?/\s+$/:/[ \t]+$/,""),r.leftStripped=r.value!==i,r.leftStripped}}var l=e("./visitor")["default"];r.prototype=new l,r.prototype.Program=function(e){var t=!this.isRootSeen;this.isRootSeen=!0;for(var n=e.body,r=0,l=n.length;l>r;r++){var u=n[r],c=this.accept(u);if(c){var d=i(n,r,t),p=s(n,r,t),h=c.openStandalone&&d,f=c.closeStandalone&&p,m=c.inlineStandalone&&d&&p;c.close&&o(n,r,!0),c.open&&a(n,r,!0),m&&(o(n,r),a(n,r)&&"PartialStatement"===u.type&&(u.indent=/([ \t]+$)/.exec(n[r-1].original)[1])),h&&(o((u.program||u.inverse).body),a(n,r)),f&&(o(n,r),a((u.inverse||u.program).body))}}return e},r.prototype.BlockStatement=function(e){this.accept(e.program),this.accept(e.inverse);var t=e.program||e.inverse,n=e.program&&e.inverse,r=n,l=n;if(n&&n.chained)for(r=n.body[0].program;l.chained;)l=l.body[l.body.length-1].program;var u={open:e.openStrip.open,close:e.closeStrip.close,openStandalone:s(t.body),closeStandalone:i((r||t).body)};if(e.openStrip.close&&o(t.body,null,!0),n){var c=e.inverseStrip;c.open&&a(t.body,null,!0),c.close&&o(r.body,null,!0),e.closeStrip.open&&a(l.body,null,!0),i(t.body)&&s(r.body)&&(a(t.body),o(r.body))}else e.closeStrip.open&&a(t.body,null,!0);return u},r.prototype.MustacheStatement=function(e){return e.strip},r.prototype.PartialStatement=r.prototype.CommentStatement=function(e){var t=e.strip||{};return{inlineStandalone:!0,open:t.open,close:t.close}},n["default"]=r},{"./visitor":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js":[function(e,t,n){"use strict";function r(e,t){var n,r,s=t&&t.loc;s&&(n=s.start.line,r=s.start.column,e+=" - "+n+":"+r);for(var o=Error.prototype.constructor.call(this,e),a=0;a<i.length;a++)this[i[a]]=o[i[a]];s&&(this.lineNumber=n,this.column=r)}var i=["description","fileName","lineNumber","message","name","number","stack"];r.prototype=new Error,n["default"]=r},{}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/runtime.js":[function(e,t,n){"use strict";function r(e){var t=e&&e[0]||1,n=p;if(t!==n){if(n>t){var r=h[n],i=h[t];throw new d("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+r+") or downgrade your runtime to an older version ("+i+").")}throw new d("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")}}function i(e,t){if(!t)throw new d("No environment passed to template");if(!e||!e.main)throw new d("Unknown template object: "+typeof e);t.VM.checkRevision(e.compiler);var n=function(n,r,i){i.hash&&(r=c.extend({},r,i.hash)),n=t.VM.resolvePartial.call(this,n,r,i);var s=t.VM.invokePartial.call(this,n,r,i);if(null==s&&t.compile&&(i.partials[i.name]=t.compile(n,e.compilerOptions,t),s=i.partials[i.name](r,i)),null!=s){if(i.indent){for(var o=s.split("\n"),a=0,l=o.length;l>a&&(o[a]||a+1!==l);a++)o[a]=i.indent+o[a];s=o.join("\n")}return s}throw new d("The partial "+i.name+" could not be compiled when running in runtime-only mode")},r={strict:function(e,t){if(!(t in e))throw new d('"'+t+'" not defined in '+e);return e[t]},lookup:function(e,t){for(var n=e.length,r=0;n>r;r++)if(e[r]&&null!=e[r][t])return e[r][t]},lambda:function(e,t){return"function"==typeof e?e.call(t):e},escapeExpression:c.escapeExpression,invokePartial:n,fn:function(t){return e[t]},programs:[],program:function(e,t,n,r,i){var o=this.programs[e],a=this.fn(e);return t||i||r||n?o=s(this,e,a,t,n,r,i):o||(o=this.programs[e]=s(this,e,a)),o},data:function(e,t){for(;e&&t--;)e=e._parent;return e},merge:function(e,t){var n=e||t;return e&&t&&e!==t&&(n=c.extend({},t,e)),n},noop:t.VM.noop,compilerInfo:e.compiler},i=function(t,n){n=n||{};var s=n.data;i._setup(n),!n.partial&&e.useData&&(s=u(t,s));var o,a=e.useBlockParams?[]:void 0;return e.useDepths&&(o=n.depths?[t].concat(n.depths):[t]),e.main.call(r,t,r.helpers,r.partials,s,a,o)};return i.isTop=!0,i._setup=function(n){n.partial?(r.helpers=n.helpers,r.partials=n.partials):(r.helpers=r.merge(n.helpers,t.helpers),e.usePartial&&(r.partials=r.merge(n.partials,t.partials)))},i._child=function(t,n,i,o){if(e.useBlockParams&&!i)throw new d("must pass block params");if(e.useDepths&&!o)throw new d("must pass parent depths");return s(r,t,e[t],n,0,i,o)},i}function s(e,t,n,r,i,s,o){var a=function(t,i){return i=i||{},n.call(e,t,e.helpers,e.partials,i.data||r,s&&[i.blockParams].concat(s),o&&[t].concat(o))};return a.program=t,a.depth=o?o.length:0,a.blockParams=i||0,a}function o(e,t,n){return e?e.call||n.name||(n.name=e,e=n.partials[e]):e=n.partials[n.name],e}function a(e,t,n){if(n.partial=!0,void 0===e)throw new d("The partial "+n.name+" could not be found");return e instanceof Function?e(t,n):void 0}function l(){return""}function u(e,t){return t&&"root"in t||(t=t?f(t):{},t.root=e),t}var c=e("./utils"),d=e("./exception")["default"],p=e("./base").COMPILER_REVISION,h=e("./base").REVISION_CHANGES,f=e("./base").createFrame;n.checkRevision=r,n.template=i,n.program=s,n.resolvePartial=o,n.invokePartial=a,n.noop=l},{"./base":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/base.js","./exception":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/exception.js","./utils":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/safe-string.js":[function(e,t,n){"use strict";function r(e){this.string=e}r.prototype.toString=r.prototype.toHTML=function(){return""+this.string},n["default"]=r},{}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/utils.js":[function(e,t,n){"use strict";function r(e){return c[e]}function i(e){for(var t=1;t<arguments.length;t++)for(var n in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],n)&&(e[n]=arguments[t][n]);return e}function s(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1}function o(e){return e&&e.toHTML?e.toHTML():null==e?"":e?(e=""+e,p.test(e)?e.replace(d,r):e):e+""}function a(e){return e||0===e?m(e)&&0===e.length?!0:!1:!0}function l(e,t){return e.path=t,e}function u(e,t){return(e?e+".":"")+t}var c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},d=/[&<>"'`]/g,p=/[&<>"'`]/;n.extend=i;var h=Object.prototype.toString;n.toString=h;var f=function(e){return"function"==typeof e};f(/x/)&&(f=function(e){return"function"==typeof e&&"[object Function]"===h.call(e)});var f;n.isFunction=f;var m=Array.isArray||function(e){return e&&"object"==typeof e?"[object Array]"===h.call(e):!1};n.isArray=m,n.indexOf=s,n.escapeExpression=o,n.isEmpty=a,n.blockParams=l,n.appendContextPath=u},{}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/lib/index.js":[function(e,t){var n=e("../dist/cjs/handlebars")["default"];n.Visitor=e("../dist/cjs/handlebars/compiler/visitor")["default"];var r=e("../dist/cjs/handlebars/compiler/printer");if(n.PrintVisitor=r.PrintVisitor,n.print=r.print,t.exports=n,"undefined"!=typeof e&&e.extensions){var i=function(t,r){var i=e("fs"),s=i.readFileSync(r,"utf8");t.exports=n.compile(s)};e.extensions[".handlebars"]=i,e.extensions[".hbs"]=i}},{"../dist/cjs/handlebars":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars.js","../dist/cjs/handlebars/compiler/printer":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/printer.js","../dist/cjs/handlebars/compiler/visitor":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js",fs:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/browserify/lib/_empty.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map.js":[function(e,t,n){n.SourceMapGenerator=e("./source-map/source-map-generator").SourceMapGenerator,n.SourceMapConsumer=e("./source-map/source-map-consumer").SourceMapConsumer,n.SourceNode=e("./source-map/source-node").SourceNode},{"./source-map/source-map-consumer":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/source-map-consumer.js","./source-map/source-map-generator":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/source-map-generator.js","./source-map/source-node":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/source-node.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/array-set.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(){this._array=[],this._set={}}var r=e("./util");n.fromArray=function(e,t){for(var r=new n,i=0,s=e.length;s>i;i++)r.add(e[i],t);return r},n.prototype.add=function(e,t){var n=this.has(e),i=this._array.length;(!n||t)&&this._array.push(e),n||(this._set[r.toSetString(e)]=i)},n.prototype.has=function(e){return Object.prototype.hasOwnProperty.call(this._set,r.toSetString(e))},n.prototype.indexOf=function(e){if(this.has(e))return this._set[r.toSetString(e)];throw new Error('"'+e+'" is not in the set.')},n.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error("No element indexed by "+e)},n.prototype.toArray=function(){return this._array.slice()},t.ArraySet=n})},{"./util":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/util.js",amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/base64-vlq.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(e){return 0>e?(-e<<1)+1:(e<<1)+0}function r(e){var t=1===(1&e),n=e>>1;return t?-n:n}var i=e("./base64"),s=5,o=1<<s,a=o-1,l=o;t.encode=function(e){var t,r="",o=n(e);do t=o&a,o>>>=s,o>0&&(t|=l),r+=i.encode(t);while(o>0);return r},t.decode=function(e,t){var n,o,u=0,c=e.length,d=0,p=0;do{if(u>=c)throw new Error("Expected more digits in base 64 VLQ value.");o=i.decode(e.charAt(u++)),n=!!(o&l),o&=a,d+=o<<p,p+=s}while(n);t.value=r(d),t.rest=e.slice(u)}})},{"./base64":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/base64.js",amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/base64.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){var n={},r={};"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("").forEach(function(e,t){n[e]=t,r[t]=e}),t.encode=function(e){if(e in r)return r[e];throw new TypeError("Must be between 0 and 63: "+e)},t.decode=function(e){if(e in n)return n[e];throw new TypeError("Not a valid base 64 digit: "+e)}})},{amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/binary-search.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(e,t,r,i,s){var o=Math.floor((t-e)/2)+e,a=s(r,i[o],!0);return 0===a?o:a>0?t-o>1?n(o,t,r,i,s):o:o-e>1?n(e,o,r,i,s):0>e?-1:e}t.search=function(e,t,r){return 0===t.length?-1:n(-1,t.length,e,t,r)}})},{amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/mapping-list.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(e,t){var n=e.generatedLine,r=t.generatedLine,s=e.generatedColumn,o=t.generatedColumn;return r>n||r==n&&o>=s||i.compareByGeneratedPositions(e,t)<=0}function r(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}var i=e("./util");r.prototype.unsortedForEach=function(e,t){this._array.forEach(e,t)},r.prototype.add=function(e){n(this._last,e)?(this._last=e,this._array.push(e)):(this._sorted=!1,this._array.push(e))},r.prototype.toArray=function(){return this._sorted||(this._array.sort(i.compareByGeneratedPositions),this._sorted=!0),this._array},t.MappingList=r})},{"./util":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/util.js",amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/source-map-consumer.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(e){var t=e;"string"==typeof e&&(t=JSON.parse(e.replace(/^\)\]\}'/,"")));var n=r.getArg(t,"version"),i=r.getArg(t,"sources"),o=r.getArg(t,"names",[]),a=r.getArg(t,"sourceRoot",null),l=r.getArg(t,"sourcesContent",null),u=r.getArg(t,"mappings"),c=r.getArg(t,"file",null);if(n!=this._version)throw new Error("Unsupported version: "+n);i=i.map(r.normalize),this._names=s.fromArray(o,!0),this._sources=s.fromArray(i,!0),this.sourceRoot=a,this.sourcesContent=l,this._mappings=u,this.file=c}var r=e("./util"),i=e("./binary-search"),s=e("./array-set").ArraySet,o=e("./base64-vlq");n.fromSourceMap=function(e){var t=Object.create(n.prototype);return t._names=s.fromArray(e._names.toArray(),!0),t._sources=s.fromArray(e._sources.toArray(),!0),t.sourceRoot=e._sourceRoot,t.sourcesContent=e._generateSourcesContent(t._sources.toArray(),t.sourceRoot),t.file=e._file,t.__generatedMappings=e._mappings.toArray().slice(),t.__originalMappings=e._mappings.toArray().slice().sort(r.compareByOriginalPositions),t},n.prototype._version=3,Object.defineProperty(n.prototype,"sources",{get:function(){return this._sources.toArray().map(function(e){return null!=this.sourceRoot?r.join(this.sourceRoot,e):e},this)}}),n.prototype.__generatedMappings=null,Object.defineProperty(n.prototype,"_generatedMappings",{get:function(){return this.__generatedMappings||(this.__generatedMappings=[],this.__originalMappings=[],this._parseMappings(this._mappings,this.sourceRoot)),this.__generatedMappings}}),n.prototype.__originalMappings=null,Object.defineProperty(n.prototype,"_originalMappings",{get:function(){return this.__originalMappings||(this.__generatedMappings=[],this.__originalMappings=[],this._parseMappings(this._mappings,this.sourceRoot)),this.__originalMappings}}),n.prototype._nextCharIsMappingSeparator=function(e){var t=e.charAt(0);return";"===t||","===t},n.prototype._parseMappings=function(e){for(var t,n=1,i=0,s=0,a=0,l=0,u=0,c=e,d={};c.length>0;)if(";"===c.charAt(0))n++,c=c.slice(1),i=0;else if(","===c.charAt(0))c=c.slice(1);else{if(t={},t.generatedLine=n,o.decode(c,d),t.generatedColumn=i+d.value,i=t.generatedColumn,c=d.rest,c.length>0&&!this._nextCharIsMappingSeparator(c)){if(o.decode(c,d),t.source=this._sources.at(l+d.value),l+=d.value,c=d.rest,0===c.length||this._nextCharIsMappingSeparator(c))throw new Error("Found a source, but no line and column");if(o.decode(c,d),t.originalLine=s+d.value,s=t.originalLine,t.originalLine+=1,c=d.rest,0===c.length||this._nextCharIsMappingSeparator(c))throw new Error("Found a source and line, but no column");o.decode(c,d),t.originalColumn=a+d.value,a=t.originalColumn,c=d.rest,c.length>0&&!this._nextCharIsMappingSeparator(c)&&(o.decode(c,d),t.name=this._names.at(u+d.value),u+=d.value,c=d.rest)}this.__generatedMappings.push(t),"number"==typeof t.originalLine&&this.__originalMappings.push(t)}this.__generatedMappings.sort(r.compareByGeneratedPositions),this.__originalMappings.sort(r.compareByOriginalPositions)},n.prototype._findMapping=function(e,t,n,r,s){if(e[n]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+e[n]);if(e[r]<0)throw new TypeError("Column must be greater than or equal to 0, got "+e[r]);return i.search(e,t,s)},n.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var t=this._generatedMappings[e];if(e+1<this._generatedMappings.length){var n=this._generatedMappings[e+1];if(t.generatedLine===n.generatedLine){t.lastGeneratedColumn=n.generatedColumn-1;continue}}t.lastGeneratedColumn=1/0}},n.prototype.originalPositionFor=function(e){var t={generatedLine:r.getArg(e,"line"),generatedColumn:r.getArg(e,"column")},n=this._findMapping(t,this._generatedMappings,"generatedLine","generatedColumn",r.compareByGeneratedPositions);if(n>=0){var i=this._generatedMappings[n];if(i.generatedLine===t.generatedLine){var s=r.getArg(i,"source",null);return null!=s&&null!=this.sourceRoot&&(s=r.join(this.sourceRoot,s)),{source:s,line:r.getArg(i,"originalLine",null),column:r.getArg(i,"originalColumn",null),name:r.getArg(i,"name",null)}}}return{source:null,line:null,column:null,name:null}},n.prototype.sourceContentFor=function(e){if(!this.sourcesContent)return null;if(null!=this.sourceRoot&&(e=r.relative(this.sourceRoot,e)),this._sources.has(e))return this.sourcesContent[this._sources.indexOf(e)];var t;if(null!=this.sourceRoot&&(t=r.urlParse(this.sourceRoot))){var n=e.replace(/^file:\/\//,"");if("file"==t.scheme&&this._sources.has(n))return this.sourcesContent[this._sources.indexOf(n)];if((!t.path||"/"==t.path)&&this._sources.has("/"+e))return this.sourcesContent[this._sources.indexOf("/"+e)]}throw new Error('"'+e+'" is not in the SourceMap.')},n.prototype.generatedPositionFor=function(e){var t={source:r.getArg(e,"source"),originalLine:r.getArg(e,"line"),originalColumn:r.getArg(e,"column")};null!=this.sourceRoot&&(t.source=r.relative(this.sourceRoot,t.source));var n=this._findMapping(t,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions);if(n>=0){var i=this._originalMappings[n];return{line:r.getArg(i,"generatedLine",null),column:r.getArg(i,"generatedColumn",null),lastColumn:r.getArg(i,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}},n.prototype.allGeneratedPositionsFor=function(e){var t={source:r.getArg(e,"source"),originalLine:r.getArg(e,"line"),originalColumn:1/0};null!=this.sourceRoot&&(t.source=r.relative(this.sourceRoot,t.source));var n=[],i=this._findMapping(t,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions);if(i>=0)for(var s=this._originalMappings[i];s&&s.originalLine===t.originalLine;)n.push({line:r.getArg(s,"generatedLine",null),column:r.getArg(s,"generatedColumn",null),lastColumn:r.getArg(s,"lastGeneratedColumn",null)}),s=this._originalMappings[--i];return n.reverse()},n.GENERATED_ORDER=1,n.ORIGINAL_ORDER=2,n.prototype.eachMapping=function(e,t,i){var s,o=t||null,a=i||n.GENERATED_ORDER;switch(a){case n.GENERATED_ORDER:s=this._generatedMappings;break;case n.ORIGINAL_ORDER:s=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var l=this.sourceRoot;s.map(function(e){var t=e.source;return null!=t&&null!=l&&(t=r.join(l,t)),{source:t,generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:e.name}}).forEach(e,o)},t.SourceMapConsumer=n})},{"./array-set":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/array-set.js","./base64-vlq":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/base64-vlq.js","./binary-search":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/binary-search.js","./util":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/util.js",amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/source-map-generator.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(e){e||(e={}),this._file=i.getArg(e,"file",null),this._sourceRoot=i.getArg(e,"sourceRoot",null),this._skipValidation=i.getArg(e,"skipValidation",!1),this._sources=new s,this._names=new s,this._mappings=new o,this._sourcesContents=null}var r=e("./base64-vlq"),i=e("./util"),s=e("./array-set").ArraySet,o=e("./mapping-list").MappingList;n.prototype._version=3,n.fromSourceMap=function(e){var t=e.sourceRoot,r=new n({file:e.file,sourceRoot:t});return e.eachMapping(function(e){var n={generated:{line:e.generatedLine,column:e.generatedColumn}};null!=e.source&&(n.source=e.source,null!=t&&(n.source=i.relative(t,n.source)),n.original={line:e.originalLine,column:e.originalColumn},null!=e.name&&(n.name=e.name)),r.addMapping(n)}),e.sources.forEach(function(t){var n=e.sourceContentFor(t);null!=n&&r.setSourceContent(t,n)}),r},n.prototype.addMapping=function(e){var t=i.getArg(e,"generated"),n=i.getArg(e,"original",null),r=i.getArg(e,"source",null),s=i.getArg(e,"name",null);this._skipValidation||this._validateMapping(t,n,r,s),null==r||this._sources.has(r)||this._sources.add(r),null==s||this._names.has(s)||this._names.add(s),this._mappings.add({generatedLine:t.line,generatedColumn:t.column,originalLine:null!=n&&n.line,originalColumn:null!=n&&n.column,source:r,name:s})},n.prototype.setSourceContent=function(e,t){var n=e;null!=this._sourceRoot&&(n=i.relative(this._sourceRoot,n)),null!=t?(this._sourcesContents||(this._sourcesContents={}),this._sourcesContents[i.toSetString(n)]=t):this._sourcesContents&&(delete this._sourcesContents[i.toSetString(n)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},n.prototype.applySourceMap=function(e,t,n){var r=t;if(null==t){if(null==e.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');r=e.file}var o=this._sourceRoot;null!=o&&(r=i.relative(o,r));var a=new s,l=new s;this._mappings.unsortedForEach(function(t){if(t.source===r&&null!=t.originalLine){var s=e.originalPositionFor({line:t.originalLine,column:t.originalColumn});null!=s.source&&(t.source=s.source,null!=n&&(t.source=i.join(n,t.source)),null!=o&&(t.source=i.relative(o,t.source)),t.originalLine=s.line,t.originalColumn=s.column,null!=s.name&&(t.name=s.name))}var u=t.source;null==u||a.has(u)||a.add(u);var c=t.name;null==c||l.has(c)||l.add(c)},this),this._sources=a,this._names=l,e.sources.forEach(function(t){var r=e.sourceContentFor(t);null!=r&&(null!=n&&(t=i.join(n,t)),null!=o&&(t=i.relative(o,t)),this.setSourceContent(t,r))},this)},n.prototype._validateMapping=function(e,t,n,r){if(!(e&&"line"in e&&"column"in e&&e.line>0&&e.column>=0&&!t&&!n&&!r||e&&"line"in e&&"column"in e&&t&&"line"in t&&"column"in t&&e.line>0&&e.column>=0&&t.line>0&&t.column>=0&&n))throw new Error("Invalid mapping: "+JSON.stringify({generated:e,source:n,original:t,name:r}))},n.prototype._serializeMappings=function(){for(var e,t=0,n=1,s=0,o=0,a=0,l=0,u="",c=this._mappings.toArray(),d=0,p=c.length;p>d;d++){if(e=c[d],e.generatedLine!==n)for(t=0;e.generatedLine!==n;)u+=";",n++;else if(d>0){if(!i.compareByGeneratedPositions(e,c[d-1]))continue;u+=","}u+=r.encode(e.generatedColumn-t),t=e.generatedColumn,null!=e.source&&(u+=r.encode(this._sources.indexOf(e.source)-l),l=this._sources.indexOf(e.source),u+=r.encode(e.originalLine-1-o),o=e.originalLine-1,u+=r.encode(e.originalColumn-s),s=e.originalColumn,null!=e.name&&(u+=r.encode(this._names.indexOf(e.name)-a),a=this._names.indexOf(e.name)))}return u},n.prototype._generateSourcesContent=function(e,t){return e.map(function(e){if(!this._sourcesContents)return null;null!=t&&(e=i.relative(t,e));var n=i.toSetString(e);return Object.prototype.hasOwnProperty.call(this._sourcesContents,n)?this._sourcesContents[n]:null},this)},n.prototype.toJSON=function(){var e={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(e.file=this._file),null!=this._sourceRoot&&(e.sourceRoot=this._sourceRoot),this._sourcesContents&&(e.sourcesContent=this._generateSourcesContent(e.sources,e.sourceRoot)),e},n.prototype.toString=function(){return JSON.stringify(this)},t.SourceMapGenerator=n})},{"./array-set":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/array-set.js","./base64-vlq":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/base64-vlq.js","./mapping-list":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/mapping-list.js","./util":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/util.js",amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/source-node.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(e,t,n,r,i){this.children=[],this.sourceContents={},this.line=null==e?null:e,this.column=null==t?null:t,this.source=null==n?null:n,this.name=null==i?null:i,this[a]=!0,null!=r&&this.add(r)}var r=e("./source-map-generator").SourceMapGenerator,i=e("./util"),s=/(\r?\n)/,o=10,a="$$$isSourceNode$$$";n.fromStringWithSourceMap=function(e,t,r){function o(e,t){if(null===e||void 0===e.source)a.add(t);else{var s=r?i.join(r,e.source):e.source;a.add(new n(e.originalLine,e.originalColumn,s,t,e.name))}}var a=new n,l=e.split(s),u=function(){var e=l.shift(),t=l.shift()||"";return e+t},c=1,d=0,p=null;return t.eachMapping(function(e){if(null!==p){if(!(c<e.generatedLine)){var t=l[0],n=t.substr(0,e.generatedColumn-d);return l[0]=t.substr(e.generatedColumn-d),d=e.generatedColumn,o(p,n),void(p=e)}var n="";o(p,u()),c++,d=0}for(;c<e.generatedLine;)a.add(u()),c++;if(d<e.generatedColumn){var t=l[0];a.add(t.substr(0,e.generatedColumn)),l[0]=t.substr(e.generatedColumn),d=e.generatedColumn}p=e},this),l.length>0&&(p&&o(p,u()),a.add(l.join(""))),t.sources.forEach(function(e){var n=t.sourceContentFor(e);null!=n&&(null!=r&&(e=i.join(r,e)),a.setSourceContent(e,n))}),a},n.prototype.add=function(e){if(Array.isArray(e))e.forEach(function(e){this.add(e)},this);else{if(!e[a]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);e&&this.children.push(e)}return this},n.prototype.prepend=function(e){if(Array.isArray(e))for(var t=e.length-1;t>=0;t--)this.prepend(e[t]);else{if(!e[a]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);this.children.unshift(e)}return this},n.prototype.walk=function(e){for(var t,n=0,r=this.children.length;r>n;n++)t=this.children[n],t[a]?t.walk(e):""!==t&&e(t,{source:this.source,line:this.line,column:this.column,name:this.name})},n.prototype.join=function(e){var t,n,r=this.children.length;if(r>0){for(t=[],n=0;r-1>n;n++)t.push(this.children[n]),t.push(e);t.push(this.children[n]),this.children=t}return this},n.prototype.replaceRight=function(e,t){var n=this.children[this.children.length-1];return n[a]?n.replaceRight(e,t):"string"==typeof n?this.children[this.children.length-1]=n.replace(e,t):this.children.push("".replace(e,t)),this},n.prototype.setSourceContent=function(e,t){this.sourceContents[i.toSetString(e)]=t},n.prototype.walkSourceContents=function(e){for(var t=0,n=this.children.length;n>t;t++)this.children[t][a]&&this.children[t].walkSourceContents(e);for(var r=Object.keys(this.sourceContents),t=0,n=r.length;n>t;t++)e(i.fromSetString(r[t]),this.sourceContents[r[t]])},n.prototype.toString=function(){var e="";return this.walk(function(t){e+=t}),e},n.prototype.toStringWithSourceMap=function(e){var t={code:"",line:1,column:0},n=new r(e),i=!1,s=null,a=null,l=null,u=null;return this.walk(function(e,r){t.code+=e,null!==r.source&&null!==r.line&&null!==r.column?((s!==r.source||a!==r.line||l!==r.column||u!==r.name)&&n.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:t.line,column:t.column},name:r.name}),s=r.source,a=r.line,l=r.column,u=r.name,i=!0):i&&(n.addMapping({generated:{line:t.line,column:t.column}}),s=null,i=!1);for(var c=0,d=e.length;d>c;c++)e.charCodeAt(c)===o?(t.line++,t.column=0,c+1===d?(s=null,i=!1):i&&n.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:t.line,column:t.column},name:r.name})):t.column++}),this.walkSourceContents(function(e,t){n.setSourceContent(e,t)}),{code:t.code,map:n}},t.SourceNode=n})},{"./source-map-generator":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/source-map-generator.js","./util":"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/util.js",amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/lib/source-map/util.js":[function(e,t){if("function"!=typeof n)var n=e("amdefine")(t,e);n(function(e,t){function n(e,t,n){if(t in e)return e[t];if(3===arguments.length)return n;throw new Error('"'+t+'" is a required argument.')}function r(e){var t=e.match(h);return t?{scheme:t[1],auth:t[2],host:t[3],port:t[4],path:t[5]}:null}function i(e){var t="";return e.scheme&&(t+=e.scheme+":"),t+="//",e.auth&&(t+=e.auth+"@"),e.host&&(t+=e.host),e.port&&(t+=":"+e.port),e.path&&(t+=e.path),t}function s(e){var t=e,n=r(e);if(n){if(!n.path)return e;t=n.path}for(var s,o="/"===t.charAt(0),a=t.split(/\/+/),l=0,u=a.length-1;u>=0;u--)s=a[u],"."===s?a.splice(u,1):".."===s?l++:l>0&&(""===s?(a.splice(u+1,l),l=0):(a.splice(u,2),l--));return t=a.join("/"),""===t&&(t=o?"/":"."),n?(n.path=t,i(n)):t}function o(e,t){""===e&&(e="."),""===t&&(t=".");var n=r(t),o=r(e);if(o&&(e=o.path||"/"),n&&!n.scheme)return o&&(n.scheme=o.scheme),i(n);if(n||t.match(f))return t;if(o&&!o.host&&!o.path)return o.host=t,i(o);var a="/"===t.charAt(0)?t:s(e.replace(/\/+$/,"")+"/"+t);
return o?(o.path=a,i(o)):a}function a(e,t){""===e&&(e="."),e=e.replace(/\/$/,"");var n=r(e);return"/"==t.charAt(0)&&n&&"/"==n.path?t.slice(1):0===t.indexOf(e+"/")?t.substr(e.length+1):t}function l(e){return"$"+e}function u(e){return e.substr(1)}function c(e,t){var n=e||"",r=t||"";return(n>r)-(r>n)}function d(e,t,n){var r;return(r=c(e.source,t.source))?r:(r=e.originalLine-t.originalLine)?r:(r=e.originalColumn-t.originalColumn,r||n?r:(r=c(e.name,t.name))?r:(r=e.generatedLine-t.generatedLine,r?r:e.generatedColumn-t.generatedColumn))}function p(e,t,n){var r;return(r=e.generatedLine-t.generatedLine)?r:(r=e.generatedColumn-t.generatedColumn,r||n?r:(r=c(e.source,t.source))?r:(r=e.originalLine-t.originalLine)?r:(r=e.originalColumn-t.originalColumn,r?r:c(e.name,t.name)))}t.getArg=n;var h=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/,f=/^data:.+\,.+$/;t.urlParse=r,t.urlGenerate=i,t.normalize=s,t.join=o,t.relative=a,t.toSetString=l,t.fromSetString=u,t.compareByOriginalPositions=d,t.compareByGeneratedPositions=p})},{amdefine:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js":[function(e,t){(function(n,r){"use strict";function i(t,i){function s(e){var t,n;for(t=0;e[t];t+=1)if(n=e[t],"."===n)e.splice(t,1),t-=1;else if(".."===n){if(1===t&&(".."===e[2]||".."===e[0]))break;t>0&&(e.splice(t-1,2),t-=2)}}function o(e,t){var n;return e&&"."===e.charAt(0)&&t&&(n=t.split("/"),n=n.slice(0,n.length-1),n=n.concat(e.split("/")),s(n),e=n.join("/")),e}function a(e){return function(t){return o(t,e)}}function l(e){function t(t){f[e]=t}return t.fromText=function(){throw new Error("amdefine does not implement load.fromText")},t}function u(e,n,s){var o,a,l,u;if(e)a=f[e]={},l={id:e,uri:r,exports:a},o=d(i,a,l,e);else{if(m)throw new Error("amdefine with no module ID cannot be called more than once per file.");m=!0,a=t.exports,l=t,o=d(i,a,l,t.id)}n&&(n=n.map(function(e){return o(e)})),u="function"==typeof s?s.apply(l.exports,n):s,void 0!==u&&(l.exports=u,e&&(f[e]=l.exports))}function c(e,t,n){Array.isArray(e)?(n=t,t=e,e=void 0):"string"!=typeof e&&(n=e,e=t=void 0),t&&!Array.isArray(t)&&(n=t,t=void 0),t||(t=["require","exports","module"]),e?h[e]=[e,t,n]:u(e,t,n)}var d,p,h={},f={},m=!1,g=e("path");return d=function(e,t,r,i){function s(s,o){return"string"==typeof s?p(e,t,r,s,i):(s=s.map(function(n){return p(e,t,r,n,i)}),void n.nextTick(function(){o.apply(null,s)}))}return s.toUrl=function(e){return 0===e.indexOf(".")?o(e,g.dirname(r.filename)):e},s},i=i||function(){return t.require.apply(t,arguments)},p=function(e,t,n,r,i){var s,c,m=r.indexOf("!"),g=r;if(-1===m){if(r=o(r,i),"require"===r)return d(e,t,n,i);if("exports"===r)return t;if("module"===r)return n;if(f.hasOwnProperty(r))return f[r];if(h[r])return u.apply(null,h[r]),f[r];if(e)return e(g);throw new Error("No module with ID: "+r)}return s=r.substring(0,m),r=r.substring(m+1,r.length),c=p(e,t,n,s,i),r=c.normalize?c.normalize(r,a(i)):o(r,i),f[r]?f[r]:(c.load(r,d(e,t,n,i),l(r),{}),f[r])},c.require=function(e){return f[e]?f[e]:h[e]?(u.apply(null,h[e]),f[e]):void 0},c.amd={},c}t.exports=i}).call(this,e("_process"),"/node_modules/handlebars/node_modules/source-map/node_modules/amdefine/amdefine.js")},{_process:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/browserify/node_modules/process/browser.js",path:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/browserify/node_modules/path-browserify/index.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/jquery/dist/jquery.js":[function(e,t){!function(e,n){"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=e.length,n=it.type(e);return"function"===n||it.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function r(e,t,n){if(it.isFunction(t))return it.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return it.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(pt.test(t))return it.filter(t,e,n);t=it.filter(t,e)}return it.grep(e,function(e){return it.inArray(e,t)>=0!==n})}function i(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}function s(e){var t=bt[e]={};return it.each(e.match(wt)||[],function(e,n){t[n]=!0}),t}function o(){ft.addEventListener?(ft.removeEventListener("DOMContentLoaded",a,!1),e.removeEventListener("load",a,!1)):(ft.detachEvent("onreadystatechange",a),e.detachEvent("onload",a))}function a(){(ft.addEventListener||"load"===event.type||"complete"===ft.readyState)&&(o(),it.ready())}function l(e,t,n){if(void 0===n&&1===e.nodeType){var r="data-"+t.replace(Ct,"-$1").toLowerCase();if(n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:kt.test(n)?it.parseJSON(n):n}catch(i){}it.data(e,t,n)}else n=void 0}return n}function u(e){var t;for(t in e)if(("data"!==t||!it.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function c(e,t,n,r){if(it.acceptData(e)){var i,s,o=it.expando,a=e.nodeType,l=a?it.cache:e,u=a?e[o]:e[o]&&o;if(u&&l[u]&&(r||l[u].data)||void 0!==n||"string"!=typeof t)return u||(u=a?e[o]=X.pop()||it.guid++:o),l[u]||(l[u]=a?{}:{toJSON:it.noop}),("object"==typeof t||"function"==typeof t)&&(r?l[u]=it.extend(l[u],t):l[u].data=it.extend(l[u].data,t)),s=l[u],r||(s.data||(s.data={}),s=s.data),void 0!==n&&(s[it.camelCase(t)]=n),"string"==typeof t?(i=s[t],null==i&&(i=s[it.camelCase(t)])):i=s,i}}function d(e,t,n){if(it.acceptData(e)){var r,i,s=e.nodeType,o=s?it.cache:e,a=s?e[it.expando]:it.expando;if(o[a]){if(t&&(r=n?o[a]:o[a].data)){it.isArray(t)?t=t.concat(it.map(t,it.camelCase)):t in r?t=[t]:(t=it.camelCase(t),t=t in r?[t]:t.split(" ")),i=t.length;for(;i--;)delete r[t[i]];if(n?!u(r):!it.isEmptyObject(r))return}(n||(delete o[a].data,u(o[a])))&&(s?it.cleanData([e],!0):nt.deleteExpando||o!=o.window?delete o[a]:o[a]=null)}}}function p(){return!0}function h(){return!1}function f(){try{return ft.activeElement}catch(e){}}function m(e){var t=Rt.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}function g(e,t){var n,r,i=0,s=typeof e.getElementsByTagName!==_t?e.getElementsByTagName(t||"*"):typeof e.querySelectorAll!==_t?e.querySelectorAll(t||"*"):void 0;if(!s)for(s=[],n=e.childNodes||e;null!=(r=n[i]);i++)!t||it.nodeName(r,t)?s.push(r):it.merge(s,g(r,t));return void 0===t||t&&it.nodeName(e,t)?it.merge([e],s):s}function v(e){Pt.test(e.type)&&(e.defaultChecked=e.checked)}function y(e,t){return it.nodeName(e,"table")&&it.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function w(e){return e.type=(null!==it.find.attr(e,"type"))+"/"+e.type,e}function b(e){var t=Gt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function S(e,t){for(var n,r=0;null!=(n=e[r]);r++)it._data(n,"globalEval",!t||it._data(t[r],"globalEval"))}function x(e,t){if(1===t.nodeType&&it.hasData(e)){var n,r,i,s=it._data(e),o=it._data(t,s),a=s.events;if(a){delete o.handle,o.events={};for(n in a)for(r=0,i=a[n].length;i>r;r++)it.event.add(t,n,a[n][r])}o.data&&(o.data=it.extend({},o.data))}}function _(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!nt.noCloneEvent&&t[it.expando]){i=it._data(t);for(r in i.events)it.removeEvent(t,r,i.handle);t.removeAttribute(it.expando)}"script"===n&&t.text!==e.text?(w(t).text=e.text,b(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),nt.html5Clone&&e.innerHTML&&!it.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Pt.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}}function k(t,n){var r,i=it(n.createElement(t)).appendTo(n.body),s=e.getDefaultComputedStyle&&(r=e.getDefaultComputedStyle(i[0]))?r.display:it.css(i[0],"display");return i.detach(),s}function C(e){var t=ft,n=Zt[e];return n||(n=k(e,t),"none"!==n&&n||(Qt=(Qt||it("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=(Qt[0].contentWindow||Qt[0].contentDocument).document,t.write(),t.close(),n=k(e,t),Qt.detach()),Zt[e]=n),n}function E(e,t){return{get:function(){var n=e();if(null!=n)return n?void delete this.get:(this.get=t).apply(this,arguments)}}}function j(e,t){if(t in e)return t;for(var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=hn.length;i--;)if(t=hn[i]+n,t in e)return t;return r}function N(e,t){for(var n,r,i,s=[],o=0,a=e.length;a>o;o++)r=e[o],r.style&&(s[o]=it._data(r,"olddisplay"),n=r.style.display,t?(s[o]||"none"!==n||(r.style.display=""),""===r.style.display&&Nt(r)&&(s[o]=it._data(r,"olddisplay",C(r.nodeName)))):(i=Nt(r),(n&&"none"!==n||!i)&&it._data(r,"olddisplay",i?n:it.css(r,"display"))));for(o=0;a>o;o++)r=e[o],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?s[o]||"":"none"));return e}function T(e,t,n){var r=un.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function P(e,t,n,r,i){for(var s=n===(r?"border":"content")?4:"width"===t?1:0,o=0;4>s;s+=2)"margin"===n&&(o+=it.css(e,n+jt[s],!0,i)),r?("content"===n&&(o-=it.css(e,"padding"+jt[s],!0,i)),"margin"!==n&&(o-=it.css(e,"border"+jt[s]+"Width",!0,i))):(o+=it.css(e,"padding"+jt[s],!0,i),"padding"!==n&&(o+=it.css(e,"border"+jt[s]+"Width",!0,i)));return o}function A(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,s=en(e),o=nt.boxSizing&&"border-box"===it.css(e,"boxSizing",!1,s);if(0>=i||null==i){if(i=tn(e,t,s),(0>i||null==i)&&(i=e.style[t]),rn.test(i))return i;r=o&&(nt.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+P(e,t,n||(o?"border":"content"),r,s)+"px"}function L(e,t,n,r,i){return new L.prototype.init(e,t,n,r,i)}function O(){return setTimeout(function(){fn=void 0}),fn=it.now()}function M(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=jt[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function D(e,t,n){for(var r,i=(bn[t]||[]).concat(bn["*"]),s=0,o=i.length;o>s;s++)if(r=i[s].call(n,t,e))return r}function R(e,t,n){var r,i,s,o,a,l,u,c,d=this,p={},h=e.style,f=e.nodeType&&Nt(e),m=it._data(e,"fxshow");n.queue||(a=it._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,it.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],u=it.css(e,"display"),c="none"===u?it._data(e,"olddisplay")||C(e.nodeName):u,"inline"===c&&"none"===it.css(e,"float")&&(nt.inlineBlockNeedsLayout&&"inline"!==C(e.nodeName)?h.zoom=1:h.display="inline-block")),n.overflow&&(h.overflow="hidden",nt.shrinkWrapBlocks()||d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],gn.exec(i)){if(delete t[r],s=s||"toggle"===i,i===(f?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;f=!0}p[r]=m&&m[r]||it.style(e,r)}else u=void 0;if(it.isEmptyObject(p))"inline"===("none"===u?C(e.nodeName):u)&&(h.display=u);else{m?"hidden"in m&&(f=m.hidden):m=it._data(e,"fxshow",{}),s&&(m.hidden=!f),f?it(e).show():d.done(function(){it(e).hide()}),d.done(function(){var t;it._removeData(e,"fxshow");for(t in p)it.style(e,t,p[t])});for(r in p)o=D(f?m[r]:0,r,d),r in m||(m[r]=o.start,f&&(o.end=o.start,o.start="width"===r||"height"===r?1:0))}}function H(e,t){var n,r,i,s,o;for(n in e)if(r=it.camelCase(n),i=t[r],s=e[n],it.isArray(s)&&(i=s[1],s=e[n]=s[0]),n!==r&&(e[r]=s,delete e[n]),o=it.cssHooks[r],o&&"expand"in o){s=o.expand(s),delete e[r];for(n in s)n in e||(e[n]=s[n],t[n]=i)}else t[r]=i}function I(e,t,n){var r,i,s=0,o=wn.length,a=it.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var t=fn||O(),n=Math.max(0,u.startTime+u.duration-t),r=n/u.duration||0,s=1-r,o=0,l=u.tweens.length;l>o;o++)u.tweens[o].run(s);return a.notifyWith(e,[u,s,n]),1>s&&l?n:(a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:it.extend({},t),opts:it.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:fn||O(),duration:n.duration,tweens:[],createTween:function(t,n){var r=it.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)u.tweens[n].run(1);return t?a.resolveWith(e,[u,t]):a.rejectWith(e,[u,t]),this}}),c=u.props;for(H(c,u.opts.specialEasing);o>s;s++)if(r=wn[s].call(u,e,c,u.opts))return r;return it.map(c,D,u),it.isFunction(u.opts.start)&&u.opts.start.call(e,u),it.fx.timer(it.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function B(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,s=t.toLowerCase().match(wt)||[];if(it.isFunction(n))for(;r=s[i++];)"+"===r.charAt(0)?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function $(e,t,n,r){function i(a){var l;return s[a]=!0,it.each(e[a]||[],function(e,a){var u=a(t,n,r);return"string"!=typeof u||o||s[u]?o?!(l=u):void 0:(t.dataTypes.unshift(u),i(u),!1)}),l}var s={},o=e===Wn;return i(t.dataTypes[0])||!s["*"]&&i("*")}function U(e,t){var n,r,i=it.ajaxSettings.flatOptions||{};for(r in t)void 0!==t[r]&&((i[r]?e:n||(n={}))[r]=t[r]);return n&&it.extend(!0,e,n),e}function q(e,t,n){for(var r,i,s,o,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)s=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){s=o;break}r||(r=o)}s=s||r}return s?(s!==l[0]&&l.unshift(s),n[s]):void 0}function F(e,t,n,r){var i,s,o,a,l,u={},c=e.dataTypes.slice();if(c[1])for(o in e.converters)u[o.toLowerCase()]=e.converters[o];for(s=c.shift();s;)if(e.responseFields[s]&&(n[e.responseFields[s]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=s,s=c.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(o=u[l+" "+s]||u["* "+s],!o)for(i in u)if(a=i.split(" "),a[1]===s&&(o=u[l+" "+a[0]]||u["* "+a[0]])){o===!0?o=u[i]:u[i]!==!0&&(s=a[0],c.unshift(a[1]));break}if(o!==!0)if(o&&e["throws"])t=o(t);else try{t=o(t)}catch(d){return{state:"parsererror",error:o?d:"No conversion from "+l+" to "+s}}}return{state:"success",data:t}}function W(e,t,n,r){var i;if(it.isArray(t))it.each(t,function(t,i){n||Xn.test(e)?r(e,i):W(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==it.type(t))r(e,t);else for(i in t)W(e+"["+i+"]",t[i],n,r)}function z(){try{return new e.XMLHttpRequest}catch(t){}}function V(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}function G(e){return it.isWindow(e)?e:9===e.nodeType?e.defaultView||e.parentWindow:!1}var X=[],K=X.slice,J=X.concat,Y=X.push,Q=X.indexOf,Z={},et=Z.toString,tt=Z.hasOwnProperty,nt={},rt="1.11.2",it=function(e,t){return new it.fn.init(e,t)},st=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ot=/^-ms-/,at=/-([\da-z])/gi,lt=function(e,t){return t.toUpperCase()};it.fn=it.prototype={jquery:rt,constructor:it,selector:"",length:0,toArray:function(){return K.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:K.call(this)},pushStack:function(e){var t=it.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return it.each(this,e,t)},map:function(e){return this.pushStack(it.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(K.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:Y,sort:X.sort,splice:X.splice},it.extend=it.fn.extend=function(){var e,t,n,r,i,s,o=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[a]||{},a++),"object"==typeof o||it.isFunction(o)||(o={}),a===l&&(o=this,a--);l>a;a++)if(null!=(i=arguments[a]))for(r in i)e=o[r],n=i[r],o!==n&&(u&&n&&(it.isPlainObject(n)||(t=it.isArray(n)))?(t?(t=!1,s=e&&it.isArray(e)?e:[]):s=e&&it.isPlainObject(e)?e:{},o[r]=it.extend(u,s,n)):void 0!==n&&(o[r]=n));return o},it.extend({expando:"jQuery"+(rt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===it.type(e)},isArray:Array.isArray||function(e){return"array"===it.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!it.isArray(e)&&e-parseFloat(e)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==it.type(e)||e.nodeType||it.isWindow(e))return!1;try{if(e.constructor&&!tt.call(e,"constructor")&&!tt.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}if(nt.ownLast)for(t in e)return tt.call(e,t);for(t in e);return void 0===t||tt.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?Z[et.call(e)]||"object":typeof e},globalEval:function(t){t&&it.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(ot,"ms-").replace(at,lt)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,r){var i,s=0,o=e.length,a=n(e);if(r){if(a)for(;o>s&&(i=t.apply(e[s],r),i!==!1);s++);else for(s in e)if(i=t.apply(e[s],r),i===!1)break}else if(a)for(;o>s&&(i=t.call(e[s],s,e[s]),i!==!1);s++);else for(s in e)if(i=t.call(e[s],s,e[s]),i===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(st,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?it.merge(r,"string"==typeof e?[e]:e):Y.call(r,e)),r},inArray:function(e,t,n){var r;if(t){if(Q)return Q.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;n>r;)e[i++]=t[r++];if(n!==n)for(;void 0!==t[r];)e[i++]=t[r++];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],s=0,o=e.length,a=!n;o>s;s++)r=!t(e[s],s),r!==a&&i.push(e[s]);return i},map:function(e,t,r){var i,s=0,o=e.length,a=n(e),l=[];if(a)for(;o>s;s++)i=t(e[s],s,r),null!=i&&l.push(i);else for(s in e)i=t(e[s],s,r),null!=i&&l.push(i);return J.apply([],l)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(i=e[t],t=e,e=i),it.isFunction(e)?(n=K.call(arguments,2),r=function(){return e.apply(t||this,n.concat(K.call(arguments)))},r.guid=e.guid=e.guid||it.guid++,r):void 0},now:function(){return+new Date},support:nt}),it.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){Z["[object "+t+"]"]=t.toLowerCase()});var ut=function(e){function t(e,t,n,r){var i,s,o,a,l,u,d,h,f,m;if((t?t.ownerDocument||t:$)!==L&&A(t),t=t||L,n=n||[],a=t.nodeType,"string"!=typeof e||!e||1!==a&&9!==a&&11!==a)return n;if(!r&&M){if(11!==a&&(i=yt.exec(e)))if(o=i[1]){if(9===a){if(s=t.getElementById(o),!s||!s.parentNode)return n;if(s.id===o)return n.push(s),n}else if(t.ownerDocument&&(s=t.ownerDocument.getElementById(o))&&I(t,s)&&s.id===o)return n.push(s),n}else{if(i[2])return Q.apply(n,t.getElementsByTagName(e)),n;if((o=i[3])&&S.getElementsByClassName)return Q.apply(n,t.getElementsByClassName(o)),n}if(S.qsa&&(!D||!D.test(e))){if(h=d=B,f=t,m=1!==a&&e,1===a&&"object"!==t.nodeName.toLowerCase()){for(u=C(e),(d=t.getAttribute("id"))?h=d.replace(bt,"\\$&"):t.setAttribute("id",h),h="[id='"+h+"'] ",l=u.length;l--;)u[l]=h+p(u[l]);f=wt.test(e)&&c(t.parentNode)||t,m=u.join(",")}if(m)try{return Q.apply(n,f.querySelectorAll(m)),n}catch(g){}finally{d||t.removeAttribute("id")}}}return j(e.replace(lt,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>x.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[B]=!0,e}function i(e){var t=L.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function s(e,t){for(var n=e.split("|"),r=e.length;r--;)x.attrHandle[n[r]]=t}function o(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||G)-(~e.sourceIndex||G);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function l(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function u(e){return r(function(t){return t=+t,r(function(n,r){for(var i,s=e([],n.length,t),o=s.length;o--;)n[i=s[o]]&&(n[i]=!(r[i]=n[i]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function d(){}function p(e){for(var t=0,n=e.length,r="";n>t;t++)r+=e[t].value;return r}function h(e,t,n){var r=t.dir,i=n&&"parentNode"===r,s=q++;return t.first?function(t,n,s){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,s)}:function(t,n,o){var a,l,u=[U,s];if(o){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,o))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(l=t[B]||(t[B]={}),(a=l[r])&&a[0]===U&&a[1]===s)return u[2]=a[2];if(l[r]=u,u[2]=e(t,n,o))return!0}}}function f(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function m(e,n,r){for(var i=0,s=n.length;s>i;i++)t(e,n[i],r);return r}function g(e,t,n,r,i){for(var s,o=[],a=0,l=e.length,u=null!=t;l>a;a++)(s=e[a])&&(!n||n(s,r,i))&&(o.push(s),u&&t.push(a));return o}function v(e,t,n,i,s,o){return i&&!i[B]&&(i=v(i)),s&&!s[B]&&(s=v(s,o)),r(function(r,o,a,l){var u,c,d,p=[],h=[],f=o.length,v=r||m(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?v:g(v,p,e,a,l),w=n?s||(r?e:f||i)?[]:o:y;if(n&&n(y,w,a,l),i)for(u=g(w,h),i(u,[],a,l),c=u.length;c--;)(d=u[c])&&(w[h[c]]=!(y[h[c]]=d));if(r){if(s||e){if(s){for(u=[],c=w.length;c--;)(d=w[c])&&u.push(y[c]=d);s(null,w=[],u,l)}for(c=w.length;c--;)(d=w[c])&&(u=s?et(r,d):p[c])>-1&&(r[u]=!(o[u]=d))}}else w=g(w===o?w.splice(f,w.length):w),s?s(null,o,w,l):Q.apply(o,w)})}function y(e){for(var t,n,r,i=e.length,s=x.relative[e[0].type],o=s||x.relative[" "],a=s?1:0,l=h(function(e){return e===t},o,!0),u=h(function(e){return et(t,e)>-1},o,!0),c=[function(e,n,r){var i=!s&&(r||n!==N)||((t=n).nodeType?l(e,n,r):u(e,n,r));return t=null,i}];i>a;a++)if(n=x.relative[e[a].type])c=[h(f(c),n)];else{if(n=x.filter[e[a].type].apply(null,e[a].matches),n[B]){for(r=++a;i>r&&!x.relative[e[r].type];r++);return v(a>1&&f(c),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(lt,"$1"),n,r>a&&y(e.slice(a,r)),i>r&&y(e=e.slice(r)),i>r&&p(e))}c.push(n)}return f(c)}function w(e,n){var i=n.length>0,s=e.length>0,o=function(r,o,a,l,u){var c,d,p,h=0,f="0",m=r&&[],v=[],y=N,w=r||s&&x.find.TAG("*",u),b=U+=null==y?1:Math.random()||.1,S=w.length;for(u&&(N=o!==L&&o);f!==S&&null!=(c=w[f]);f++){if(s&&c){for(d=0;p=e[d++];)if(p(c,o,a)){l.push(c);break}u&&(U=b)}i&&((c=!p&&c)&&h--,r&&m.push(c))}if(h+=f,i&&f!==h){for(d=0;p=n[d++];)p(m,v,o,a);if(r){if(h>0)for(;f--;)m[f]||v[f]||(v[f]=J.call(l));v=g(v)}Q.apply(l,v),u&&!r&&v.length>0&&h+n.length>1&&t.uniqueSort(l)}return u&&(U=b,N=y),m};return i?r(o):o}var b,S,x,_,k,C,E,j,N,T,P,A,L,O,M,D,R,H,I,B="sizzle"+1*new Date,$=e.document,U=0,q=0,F=n(),W=n(),z=n(),V=function(e,t){return e===t&&(P=!0),0},G=1<<31,X={}.hasOwnProperty,K=[],J=K.pop,Y=K.push,Q=K.push,Z=K.slice,et=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},tt="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",rt="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",it=rt.replace("w","w#"),st="\\["+nt+"*("+rt+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+it+"))|)"+nt+"*\\]",ot=":("+rt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+st+")*)|.*)\\)|)",at=new RegExp(nt+"+","g"),lt=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),ut=new RegExp("^"+nt+"*,"+nt+"*"),ct=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),dt=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),pt=new RegExp(ot),ht=new RegExp("^"+it+"$"),ft={ID:new RegExp("^#("+rt+")"),CLASS:new RegExp("^\\.("+rt+")"),TAG:new RegExp("^("+rt.replace("w","w*")+")"),ATTR:new RegExp("^"+st),PSEUDO:new RegExp("^"+ot),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+tt+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},mt=/^(?:input|select|textarea|button)$/i,gt=/^h\d$/i,vt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,wt=/[+~]/,bt=/'|\\/g,St=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),xt=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},_t=function(){A()};try{Q.apply(K=Z.call($.childNodes),$.childNodes),K[$.childNodes.length].nodeType}catch(kt){Q={apply:K.length?function(e,t){Y.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}S=t.support={},k=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},A=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:$;return r!==L&&9===r.nodeType&&r.documentElement?(L=r,O=r.documentElement,n=r.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",_t,!1):n.attachEvent&&n.attachEvent("onunload",_t)),M=!k(r),S.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),S.getElementsByTagName=i(function(e){return e.appendChild(r.createComment("")),!e.getElementsByTagName("*").length}),S.getElementsByClassName=vt.test(r.getElementsByClassName),S.getById=i(function(e){return O.appendChild(e).id=B,!r.getElementsByName||!r.getElementsByName(B).length}),S.getById?(x.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&M){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},x.filter.ID=function(e){var t=e.replace(St,xt);return function(e){return e.getAttribute("id")===t}}):(delete x.find.ID,x.filter.ID=function(e){var t=e.replace(St,xt);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),x.find.TAG=S.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):S.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,s=t.getElementsByTagName(e);if("*"===e){for(;n=s[i++];)1===n.nodeType&&r.push(n);return r}return s},x.find.CLASS=S.getElementsByClassName&&function(e,t){return M?t.getElementsByClassName(e):void 0},R=[],D=[],(S.qsa=vt.test(r.querySelectorAll))&&(i(function(e){O.appendChild(e).innerHTML="<a id='"+B+"'></a><select id='"+B+"-\f]' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&D.push("[*^$]="+nt+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||D.push("\\["+nt+"*(?:value|"+tt+")"),e.querySelectorAll("[id~="+B+"-]").length||D.push("~="),e.querySelectorAll(":checked").length||D.push(":checked"),e.querySelectorAll("a#"+B+"+*").length||D.push(".#.+[+~]")}),i(function(e){var t=r.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&D.push("name"+nt+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||D.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),D.push(",.*:")})),(S.matchesSelector=vt.test(H=O.matches||O.webkitMatchesSelector||O.mozMatchesSelector||O.oMatchesSelector||O.msMatchesSelector))&&i(function(e){S.disconnectedMatch=H.call(e,"div"),H.call(e,"[s!='']:x"),R.push("!=",ot)}),D=D.length&&new RegExp(D.join("|")),R=R.length&&new RegExp(R.join("|")),t=vt.test(O.compareDocumentPosition),I=t||vt.test(O.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},V=t?function(e,t){if(e===t)return P=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!S.sortDetached&&t.compareDocumentPosition(e)===n?e===r||e.ownerDocument===$&&I($,e)?-1:t===r||t.ownerDocument===$&&I($,t)?1:T?et(T,e)-et(T,t):0:4&n?-1:1)}:function(e,t){if(e===t)return P=!0,0;var n,i=0,s=e.parentNode,a=t.parentNode,l=[e],u=[t];if(!s||!a)return e===r?-1:t===r?1:s?-1:a?1:T?et(T,e)-et(T,t):0;if(s===a)return o(e,t);for(n=e;n=n.parentNode;)l.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;l[i]===u[i];)i++;return i?o(l[i],u[i]):l[i]===$?-1:u[i]===$?1:0},r):L},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==L&&A(e),n=n.replace(dt,"='$1']"),!(!S.matchesSelector||!M||R&&R.test(n)||D&&D.test(n)))try{var r=H.call(e,n);if(r||S.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,L,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==L&&A(e),I(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==L&&A(e);var n=x.attrHandle[t.toLowerCase()],r=n&&X.call(x.attrHandle,t.toLowerCase())?n(e,t,!M):void 0;return void 0!==r?r:S.attributes||!M?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(P=!S.detectDuplicates,T=!S.sortStable&&e.slice(0),e.sort(V),P){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return T=null,e},_=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=_(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=_(t);return n},x=t.selectors={cacheLength:50,createPseudo:r,match:ft,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(St,xt),e[3]=(e[3]||e[4]||e[5]||"").replace(St,xt),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return ft.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&pt.test(n)&&(t=C(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(St,xt).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=F[e+" "];return t||(t=new RegExp("(^|"+nt+")"+e+"("+nt+"|$)"))&&F(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var s=t.attr(i,e);return null==s?"!="===n:n?(s+="","="===n?s===r:"!="===n?s!==r:"^="===n?r&&0===s.indexOf(r):"*="===n?r&&s.indexOf(r)>-1:"$="===n?r&&s.slice(-r.length)===r:"~="===n?(" "+s.replace(at," ")+" ").indexOf(r)>-1:"|="===n?s===r||s.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(e,t,n,r,i){var s="nth"!==e.slice(0,3),o="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode
}:function(t,n,l){var u,c,d,p,h,f,m=s!==o?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a;if(g){if(s){for(;m;){for(d=t;d=d[m];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[o?g.firstChild:g.lastChild],o&&y){for(c=g[B]||(g[B]={}),u=c[e]||[],h=u[0]===U&&u[1],p=u[0]===U&&u[2],d=h&&g.childNodes[h];d=++h&&d&&d[m]||(p=h=0)||f.pop();)if(1===d.nodeType&&++p&&d===t){c[e]=[U,h,p];break}}else if(y&&(u=(t[B]||(t[B]={}))[e])&&u[0]===U)p=u[1];else for(;(d=++h&&d&&d[m]||(p=h=0)||f.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++p||(y&&((d[B]||(d[B]={}))[e]=[U,p]),d!==t)););return p-=i,p===r||p%r===0&&p/r>=0}}},PSEUDO:function(e,n){var i,s=x.pseudos[e]||x.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return s[B]?s(n):s.length>1?(i=[e,e,"",n],x.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=s(e,n),o=i.length;o--;)r=et(e,i[o]),e[r]=!(t[r]=i[o])}):function(e){return s(e,0,i)}):s}},pseudos:{not:r(function(e){var t=[],n=[],i=E(e.replace(lt,"$1"));return i[B]?r(function(e,t,n,r){for(var s,o=i(e,null,r,[]),a=e.length;a--;)(s=o[a])&&(e[a]=!(t[a]=s))}):function(e,r,s){return t[0]=e,i(t,null,s,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(St,xt),function(t){return(t.textContent||t.innerText||_(t)).indexOf(e)>-1}}),lang:r(function(e){return ht.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(St,xt).toLowerCase(),function(t){var n;do if(n=M?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===O},focus:function(e){return e===L.activeElement&&(!L.hasFocus||L.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return gt.test(e.nodeName)},input:function(e){return mt.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,n){return[0>n?n+t:n]}),even:u(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var r=0>n?n+t:n;--r>=0;)e.push(r);return e}),gt:u(function(e,t,n){for(var r=0>n?n+t:n;++r<t;)e.push(r);return e})}},x.pseudos.nth=x.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})x.pseudos[b]=l(b);return d.prototype=x.filters=x.pseudos,x.setFilters=new d,C=t.tokenize=function(e,n){var r,i,s,o,a,l,u,c=W[e+" "];if(c)return n?0:c.slice(0);for(a=e,l=[],u=x.preFilter;a;){(!r||(i=ut.exec(a)))&&(i&&(a=a.slice(i[0].length)||a),l.push(s=[])),r=!1,(i=ct.exec(a))&&(r=i.shift(),s.push({value:r,type:i[0].replace(lt," ")}),a=a.slice(r.length));for(o in x.filter)!(i=ft[o].exec(a))||u[o]&&!(i=u[o](i))||(r=i.shift(),s.push({value:r,type:o,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):W(e,l).slice(0)},E=t.compile=function(e,t){var n,r=[],i=[],s=z[e+" "];if(!s){for(t||(t=C(e)),n=t.length;n--;)s=y(t[n]),s[B]?r.push(s):i.push(s);s=z(e,w(i,r)),s.selector=e}return s},j=t.select=function(e,t,n,r){var i,s,o,a,l,u="function"==typeof e&&e,d=!r&&C(e=u.selector||e);if(n=n||[],1===d.length){if(s=d[0]=d[0].slice(0),s.length>2&&"ID"===(o=s[0]).type&&S.getById&&9===t.nodeType&&M&&x.relative[s[1].type]){if(t=(x.find.ID(o.matches[0].replace(St,xt),t)||[])[0],!t)return n;u&&(t=t.parentNode),e=e.slice(s.shift().value.length)}for(i=ft.needsContext.test(e)?0:s.length;i--&&(o=s[i],!x.relative[a=o.type]);)if((l=x.find[a])&&(r=l(o.matches[0].replace(St,xt),wt.test(s[0].type)&&c(t.parentNode)||t))){if(s.splice(i,1),e=r.length&&p(s),!e)return Q.apply(n,r),n;break}}return(u||E(e,d))(r,t,!M,n,wt.test(e)&&c(t.parentNode)||t),n},S.sortStable=B.split("").sort(V).join("")===B,S.detectDuplicates=!!P,A(),S.sortDetached=i(function(e){return 1&e.compareDocumentPosition(L.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||s("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),S.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||s("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||s(tt,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);it.find=ut,it.expr=ut.selectors,it.expr[":"]=it.expr.pseudos,it.unique=ut.uniqueSort,it.text=ut.getText,it.isXMLDoc=ut.isXML,it.contains=ut.contains;var ct=it.expr.match.needsContext,dt=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,pt=/^.[^:#\[\.,]*$/;it.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?it.find.matchesSelector(r,e)?[r]:[]:it.find.matches(e,it.grep(t,function(e){return 1===e.nodeType}))},it.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if("string"!=typeof e)return this.pushStack(it(e).filter(function(){for(t=0;i>t;t++)if(it.contains(r[t],this))return!0}));for(t=0;i>t;t++)it.find(e,r[t],n);return n=this.pushStack(i>1?it.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&ct.test(e)?it(e):e||[],!1).length}});var ht,ft=e.document,mt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,gt=it.fn.init=function(e,t){var n,r;if(!e)return this;if("string"==typeof e){if(n="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:mt.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||ht).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof it?t[0]:t,it.merge(this,it.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:ft,!0)),dt.test(n[1])&&it.isPlainObject(t))for(n in t)it.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}if(r=ft.getElementById(n[2]),r&&r.parentNode){if(r.id!==n[2])return ht.find(e);this.length=1,this[0]=r}return this.context=ft,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):it.isFunction(e)?"undefined"!=typeof ht.ready?ht.ready(e):e(it):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),it.makeArray(e,this))};gt.prototype=it.fn,ht=it(ft);var vt=/^(?:parents|prev(?:Until|All))/,yt={children:!0,contents:!0,next:!0,prev:!0};it.extend({dir:function(e,t,n){for(var r=[],i=e[t];i&&9!==i.nodeType&&(void 0===n||1!==i.nodeType||!it(i).is(n));)1===i.nodeType&&r.push(i),i=i[t];return r},sibling:function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}),it.fn.extend({has:function(e){var t,n=it(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(it.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,s=[],o=ct.test(e)||"string"!=typeof e?it(e,t||this.context):0;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&it.find.matchesSelector(n,e))){s.push(n);break}return this.pushStack(s.length>1?it.unique(s):s)},index:function(e){return e?"string"==typeof e?it.inArray(this[0],it(e)):it.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(it.unique(it.merge(this.get(),it(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),it.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return it.dir(e,"parentNode")},parentsUntil:function(e,t,n){return it.dir(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return it.dir(e,"nextSibling")},prevAll:function(e){return it.dir(e,"previousSibling")},nextUntil:function(e,t,n){return it.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return it.dir(e,"previousSibling",n)},siblings:function(e){return it.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return it.sibling(e.firstChild)},contents:function(e){return it.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:it.merge([],e.childNodes)}},function(e,t){it.fn[e]=function(n,r){var i=it.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=it.filter(r,i)),this.length>1&&(yt[e]||(i=it.unique(i)),vt.test(e)&&(i=i.reverse())),this.pushStack(i)}});var wt=/\S+/g,bt={};it.Callbacks=function(e){e="string"==typeof e?bt[e]||s(e):it.extend({},e);var t,n,r,i,o,a,l=[],u=!e.once&&[],c=function(s){for(n=e.memory&&s,r=!0,o=a||0,a=0,i=l.length,t=!0;l&&i>o;o++)if(l[o].apply(s[0],s[1])===!1&&e.stopOnFalse){n=!1;break}t=!1,l&&(u?u.length&&c(u.shift()):n?l=[]:d.disable())},d={add:function(){if(l){var r=l.length;!function s(t){it.each(t,function(t,n){var r=it.type(n);"function"===r?e.unique&&d.has(n)||l.push(n):n&&n.length&&"string"!==r&&s(n)})}(arguments),t?i=l.length:n&&(a=r,c(n))}return this},remove:function(){return l&&it.each(arguments,function(e,n){for(var r;(r=it.inArray(n,l,r))>-1;)l.splice(r,1),t&&(i>=r&&i--,o>=r&&o--)}),this},has:function(e){return e?it.inArray(e,l)>-1:!(!l||!l.length)},empty:function(){return l=[],i=0,this},disable:function(){return l=u=n=void 0,this},disabled:function(){return!l},lock:function(){return u=void 0,n||d.disable(),this},locked:function(){return!u},fireWith:function(e,n){return!l||r&&!u||(n=n||[],n=[e,n.slice?n.slice():n],t?u.push(n):c(n)),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!r}};return d},it.extend({Deferred:function(e){var t=[["resolve","done",it.Callbacks("once memory"),"resolved"],["reject","fail",it.Callbacks("once memory"),"rejected"],["notify","progress",it.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return it.Deferred(function(n){it.each(t,function(t,s){var o=it.isFunction(e[t])&&e[t];i[s[1]](function(){var e=o&&o.apply(this,arguments);e&&it.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[s[0]+"With"](this===r?n.promise():this,o?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?it.extend(e,r):r}},i={};return r.pipe=r.then,it.each(t,function(e,s){var o=s[2],a=s[3];r[s[1]]=o.add,a&&o.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[s[0]]=function(){return i[s[0]+"With"](this===i?r:this,arguments),this},i[s[0]+"With"]=o.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,s=K.call(arguments),o=s.length,a=1!==o||e&&it.isFunction(e.promise)?o:0,l=1===a?e:it.Deferred(),u=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?K.call(arguments):i,r===t?l.notifyWith(n,r):--a||l.resolveWith(n,r)}};if(o>1)for(t=new Array(o),n=new Array(o),r=new Array(o);o>i;i++)s[i]&&it.isFunction(s[i].promise)?s[i].promise().done(u(i,r,s)).fail(l.reject).progress(u(i,n,t)):--a;return a||l.resolveWith(r,s),l.promise()}});var St;it.fn.ready=function(e){return it.ready.promise().done(e),this},it.extend({isReady:!1,readyWait:1,holdReady:function(e){e?it.readyWait++:it.ready(!0)},ready:function(e){if(e===!0?!--it.readyWait:!it.isReady){if(!ft.body)return setTimeout(it.ready);it.isReady=!0,e!==!0&&--it.readyWait>0||(St.resolveWith(ft,[it]),it.fn.triggerHandler&&(it(ft).triggerHandler("ready"),it(ft).off("ready")))}}}),it.ready.promise=function(t){if(!St)if(St=it.Deferred(),"complete"===ft.readyState)setTimeout(it.ready);else if(ft.addEventListener)ft.addEventListener("DOMContentLoaded",a,!1),e.addEventListener("load",a,!1);else{ft.attachEvent("onreadystatechange",a),e.attachEvent("onload",a);var n=!1;try{n=null==e.frameElement&&ft.documentElement}catch(r){}n&&n.doScroll&&!function i(){if(!it.isReady){try{n.doScroll("left")}catch(e){return setTimeout(i,50)}o(),it.ready()}}()}return St.promise(t)};var xt,_t="undefined";for(xt in it(nt))break;nt.ownLast="0"!==xt,nt.inlineBlockNeedsLayout=!1,it(function(){var e,t,n,r;n=ft.getElementsByTagName("body")[0],n&&n.style&&(t=ft.createElement("div"),r=ft.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),typeof t.style.zoom!==_t&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",nt.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(r))}),function(){var e=ft.createElement("div");if(null==nt.deleteExpando){nt.deleteExpando=!0;try{delete e.test}catch(t){nt.deleteExpando=!1}}e=null}(),it.acceptData=function(e){var t=it.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return 1!==n&&9!==n?!1:!t||t!==!0&&e.getAttribute("classid")===t};var kt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ct=/([A-Z])/g;it.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return e=e.nodeType?it.cache[e[it.expando]]:e[it.expando],!!e&&!u(e)},data:function(e,t,n){return c(e,t,n)},removeData:function(e,t){return d(e,t)},_data:function(e,t,n){return c(e,t,n,!0)},_removeData:function(e,t){return d(e,t,!0)}}),it.fn.extend({data:function(e,t){var n,r,i,s=this[0],o=s&&s.attributes;if(void 0===e){if(this.length&&(i=it.data(s),1===s.nodeType&&!it._data(s,"parsedAttrs"))){for(n=o.length;n--;)o[n]&&(r=o[n].name,0===r.indexOf("data-")&&(r=it.camelCase(r.slice(5)),l(s,r,i[r])));it._data(s,"parsedAttrs",!0)}return i}return"object"==typeof e?this.each(function(){it.data(this,e)}):arguments.length>1?this.each(function(){it.data(this,e,t)}):s?l(s,e,it.data(s,e)):void 0},removeData:function(e){return this.each(function(){it.removeData(this,e)})}}),it.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=it._data(e,t),n&&(!r||it.isArray(n)?r=it._data(e,t,it.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=it.queue(e,t),r=n.length,i=n.shift(),s=it._queueHooks(e,t),o=function(){it.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete s.stop,i.call(e,o,s)),!r&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return it._data(e,n)||it._data(e,n,{empty:it.Callbacks("once memory").add(function(){it._removeData(e,t+"queue"),it._removeData(e,n)})})}}),it.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?it.queue(this[0],e):void 0===t?this:this.each(function(){var n=it.queue(this,e,t);it._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&it.dequeue(this,e)})},dequeue:function(e){return this.each(function(){it.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=it.Deferred(),s=this,o=this.length,a=function(){--r||i.resolveWith(s,[s])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)n=it._data(s[o],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var Et=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,jt=["Top","Right","Bottom","Left"],Nt=function(e,t){return e=t||e,"none"===it.css(e,"display")||!it.contains(e.ownerDocument,e)},Tt=it.access=function(e,t,n,r,i,s,o){var a=0,l=e.length,u=null==n;if("object"===it.type(n)){i=!0;for(a in n)it.access(e,t,a,n[a],!0,s,o)}else if(void 0!==r&&(i=!0,it.isFunction(r)||(o=!0),u&&(o?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(it(e),n)})),t))for(;l>a;a++)t(e[a],n,o?r:r.call(e[a],a,t(e[a],n)));return i?e:u?t.call(e):l?t(e[0],n):s},Pt=/^(?:checkbox|radio)$/i;!function(){var e=ft.createElement("input"),t=ft.createElement("div"),n=ft.createDocumentFragment();if(t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",nt.leadingWhitespace=3===t.firstChild.nodeType,nt.tbody=!t.getElementsByTagName("tbody").length,nt.htmlSerialize=!!t.getElementsByTagName("link").length,nt.html5Clone="<:nav></:nav>"!==ft.createElement("nav").cloneNode(!0).outerHTML,e.type="checkbox",e.checked=!0,n.appendChild(e),nt.appendChecked=e.checked,t.innerHTML="<textarea>x</textarea>",nt.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue,n.appendChild(t),t.innerHTML="<input type='radio' checked='checked' name='t'/>",nt.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,nt.noCloneEvent=!0,t.attachEvent&&(t.attachEvent("onclick",function(){nt.noCloneEvent=!1}),t.cloneNode(!0).click()),null==nt.deleteExpando){nt.deleteExpando=!0;try{delete t.test}catch(r){nt.deleteExpando=!1}}}(),function(){var t,n,r=ft.createElement("div");for(t in{submit:!0,change:!0,focusin:!0})n="on"+t,(nt[t+"Bubbles"]=n in e)||(r.setAttribute(n,"t"),nt[t+"Bubbles"]=r.attributes[n].expando===!1);r=null}();var At=/^(?:input|select|textarea)$/i,Lt=/^key/,Ot=/^(?:mouse|pointer|contextmenu)|click/,Mt=/^(?:focusinfocus|focusoutblur)$/,Dt=/^([^.]*)(?:\.(.+)|)$/;it.event={global:{},add:function(e,t,n,r,i){var s,o,a,l,u,c,d,p,h,f,m,g=it._data(e);if(g){for(n.handler&&(l=n,n=l.handler,i=l.selector),n.guid||(n.guid=it.guid++),(o=g.events)||(o=g.events={}),(c=g.handle)||(c=g.handle=function(e){return typeof it===_t||e&&it.event.triggered===e.type?void 0:it.event.dispatch.apply(c.elem,arguments)},c.elem=e),t=(t||"").match(wt)||[""],a=t.length;a--;)s=Dt.exec(t[a])||[],h=m=s[1],f=(s[2]||"").split(".").sort(),h&&(u=it.event.special[h]||{},h=(i?u.delegateType:u.bindType)||h,u=it.event.special[h]||{},d=it.extend({type:h,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&it.expr.match.needsContext.test(i),namespace:f.join(".")},l),(p=o[h])||(p=o[h]=[],p.delegateCount=0,u.setup&&u.setup.call(e,r,f,c)!==!1||(e.addEventListener?e.addEventListener(h,c,!1):e.attachEvent&&e.attachEvent("on"+h,c))),u.add&&(u.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,d):p.push(d),it.event.global[h]=!0);e=null}},remove:function(e,t,n,r,i){var s,o,a,l,u,c,d,p,h,f,m,g=it.hasData(e)&&it._data(e);if(g&&(c=g.events)){for(t=(t||"").match(wt)||[""],u=t.length;u--;)if(a=Dt.exec(t[u])||[],h=m=a[1],f=(a[2]||"").split(".").sort(),h){for(d=it.event.special[h]||{},h=(r?d.delegateType:d.bindType)||h,p=c[h]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=s=p.length;s--;)o=p[s],!i&&m!==o.origType||n&&n.guid!==o.guid||a&&!a.test(o.namespace)||r&&r!==o.selector&&("**"!==r||!o.selector)||(p.splice(s,1),o.selector&&p.delegateCount--,d.remove&&d.remove.call(e,o));l&&!p.length&&(d.teardown&&d.teardown.call(e,f,g.handle)!==!1||it.removeEvent(e,h,g.handle),delete c[h])}else for(h in c)it.event.remove(e,h+t[u],n,r,!0);it.isEmptyObject(c)&&(delete g.handle,it._removeData(e,"events"))}},trigger:function(t,n,r,i){var s,o,a,l,u,c,d,p=[r||ft],h=tt.call(t,"type")?t.type:t,f=tt.call(t,"namespace")?t.namespace.split("."):[];if(a=c=r=r||ft,3!==r.nodeType&&8!==r.nodeType&&!Mt.test(h+it.event.triggered)&&(h.indexOf(".")>=0&&(f=h.split("."),h=f.shift(),f.sort()),o=h.indexOf(":")<0&&"on"+h,t=t[it.expando]?t:new it.Event(h,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=f.join("."),t.namespace_re=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:it.makeArray(n,[t]),u=it.event.special[h]||{},i||!u.trigger||u.trigger.apply(r,n)!==!1)){if(!i&&!u.noBubble&&!it.isWindow(r)){for(l=u.delegateType||h,Mt.test(l+h)||(a=a.parentNode);a;a=a.parentNode)p.push(a),c=a;c===(r.ownerDocument||ft)&&p.push(c.defaultView||c.parentWindow||e)}for(d=0;(a=p[d++])&&!t.isPropagationStopped();)t.type=d>1?l:u.bindType||h,s=(it._data(a,"events")||{})[t.type]&&it._data(a,"handle"),s&&s.apply(a,n),s=o&&a[o],s&&s.apply&&it.acceptData(a)&&(t.result=s.apply(a,n),t.result===!1&&t.preventDefault());if(t.type=h,!i&&!t.isDefaultPrevented()&&(!u._default||u._default.apply(p.pop(),n)===!1)&&it.acceptData(r)&&o&&r[h]&&!it.isWindow(r)){c=r[o],c&&(r[o]=null),it.event.triggered=h;try{r[h]()}catch(m){}it.event.triggered=void 0,c&&(r[o]=c)}return t.result}},dispatch:function(e){e=it.event.fix(e);var t,n,r,i,s,o=[],a=K.call(arguments),l=(it._data(this,"events")||{})[e.type]||[],u=it.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,e)!==!1){for(o=it.event.handlers.call(this,e,l),t=0;(i=o[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,s=0;(r=i.handlers[s++])&&!e.isImmediatePropagationStopped();)(!e.namespace_re||e.namespace_re.test(r.namespace))&&(e.handleObj=r,e.data=r.data,n=((it.event.special[r.origType]||{}).handle||r.handler).apply(i.elem,a),void 0!==n&&(e.result=n)===!1&&(e.preventDefault(),e.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,s,o=[],a=t.delegateCount,l=e.target;if(a&&l.nodeType&&(!e.button||"click"!==e.type))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==e.type)){for(i=[],s=0;a>s;s++)r=t[s],n=r.selector+" ",void 0===i[n]&&(i[n]=r.needsContext?it(n,this).index(l)>=0:it.find(n,this,null,[l]).length),i[n]&&i.push(r);i.length&&o.push({elem:l,handlers:i})}return a<t.length&&o.push({elem:this,handlers:t.slice(a)}),o},fix:function(e){if(e[it.expando])return e;var t,n,r,i=e.type,s=e,o=this.fixHooks[i];for(o||(this.fixHooks[i]=o=Ot.test(i)?this.mouseHooks:Lt.test(i)?this.keyHooks:{}),r=o.props?this.props.concat(o.props):this.props,e=new it.Event(s),t=r.length;t--;)n=r[t],e[n]=s[n];return e.target||(e.target=s.srcElement||ft),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,o.filter?o.filter(e,s):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,s=t.button,o=t.fromElement;return null==e.pageX&&null!=t.clientX&&(r=e.target.ownerDocument||ft,i=r.documentElement,n=r.body,e.pageX=t.clientX+(i&&i.scrollLeft||n&&n.scrollLeft||0)-(i&&i.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(i&&i.scrollTop||n&&n.scrollTop||0)-(i&&i.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&o&&(e.relatedTarget=o===e.target?t.toElement:o),e.which||void 0===s||(e.which=1&s?1:2&s?3:4&s?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==f()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){return this===f()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return it.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(e){return it.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=it.extend(new it.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?it.event.trigger(i,null,t):it.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},it.removeEvent=ft.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r="on"+t;e.detachEvent&&(typeof e[r]===_t&&(e[r]=null),e.detachEvent(r,n))},it.Event=function(e,t){return this instanceof it.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?p:h):this.type=e,t&&it.extend(this,t),this.timeStamp=e&&e.timeStamp||it.now(),void(this[it.expando]=!0)):new it.Event(e,t)},it.Event.prototype={isDefaultPrevented:h,isPropagationStopped:h,isImmediatePropagationStopped:h,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=p,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=p,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=p,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},it.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){it.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,s=e.handleObj;return(!i||i!==r&&!it.contains(r,i))&&(e.type=s.origType,n=s.handler.apply(this,arguments),e.type=t),n}}}),nt.submitBubbles||(it.event.special.submit={setup:function(){return it.nodeName(this,"form")?!1:void it.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=it.nodeName(t,"input")||it.nodeName(t,"button")?t.form:void 0;n&&!it._data(n,"submitBubbles")&&(it.event.add(n,"submit._submit",function(e){e._submit_bubble=!0}),it._data(n,"submitBubbles",!0))})},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&it.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){return it.nodeName(this,"form")?!1:void it.event.remove(this,"._submit")}}),nt.changeBubbles||(it.event.special.change={setup:function(){return At.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(it.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._just_changed=!0)}),it.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),it.event.simulate("change",this,e,!0)})),!1):void it.event.add(this,"beforeactivate._change",function(e){var t=e.target;At.test(t.nodeName)&&!it._data(t,"changeBubbles")&&(it.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||it.event.simulate("change",this.parentNode,e,!0)}),it._data(t,"changeBubbles",!0))})},handle:function(e){var t=e.target;return this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type?e.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return it.event.remove(this,"._change"),!At.test(this.nodeName)}}),nt.focusinBubbles||it.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){it.event.simulate(t,e.target,it.event.fix(e),!0)};it.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=it._data(r,t);i||r.addEventListener(e,n,!0),it._data(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=it._data(r,t)-1;i?it._data(r,t,i):(r.removeEventListener(e,n,!0),it._removeData(r,t))}}}),it.fn.extend({on:function(e,t,n,r,i){var s,o;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=void 0);for(s in e)this.on(s,t,n,e[s],i);return this}if(null==n&&null==r?(r=t,n=t=void 0):null==r&&("string"==typeof t?(r=n,n=void 0):(r=n,n=t,t=void 0)),r===!1)r=h;else if(!r)return this;return 1===i&&(o=r,r=function(e){return it().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=it.guid++)),this.each(function(){it.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,it(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=void 0),n===!1&&(n=h),this.each(function(){it.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){it.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?it.event.trigger(e,t,n,!0):void 0}});var Rt="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",Ht=/ jQuery\d+="(?:null|\d+)"/g,It=new RegExp("<(?:"+Rt+")[\\s/>]","i"),Bt=/^\s+/,$t=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Ut=/<([\w:]+)/,qt=/<tbody/i,Ft=/<|&#?\w+;/,Wt=/<(?:script|style|link)/i,zt=/checked\s*(?:[^=]|=\s*.checked.)/i,Vt=/^$|\/(?:java|ecma)script/i,Gt=/^true\/(.*)/,Xt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Kt={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:nt.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},Jt=m(ft),Yt=Jt.appendChild(ft.createElement("div"));Kt.optgroup=Kt.option,Kt.tbody=Kt.tfoot=Kt.colgroup=Kt.caption=Kt.thead,Kt.th=Kt.td,it.extend({clone:function(e,t,n){var r,i,s,o,a,l=it.contains(e.ownerDocument,e);if(nt.html5Clone||it.isXMLDoc(e)||!It.test("<"+e.nodeName+">")?s=e.cloneNode(!0):(Yt.innerHTML=e.outerHTML,Yt.removeChild(s=Yt.firstChild)),!(nt.noCloneEvent&&nt.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||it.isXMLDoc(e)))for(r=g(s),a=g(e),o=0;null!=(i=a[o]);++o)r[o]&&_(i,r[o]);if(t)if(n)for(a=a||g(e),r=r||g(s),o=0;null!=(i=a[o]);o++)x(i,r[o]);else x(e,s);return r=g(s,"script"),r.length>0&&S(r,!l&&g(e,"script")),r=a=i=null,s},buildFragment:function(e,t,n,r){for(var i,s,o,a,l,u,c,d=e.length,p=m(t),h=[],f=0;d>f;f++)if(s=e[f],s||0===s)if("object"===it.type(s))it.merge(h,s.nodeType?[s]:s);else if(Ft.test(s)){for(a=a||p.appendChild(t.createElement("div")),l=(Ut.exec(s)||["",""])[1].toLowerCase(),c=Kt[l]||Kt._default,a.innerHTML=c[1]+s.replace($t,"<$1></$2>")+c[2],i=c[0];i--;)a=a.lastChild;if(!nt.leadingWhitespace&&Bt.test(s)&&h.push(t.createTextNode(Bt.exec(s)[0])),!nt.tbody)for(s="table"!==l||qt.test(s)?"<table>"!==c[1]||qt.test(s)?0:a:a.firstChild,i=s&&s.childNodes.length;i--;)it.nodeName(u=s.childNodes[i],"tbody")&&!u.childNodes.length&&s.removeChild(u);for(it.merge(h,a.childNodes),a.textContent="";a.firstChild;)a.removeChild(a.firstChild);a=p.lastChild}else h.push(t.createTextNode(s));for(a&&p.removeChild(a),nt.appendChecked||it.grep(g(h,"input"),v),f=0;s=h[f++];)if((!r||-1===it.inArray(s,r))&&(o=it.contains(s.ownerDocument,s),a=g(p.appendChild(s),"script"),o&&S(a),n))for(i=0;s=a[i++];)Vt.test(s.type||"")&&n.push(s);return a=null,p},cleanData:function(e,t){for(var n,r,i,s,o=0,a=it.expando,l=it.cache,u=nt.deleteExpando,c=it.event.special;null!=(n=e[o]);o++)if((t||it.acceptData(n))&&(i=n[a],s=i&&l[i])){if(s.events)for(r in s.events)c[r]?it.event.remove(n,r):it.removeEvent(n,r,s.handle);l[i]&&(delete l[i],u?delete n[a]:typeof n.removeAttribute!==_t?n.removeAttribute(a):n[a]=null,X.push(i))}}}),it.fn.extend({text:function(e){return Tt(this,function(e){return void 0===e?it.text(this):this.empty().append((this[0]&&this[0].ownerDocument||ft).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=y(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=y(this,e);t.insertBefore(e,t.firstChild)
}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){for(var n,r=e?it.filter(e,this):this,i=0;null!=(n=r[i]);i++)t||1!==n.nodeType||it.cleanData(g(n)),n.parentNode&&(t&&it.contains(n.ownerDocument,n)&&S(g(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&it.cleanData(g(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&it.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return it.clone(this,e,t)})},html:function(e){return Tt(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(Ht,""):void 0;if(!("string"!=typeof e||Wt.test(e)||!nt.htmlSerialize&&It.test(e)||!nt.leadingWhitespace&&Bt.test(e)||Kt[(Ut.exec(e)||["",""])[1].toLowerCase()])){e=e.replace($t,"<$1></$2>");try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(it.cleanData(g(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=arguments[0];return this.domManip(arguments,function(t){e=this.parentNode,it.cleanData(g(this)),e&&e.replaceChild(t,this)}),e&&(e.length||e.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t){e=J.apply([],e);var n,r,i,s,o,a,l=0,u=this.length,c=this,d=u-1,p=e[0],h=it.isFunction(p);if(h||u>1&&"string"==typeof p&&!nt.checkClone&&zt.test(p))return this.each(function(n){var r=c.eq(n);h&&(e[0]=p.call(this,n,r.html())),r.domManip(e,t)});if(u&&(a=it.buildFragment(e,this[0].ownerDocument,!1,this),n=a.firstChild,1===a.childNodes.length&&(a=n),n)){for(s=it.map(g(a,"script"),w),i=s.length;u>l;l++)r=a,l!==d&&(r=it.clone(r,!0,!0),i&&it.merge(s,g(r,"script"))),t.call(this[l],r,l);if(i)for(o=s[s.length-1].ownerDocument,it.map(s,b),l=0;i>l;l++)r=s[l],Vt.test(r.type||"")&&!it._data(r,"globalEval")&&it.contains(o,r)&&(r.src?it._evalUrl&&it._evalUrl(r.src):it.globalEval((r.text||r.textContent||r.innerHTML||"").replace(Xt,"")));a=n=null}return this}}),it.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){it.fn[e]=function(e){for(var n,r=0,i=[],s=it(e),o=s.length-1;o>=r;r++)n=r===o?this:this.clone(!0),it(s[r])[t](n),Y.apply(i,n.get());return this.pushStack(i)}});var Qt,Zt={};!function(){var e;nt.shrinkWrapBlocks=function(){if(null!=e)return e;e=!1;var t,n,r;return n=ft.getElementsByTagName("body")[0],n&&n.style?(t=ft.createElement("div"),r=ft.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),typeof t.style.zoom!==_t&&(t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",t.appendChild(ft.createElement("div")).style.width="5px",e=3!==t.offsetWidth),n.removeChild(r),e):void 0}}();var en,tn,nn=/^margin/,rn=new RegExp("^("+Et+")(?!px)[a-z%]+$","i"),sn=/^(top|right|bottom|left)$/;e.getComputedStyle?(en=function(t){return t.ownerDocument.defaultView.opener?t.ownerDocument.defaultView.getComputedStyle(t,null):e.getComputedStyle(t,null)},tn=function(e,t,n){var r,i,s,o,a=e.style;return n=n||en(e),o=n?n.getPropertyValue(t)||n[t]:void 0,n&&(""!==o||it.contains(e.ownerDocument,e)||(o=it.style(e,t)),rn.test(o)&&nn.test(t)&&(r=a.width,i=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=n.width,a.width=r,a.minWidth=i,a.maxWidth=s)),void 0===o?o:o+""}):ft.documentElement.currentStyle&&(en=function(e){return e.currentStyle},tn=function(e,t,n){var r,i,s,o,a=e.style;return n=n||en(e),o=n?n[t]:void 0,null==o&&a&&a[t]&&(o=a[t]),rn.test(o)&&!sn.test(t)&&(r=a.left,i=e.runtimeStyle,s=i&&i.left,s&&(i.left=e.currentStyle.left),a.left="fontSize"===t?"1em":o,o=a.pixelLeft+"px",a.left=r,s&&(i.left=s)),void 0===o?o:o+""||"auto"}),function(){function t(){var t,n,r,i;n=ft.getElementsByTagName("body")[0],n&&n.style&&(t=ft.createElement("div"),r=ft.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),t.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",s=o=!1,l=!0,e.getComputedStyle&&(s="1%"!==(e.getComputedStyle(t,null)||{}).top,o="4px"===(e.getComputedStyle(t,null)||{width:"4px"}).width,i=t.appendChild(ft.createElement("div")),i.style.cssText=t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",t.style.width="1px",l=!parseFloat((e.getComputedStyle(i,null)||{}).marginRight),t.removeChild(i)),t.innerHTML="<table><tr><td></td><td>t</td></tr></table>",i=t.getElementsByTagName("td"),i[0].style.cssText="margin:0;border:0;padding:0;display:none",a=0===i[0].offsetHeight,a&&(i[0].style.display="",i[1].style.display="none",a=0===i[0].offsetHeight),n.removeChild(r))}var n,r,i,s,o,a,l;n=ft.createElement("div"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",i=n.getElementsByTagName("a")[0],r=i&&i.style,r&&(r.cssText="float:left;opacity:.5",nt.opacity="0.5"===r.opacity,nt.cssFloat=!!r.cssFloat,n.style.backgroundClip="content-box",n.cloneNode(!0).style.backgroundClip="",nt.clearCloneStyle="content-box"===n.style.backgroundClip,nt.boxSizing=""===r.boxSizing||""===r.MozBoxSizing||""===r.WebkitBoxSizing,it.extend(nt,{reliableHiddenOffsets:function(){return null==a&&t(),a},boxSizingReliable:function(){return null==o&&t(),o},pixelPosition:function(){return null==s&&t(),s},reliableMarginRight:function(){return null==l&&t(),l}}))}(),it.swap=function(e,t,n,r){var i,s,o={};for(s in t)o[s]=e.style[s],e.style[s]=t[s];i=n.apply(e,r||[]);for(s in t)e.style[s]=o[s];return i};var on=/alpha\([^)]*\)/i,an=/opacity\s*=\s*([^)]*)/,ln=/^(none|table(?!-c[ea]).+)/,un=new RegExp("^("+Et+")(.*)$","i"),cn=new RegExp("^([+-])=("+Et+")","i"),dn={position:"absolute",visibility:"hidden",display:"block"},pn={letterSpacing:"0",fontWeight:"400"},hn=["Webkit","O","Moz","ms"];it.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=tn(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":nt.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,s,o,a=it.camelCase(t),l=e.style;if(t=it.cssProps[a]||(it.cssProps[a]=j(l,a)),o=it.cssHooks[t]||it.cssHooks[a],void 0===n)return o&&"get"in o&&void 0!==(i=o.get(e,!1,r))?i:l[t];if(s=typeof n,"string"===s&&(i=cn.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(it.css(e,t)),s="number"),null!=n&&n===n&&("number"!==s||it.cssNumber[a]||(n+="px"),nt.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),!(o&&"set"in o&&void 0===(n=o.set(e,n,r)))))try{l[t]=n}catch(u){}}},css:function(e,t,n,r){var i,s,o,a=it.camelCase(t);return t=it.cssProps[a]||(it.cssProps[a]=j(e.style,a)),o=it.cssHooks[t]||it.cssHooks[a],o&&"get"in o&&(s=o.get(e,!0,n)),void 0===s&&(s=tn(e,t,r)),"normal"===s&&t in pn&&(s=pn[t]),""===n||n?(i=parseFloat(s),n===!0||it.isNumeric(i)?i||0:s):s}}),it.each(["height","width"],function(e,t){it.cssHooks[t]={get:function(e,n,r){return n?ln.test(it.css(e,"display"))&&0===e.offsetWidth?it.swap(e,dn,function(){return A(e,t,r)}):A(e,t,r):void 0},set:function(e,n,r){var i=r&&en(e);return T(e,n,r?P(e,t,r,nt.boxSizing&&"border-box"===it.css(e,"boxSizing",!1,i),i):0)}}}),nt.opacity||(it.cssHooks.opacity={get:function(e,t){return an.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=it.isNumeric(t)?"alpha(opacity="+100*t+")":"",s=r&&r.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===it.trim(s.replace(on,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=on.test(s)?s.replace(on,i):s+" "+i)}}),it.cssHooks.marginRight=E(nt.reliableMarginRight,function(e,t){return t?it.swap(e,{display:"inline-block"},tn,[e,"marginRight"]):void 0}),it.each({margin:"",padding:"",border:"Width"},function(e,t){it.cssHooks[e+t]={expand:function(n){for(var r=0,i={},s="string"==typeof n?n.split(" "):[n];4>r;r++)i[e+jt[r]+t]=s[r]||s[r-2]||s[0];return i}},nn.test(e)||(it.cssHooks[e+t].set=T)}),it.fn.extend({css:function(e,t){return Tt(this,function(e,t,n){var r,i,s={},o=0;if(it.isArray(t)){for(r=en(e),i=t.length;i>o;o++)s[t[o]]=it.css(e,t[o],!1,r);return s}return void 0!==n?it.style(e,t,n):it.css(e,t)},e,t,arguments.length>1)},show:function(){return N(this,!0)},hide:function(){return N(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Nt(this)?it(this).show():it(this).hide()})}}),it.Tween=L,L.prototype={constructor:L,init:function(e,t,n,r,i,s){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=s||(it.cssNumber[n]?"":"px")},cur:function(){var e=L.propHooks[this.prop];return e&&e.get?e.get(this):L.propHooks._default.get(this)},run:function(e){var t,n=L.propHooks[this.prop];return this.pos=t=this.options.duration?it.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):L.propHooks._default.set(this),this}},L.prototype.init.prototype=L.prototype,L.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=it.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){it.fx.step[e.prop]?it.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[it.cssProps[e.prop]]||it.cssHooks[e.prop])?it.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},L.propHooks.scrollTop=L.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},it.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},it.fx=L.prototype.init,it.fx.step={};var fn,mn,gn=/^(?:toggle|show|hide)$/,vn=new RegExp("^(?:([+-])=|)("+Et+")([a-z%]*)$","i"),yn=/queueHooks$/,wn=[R],bn={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=vn.exec(t),s=i&&i[3]||(it.cssNumber[e]?"":"px"),o=(it.cssNumber[e]||"px"!==s&&+r)&&vn.exec(it.css(n.elem,e)),a=1,l=20;if(o&&o[3]!==s){s=s||o[3],i=i||[],o=+r||1;do a=a||".5",o/=a,it.style(n.elem,e,o+s);while(a!==(a=n.cur()/r)&&1!==a&&--l)}return i&&(o=n.start=+o||+r||0,n.unit=s,n.end=i[1]?o+(i[1]+1)*i[2]:+i[2]),n}]};it.Animation=it.extend(I,{tweener:function(e,t){it.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");for(var n,r=0,i=e.length;i>r;r++)n=e[r],bn[n]=bn[n]||[],bn[n].unshift(t)},prefilter:function(e,t){t?wn.unshift(e):wn.push(e)}}),it.speed=function(e,t,n){var r=e&&"object"==typeof e?it.extend({},e):{complete:n||!n&&t||it.isFunction(e)&&e,duration:e,easing:n&&t||t&&!it.isFunction(t)&&t};return r.duration=it.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in it.fx.speeds?it.fx.speeds[r.duration]:it.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){it.isFunction(r.old)&&r.old.call(this),r.queue&&it.dequeue(this,r.queue)},r},it.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Nt).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=it.isEmptyObject(e),s=it.speed(t,n,r),o=function(){var t=I(this,it.extend({},e),s);(i||it._data(this,"finish"))&&t.stop(!0)};return o.finish=o,i||s.queue===!1?this.each(o):this.queue(s.queue,o)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",s=it.timers,o=it._data(this);if(i)o[i]&&o[i].stop&&r(o[i]);else for(i in o)o[i]&&o[i].stop&&yn.test(i)&&r(o[i]);for(i=s.length;i--;)s[i].elem!==this||null!=e&&s[i].queue!==e||(s[i].anim.stop(n),t=!1,s.splice(i,1));(t||!n)&&it.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=it._data(this),r=n[e+"queue"],i=n[e+"queueHooks"],s=it.timers,o=r?r.length:0;for(n.finish=!0,it.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=s.length;t--;)s[t].elem===this&&s[t].queue===e&&(s[t].anim.stop(!0),s.splice(t,1));for(t=0;o>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),it.each(["toggle","show","hide"],function(e,t){var n=it.fn[t];it.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(M(t,!0),e,r,i)}}),it.each({slideDown:M("show"),slideUp:M("hide"),slideToggle:M("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){it.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),it.timers=[],it.fx.tick=function(){var e,t=it.timers,n=0;for(fn=it.now();n<t.length;n++)e=t[n],e()||t[n]!==e||t.splice(n--,1);t.length||it.fx.stop(),fn=void 0},it.fx.timer=function(e){it.timers.push(e),e()?it.fx.start():it.timers.pop()},it.fx.interval=13,it.fx.start=function(){mn||(mn=setInterval(it.fx.tick,it.fx.interval))},it.fx.stop=function(){clearInterval(mn),mn=null},it.fx.speeds={slow:600,fast:200,_default:400},it.fn.delay=function(e,t){return e=it.fx?it.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},function(){var e,t,n,r,i;t=ft.createElement("div"),t.setAttribute("className","t"),t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",r=t.getElementsByTagName("a")[0],n=ft.createElement("select"),i=n.appendChild(ft.createElement("option")),e=t.getElementsByTagName("input")[0],r.style.cssText="top:1px",nt.getSetAttribute="t"!==t.className,nt.style=/top/.test(r.getAttribute("style")),nt.hrefNormalized="/a"===r.getAttribute("href"),nt.checkOn=!!e.value,nt.optSelected=i.selected,nt.enctype=!!ft.createElement("form").enctype,n.disabled=!0,nt.optDisabled=!i.disabled,e=ft.createElement("input"),e.setAttribute("value",""),nt.input=""===e.getAttribute("value"),e.value="t",e.setAttribute("type","radio"),nt.radioValue="t"===e.value}();var Sn=/\r/g;it.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=it.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,it(this).val()):e,null==i?i="":"number"==typeof i?i+="":it.isArray(i)&&(i=it.map(i,function(e){return null==e?"":e+""})),t=it.valHooks[this.type]||it.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=it.valHooks[i.type]||it.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(Sn,""):null==n?"":n)}}}),it.extend({valHooks:{option:{get:function(e){var t=it.find.attr(e,"value");return null!=t?t:it.trim(it.text(e))}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,s="select-one"===e.type||0>i,o=s?null:[],a=s?i+1:r.length,l=0>i?a:s?i:0;a>l;l++)if(n=r[l],!(!n.selected&&l!==i||(nt.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&it.nodeName(n.parentNode,"optgroup"))){if(t=it(n).val(),s)return t;o.push(t)}return o},set:function(e,t){for(var n,r,i=e.options,s=it.makeArray(t),o=i.length;o--;)if(r=i[o],it.inArray(it.valHooks.option.get(r),s)>=0)try{r.selected=n=!0}catch(a){r.scrollHeight}else r.selected=!1;return n||(e.selectedIndex=-1),i}}}}),it.each(["radio","checkbox"],function(){it.valHooks[this]={set:function(e,t){return it.isArray(t)?e.checked=it.inArray(it(e).val(),t)>=0:void 0}},nt.checkOn||(it.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var xn,_n,kn=it.expr.attrHandle,Cn=/^(?:checked|selected)$/i,En=nt.getSetAttribute,jn=nt.input;it.fn.extend({attr:function(e,t){return Tt(this,it.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){it.removeAttr(this,e)})}}),it.extend({attr:function(e,t,n){var r,i,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return typeof e.getAttribute===_t?it.prop(e,t,n):(1===s&&it.isXMLDoc(e)||(t=t.toLowerCase(),r=it.attrHooks[t]||(it.expr.match.bool.test(t)?_n:xn)),void 0===n?r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=it.find.attr(e,t),null==i?void 0:i):null!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):void it.removeAttr(e,t))},removeAttr:function(e,t){var n,r,i=0,s=t&&t.match(wt);if(s&&1===e.nodeType)for(;n=s[i++];)r=it.propFix[n]||n,it.expr.match.bool.test(n)?jn&&En||!Cn.test(n)?e[r]=!1:e[it.camelCase("default-"+n)]=e[r]=!1:it.attr(e,n,""),e.removeAttribute(En?n:r)},attrHooks:{type:{set:function(e,t){if(!nt.radioValue&&"radio"===t&&it.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}}}),_n={set:function(e,t,n){return t===!1?it.removeAttr(e,n):jn&&En||!Cn.test(n)?e.setAttribute(!En&&it.propFix[n]||n,n):e[it.camelCase("default-"+n)]=e[n]=!0,n}},it.each(it.expr.match.bool.source.match(/\w+/g),function(e,t){var n=kn[t]||it.find.attr;kn[t]=jn&&En||!Cn.test(t)?function(e,t,r){var i,s;return r||(s=kn[t],kn[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,kn[t]=s),i}:function(e,t,n){return n?void 0:e[it.camelCase("default-"+t)]?t.toLowerCase():null}}),jn&&En||(it.attrHooks.value={set:function(e,t,n){return it.nodeName(e,"input")?void(e.defaultValue=t):xn&&xn.set(e,t,n)}}),En||(xn={set:function(e,t,n){var r=e.getAttributeNode(n);return r||e.setAttributeNode(r=e.ownerDocument.createAttribute(n)),r.value=t+="","value"===n||t===e.getAttribute(n)?t:void 0}},kn.id=kn.name=kn.coords=function(e,t,n){var r;return n?void 0:(r=e.getAttributeNode(t))&&""!==r.value?r.value:null},it.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);return n&&n.specified?n.value:void 0},set:xn.set},it.attrHooks.contenteditable={set:function(e,t,n){xn.set(e,""===t?!1:t,n)}},it.each(["width","height"],function(e,t){it.attrHooks[t]={set:function(e,n){return""===n?(e.setAttribute(t,"auto"),n):void 0}}})),nt.style||(it.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var Nn=/^(?:input|select|textarea|button|object)$/i,Tn=/^(?:a|area)$/i;it.fn.extend({prop:function(e,t){return Tt(this,it.prop,e,t,arguments.length>1)},removeProp:function(e){return e=it.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(t){}})}}),it.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(e,t,n){var r,i,s,o=e.nodeType;if(e&&3!==o&&8!==o&&2!==o)return s=1!==o||!it.isXMLDoc(e),s&&(t=it.propFix[t]||t,i=it.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=it.find.attr(e,"tabindex");return t?parseInt(t,10):Nn.test(e.nodeName)||Tn.test(e.nodeName)&&e.href?0:-1}}}}),nt.hrefNormalized||it.each(["href","src"],function(e,t){it.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),nt.optSelected||(it.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}}),it.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){it.propFix[this.toLowerCase()]=this}),nt.enctype||(it.propFix.enctype="encoding");var Pn=/[\t\r\n\f]/g;it.fn.extend({addClass:function(e){var t,n,r,i,s,o,a=0,l=this.length,u="string"==typeof e&&e;if(it.isFunction(e))return this.each(function(t){it(this).addClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(wt)||[];l>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Pn," "):" ")){for(s=0;i=t[s++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o=it.trim(r),n.className!==o&&(n.className=o)}return this},removeClass:function(e){var t,n,r,i,s,o,a=0,l=this.length,u=0===arguments.length||"string"==typeof e&&e;if(it.isFunction(e))return this.each(function(t){it(this).removeClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(wt)||[];l>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Pn," "):"")){for(s=0;i=t[s++];)for(;r.indexOf(" "+i+" ")>=0;)r=r.replace(" "+i+" "," ");o=e?it.trim(r):"",n.className!==o&&(n.className=o)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):this.each(it.isFunction(e)?function(n){it(this).toggleClass(e.call(this,n,this.className,t),t)}:function(){if("string"===n)for(var t,r=0,i=it(this),s=e.match(wt)||[];t=s[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else(n===_t||"boolean"===n)&&(this.className&&it._data(this,"__className__",this.className),this.className=this.className||e===!1?"":it._data(this,"__className__")||"")})},hasClass:function(e){for(var t=" "+e+" ",n=0,r=this.length;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(Pn," ").indexOf(t)>=0)return!0;return!1}}),it.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){it.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),it.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var An=it.now(),Ln=/\?/,On=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;it.parseJSON=function(t){if(e.JSON&&e.JSON.parse)return e.JSON.parse(t+"");var n,r=null,i=it.trim(t+"");return i&&!it.trim(i.replace(On,function(e,t,i,s){return n&&t&&(r=0),0===r?e:(n=i||t,r+=!s-!i,"")}))?Function("return "+i)():it.error("Invalid JSON: "+t)},it.parseXML=function(t){var n,r;if(!t||"string"!=typeof t)return null;try{e.DOMParser?(r=new DOMParser,n=r.parseFromString(t,"text/xml")):(n=new ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(t))}catch(i){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||it.error("Invalid XML: "+t),n};var Mn,Dn,Rn=/#.*$/,Hn=/([?&])_=[^&]*/,In=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Bn=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,$n=/^(?:GET|HEAD)$/,Un=/^\/\//,qn=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Fn={},Wn={},zn="*/".concat("*");try{Dn=location.href}catch(Vn){Dn=ft.createElement("a"),Dn.href="",Dn=Dn.href}Mn=qn.exec(Dn.toLowerCase())||[],it.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Dn,type:"GET",isLocal:Bn.test(Mn[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":zn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":it.parseJSON,"text xml":it.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?U(U(e,it.ajaxSettings),t):U(it.ajaxSettings,e)},ajaxPrefilter:B(Fn),ajaxTransport:B(Wn),ajax:function(e,t){function n(e,t,n,r){var i,c,v,y,b,x=t;2!==w&&(w=2,a&&clearTimeout(a),u=void 0,o=r||"",S.readyState=e>0?4:0,i=e>=200&&300>e||304===e,n&&(y=q(d,S,n)),y=F(d,y,S,i),i?(d.ifModified&&(b=S.getResponseHeader("Last-Modified"),b&&(it.lastModified[s]=b),b=S.getResponseHeader("etag"),b&&(it.etag[s]=b)),204===e||"HEAD"===d.type?x="nocontent":304===e?x="notmodified":(x=y.state,c=y.data,v=y.error,i=!v)):(v=x,(e||!x)&&(x="error",0>e&&(e=0))),S.status=e,S.statusText=(t||x)+"",i?f.resolveWith(p,[c,x,S]):f.rejectWith(p,[S,x,v]),S.statusCode(g),g=void 0,l&&h.trigger(i?"ajaxSuccess":"ajaxError",[S,d,i?c:v]),m.fireWith(p,[S,x]),l&&(h.trigger("ajaxComplete",[S,d]),--it.active||it.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,s,o,a,l,u,c,d=it.ajaxSetup({},t),p=d.context||d,h=d.context&&(p.nodeType||p.jquery)?it(p):it.event,f=it.Deferred(),m=it.Callbacks("once memory"),g=d.statusCode||{},v={},y={},w=0,b="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(2===w){if(!c)for(c={};t=In.exec(o);)c[t[1].toLowerCase()]=t[2];t=c[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===w?o:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return w||(e=y[n]=y[n]||e,v[e]=t),this},overrideMimeType:function(e){return w||(d.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>w)for(t in e)g[t]=[g[t],e[t]];else S.always(e[S.status]);return this},abort:function(e){var t=e||b;return u&&u.abort(t),n(0,t),this}};if(f.promise(S).complete=m.add,S.success=S.done,S.error=S.fail,d.url=((e||d.url||Dn)+"").replace(Rn,"").replace(Un,Mn[1]+"//"),d.type=t.method||t.type||d.method||d.type,d.dataTypes=it.trim(d.dataType||"*").toLowerCase().match(wt)||[""],null==d.crossDomain&&(r=qn.exec(d.url.toLowerCase()),d.crossDomain=!(!r||r[1]===Mn[1]&&r[2]===Mn[2]&&(r[3]||("http:"===r[1]?"80":"443"))===(Mn[3]||("http:"===Mn[1]?"80":"443")))),d.data&&d.processData&&"string"!=typeof d.data&&(d.data=it.param(d.data,d.traditional)),$(Fn,d,t,S),2===w)return S;l=it.event&&d.global,l&&0===it.active++&&it.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!$n.test(d.type),s=d.url,d.hasContent||(d.data&&(s=d.url+=(Ln.test(s)?"&":"?")+d.data,delete d.data),d.cache===!1&&(d.url=Hn.test(s)?s.replace(Hn,"$1_="+An++):s+(Ln.test(s)?"&":"?")+"_="+An++)),d.ifModified&&(it.lastModified[s]&&S.setRequestHeader("If-Modified-Since",it.lastModified[s]),it.etag[s]&&S.setRequestHeader("If-None-Match",it.etag[s])),(d.data&&d.hasContent&&d.contentType!==!1||t.contentType)&&S.setRequestHeader("Content-Type",d.contentType),S.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+zn+"; q=0.01":""):d.accepts["*"]);for(i in d.headers)S.setRequestHeader(i,d.headers[i]);if(d.beforeSend&&(d.beforeSend.call(p,S,d)===!1||2===w))return S.abort();b="abort";for(i in{success:1,error:1,complete:1})S[i](d[i]);if(u=$(Wn,d,t,S)){S.readyState=1,l&&h.trigger("ajaxSend",[S,d]),d.async&&d.timeout>0&&(a=setTimeout(function(){S.abort("timeout")},d.timeout));try{w=1,u.send(v,n)}catch(x){if(!(2>w))throw x;n(-1,x)}}else n(-1,"No Transport");return S},getJSON:function(e,t,n){return it.get(e,t,n,"json")},getScript:function(e,t){return it.get(e,void 0,t,"script")}}),it.each(["get","post"],function(e,t){it[t]=function(e,n,r,i){return it.isFunction(n)&&(i=i||r,r=n,n=void 0),it.ajax({url:e,type:t,dataType:i,data:n,success:r})}}),it._evalUrl=function(e){return it.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},it.fn.extend({wrapAll:function(e){if(it.isFunction(e))return this.each(function(t){it(this).wrapAll(e.call(this,t))});if(this[0]){var t=it(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return this.each(it.isFunction(e)?function(t){it(this).wrapInner(e.call(this,t))}:function(){var t=it(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=it.isFunction(e);return this.each(function(n){it(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){it.nodeName(this,"body")||it(this).replaceWith(this.childNodes)}).end()}}),it.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0||!nt.reliableHiddenOffsets()&&"none"===(e.style&&e.style.display||it.css(e,"display"))},it.expr.filters.visible=function(e){return!it.expr.filters.hidden(e)};var Gn=/%20/g,Xn=/\[\]$/,Kn=/\r?\n/g,Jn=/^(?:submit|button|image|reset|file)$/i,Yn=/^(?:input|select|textarea|keygen)/i;it.param=function(e,t){var n,r=[],i=function(e,t){t=it.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=it.ajaxSettings&&it.ajaxSettings.traditional),it.isArray(e)||e.jquery&&!it.isPlainObject(e))it.each(e,function(){i(this.name,this.value)});else for(n in e)W(n,e[n],t,i);return r.join("&").replace(Gn,"+")},it.fn.extend({serialize:function(){return it.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=it.prop(this,"elements");return e?it.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!it(this).is(":disabled")&&Yn.test(this.nodeName)&&!Jn.test(e)&&(this.checked||!Pt.test(e))}).map(function(e,t){var n=it(this).val();return null==n?null:it.isArray(n)?it.map(n,function(e){return{name:t.name,value:e.replace(Kn,"\r\n")}}):{name:t.name,value:n.replace(Kn,"\r\n")}}).get()}}),it.ajaxSettings.xhr=void 0!==e.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&z()||V()}:z;var Qn=0,Zn={},er=it.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in Zn)Zn[e](void 0,!0)}),nt.cors=!!er&&"withCredentials"in er,er=nt.ajax=!!er,er&&it.ajaxTransport(function(e){if(!e.crossDomain||nt.cors){var t;return{send:function(n,r){var i,s=e.xhr(),o=++Qn;if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)s[i]=e.xhrFields[i];e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(i in n)void 0!==n[i]&&s.setRequestHeader(i,n[i]+"");s.send(e.hasContent&&e.data||null),t=function(n,i){var a,l,u;if(t&&(i||4===s.readyState))if(delete Zn[o],t=void 0,s.onreadystatechange=it.noop,i)4!==s.readyState&&s.abort();else{u={},a=s.status,"string"==typeof s.responseText&&(u.text=s.responseText);try{l=s.statusText}catch(c){l=""}a||!e.isLocal||e.crossDomain?1223===a&&(a=204):a=u.text?200:404}u&&r(a,l,u,s.getAllResponseHeaders())},e.async?4===s.readyState?setTimeout(t):s.onreadystatechange=Zn[o]=t:t()},abort:function(){t&&t(void 0,!0)}}}}),it.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return it.globalEval(e),e}}}),it.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),it.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=ft.head||it("head")[0]||ft.documentElement;return{send:function(r,i){t=ft.createElement("script"),t.async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||i(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var tr=[],nr=/(=)\?(?=&|$)|\?\?/;it.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=tr.pop()||it.expando+"_"+An++;return this[e]=!0,e}}),it.ajaxPrefilter("json jsonp",function(t,n,r){var i,s,o,a=t.jsonp!==!1&&(nr.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&nr.test(t.data)&&"data");return a||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=it.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(nr,"$1"+i):t.jsonp!==!1&&(t.url+=(Ln.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return o||it.error(i+" was not called"),o[0]
},t.dataTypes[0]="json",s=e[i],e[i]=function(){o=arguments},r.always(function(){e[i]=s,t[i]&&(t.jsonpCallback=n.jsonpCallback,tr.push(i)),o&&it.isFunction(s)&&s(o[0]),o=s=void 0}),"script"):void 0}),it.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||ft;var r=dt.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=it.buildFragment([e],t,i),i&&i.length&&it(i).remove(),it.merge([],r.childNodes))};var rr=it.fn.load;it.fn.load=function(e,t,n){if("string"!=typeof e&&rr)return rr.apply(this,arguments);var r,i,s,o=this,a=e.indexOf(" ");return a>=0&&(r=it.trim(e.slice(a,e.length)),e=e.slice(0,a)),it.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(s="POST"),o.length>0&&it.ajax({url:e,type:s,dataType:"html",data:t}).done(function(e){i=arguments,o.html(r?it("<div>").append(it.parseHTML(e)).find(r):e)}).complete(n&&function(e,t){o.each(n,i||[e.responseText,t,e])}),this},it.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){it.fn[t]=function(e){return this.on(t,e)}}),it.expr.filters.animated=function(e){return it.grep(it.timers,function(t){return e===t.elem}).length};var ir=e.document.documentElement;it.offset={setOffset:function(e,t,n){var r,i,s,o,a,l,u,c=it.css(e,"position"),d=it(e),p={};"static"===c&&(e.style.position="relative"),a=d.offset(),s=it.css(e,"top"),l=it.css(e,"left"),u=("absolute"===c||"fixed"===c)&&it.inArray("auto",[s,l])>-1,u?(r=d.position(),o=r.top,i=r.left):(o=parseFloat(s)||0,i=parseFloat(l)||0),it.isFunction(t)&&(t=t.call(e,n,a)),null!=t.top&&(p.top=t.top-a.top+o),null!=t.left&&(p.left=t.left-a.left+i),"using"in t?t.using.call(e,p):d.css(p)}},it.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){it.offset.setOffset(this,e,t)});var t,n,r={top:0,left:0},i=this[0],s=i&&i.ownerDocument;if(s)return t=s.documentElement,it.contains(t,i)?(typeof i.getBoundingClientRect!==_t&&(r=i.getBoundingClientRect()),n=G(s),{top:r.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:r.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):r},position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return"fixed"===it.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),it.nodeName(e[0],"html")||(n=e.offset()),n.top+=it.css(e[0],"borderTopWidth",!0),n.left+=it.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-it.css(r,"marginTop",!0),left:t.left-n.left-it.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent||ir;e&&!it.nodeName(e,"html")&&"static"===it.css(e,"position");)e=e.offsetParent;return e||ir})}}),it.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);it.fn[e]=function(r){return Tt(this,function(e,r,i){var s=G(e);return void 0===i?s?t in s?s[t]:s.document.documentElement[r]:e[r]:void(s?s.scrollTo(n?it(s).scrollLeft():i,n?i:it(s).scrollTop()):e[r]=i)},e,r,arguments.length,null)}}),it.each(["top","left"],function(e,t){it.cssHooks[t]=E(nt.pixelPosition,function(e,n){return n?(n=tn(e,t),rn.test(n)?it(e).position()[t]+"px":n):void 0})}),it.each({Height:"height",Width:"width"},function(e,t){it.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){it.fn[r]=function(r,i){var s=arguments.length&&(n||"boolean"!=typeof r),o=n||(r===!0||i===!0?"margin":"border");return Tt(this,function(t,n,r){var i;return it.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?it.css(t,n,o):it.style(t,n,r,o)},t,s?r:void 0,s,null)}})}),it.fn.size=function(){return this.length},it.fn.andSelf=it.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return it});var sr=e.jQuery,or=e.$;return it.noConflict=function(t){return e.$===it&&(e.$=or),t&&e.jQuery===it&&(e.jQuery=sr),it},typeof t===_t&&(e.jQuery=e.$=it),it})},{}],"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/demo.js":[function(e,t){(function(n){var r=e("handlebars");t.exports=function(){n.dataRwdSlider={article:[{title:"my product #1",imgUrl:"http://static.fnac-static.com/multimedia/Images/FR/NR/ef/bd/5f/6274543/1539-1.jpg",desc:"Description of product #1"},{title:"my product #2",imgUrl:"http://static.fnac-static.com/multimedia/Images/FR/NR/75/46/5c/6047349/1539-1.jpg",desc:"Description of product #2"},{title:"my product #3",imgUrl:"http://static.fnac-static.com/multimedia/Images/FR/NR/33/a3/60/6333235/1539-1.jpg",desc:"Description of product #3"},{title:"my product #4",imgUrl:"http://static.fnac-static.com/multimedia/Images/FR/NR/0e/62/5b/5988878/1539-1.jpg",desc:"Description of product #4"},{title:"my product #5",imgUrl:"http://static.fnac-static.com/multimedia/Images/FR/NR/d0/94/5a/5936336/1539-1.jpg",desc:"Description of product #5"},{title:"my product #6",imgUrl:"http://static.fnac-static.com/multimedia/Images/FR/NR/45/37/2a/2766661/1539-4.jpg",desc:"Description of product #6"},{title:"my product #7",imgUrl:"http://static.fnac-static.com/multimedia/Images/FR/NR/ef/bd/5f/6274543/1539-1.jpg",desc:"Description of product #7"},{title:"my product #8",imgUrl:"http://static.fnac-static.com/multimedia/Images/FR/NR/ef/bd/5f/6274543/1539-1.jpg",desc:"Description of product #8"},{title:"my product #9",imgUrl:"http://static.fnac-static.com/multimedia/Images/FR/NR/ef/bd/5f/6274543/1539-1.jpg",desc:"Description of product #9"}]};var e=$("#article-list").html(),t=r.compile(e),i=t(dataRwdSlider);$("#article-list").parent().html(i)}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{handlebars:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/handlebars/lib/index.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/contructTransitionValue.js":[function(e,t){t.exports=function(e,t,n){return e+t+n}},{}],"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/extends.js":[function(e,t){"use strict";var n=function(e,t){for(var r in t){var i=t[r];i&&"[object Object]"===Object.prototype.toString.call(i)?(e[r]=e[r]||{},n(e[r],i)):e[r]=i}return e};t.exports=n},{}],"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/extractFloating.js":[function(e,t){t.exports=function(e){var t=""+e,n=t.indexOf(".");return parseInt(t.substr(n+1))}},{}],"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/findElementByHasClass.js":[function(e,t){var n=e("jquery");t.exports=function(e,t,r){var i=n(e,t).filter(function(){var e=n(this).prop("class");return-1!=e.indexOf(r)?!0:void 0});return i}},{jquery:"/Users/gdias/www/rwdSlider/rwdSlider/node_modules/jquery/dist/jquery.js"}],"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/rwdSlider.js":[function(e,t){"use strict";var n=e("./modules/extends"),r=(e("./modules/extractFloating"),e("./modules/contructTransitionValue")),i=e("./modules/findElementByHasClass"),s=function(e){this.options={nbMove:2,nbView:4,wrapper:"",container:"ul",item:"li",breakpoint:{px:0,nb:0}},s.prototype.init=function(){n(this.options,e);var t=this;this._sliderWidth,this._itemWidth,this._totalWidth,this._nbTotalItem,this._steps=[],this._nbSteps=0,this._position=0,this._nbView=this.options.nbView,this._rest=0,t.getSizes(),t.generateSteps(),t.bindEvents(),t.options.breakpoint.px&&t.responsive()},s.prototype.getSizes=function(){var e=this;e._sliderWidth=$(e.options.wrapper).width(),e._nbTotalItem=$(e.options.item,e.options.wrapper).size(),e._itemWidth=parseInt(e._sliderWidth/e._nbView),e._totalWidth=parseInt(e._itemWidth*e._nbTotalItem),$(e.options.item,e.options.wrapper).each(function(){$(this).width(e._itemWidth)}),$(e.options.wrapper).find(e.options.container).width(e._totalWidth)},s.prototype.generateSteps=function(){var e=parseInt(this._itemWidth*this.options.nbMove),t=this._nbTotalItem%this._nbView,n=this._nbTotalItem-t,r=n/this.options.nbMove;this._rest=this._nbTotalItem%this.options.nbMove,t&&this.options.nbMove===this._nbView&&(r=parseInt(r+1)),this._steps=[];for(var i=0;r>i;i++)this._steps.push(parseInt(i*e));if(this._nbSteps=parseInt(r),t){var s=parseInt(this._steps[this._steps.length-2]),o=s+this._rest*this._itemWidth;this._steps[this._steps.length-1]=o}},s.prototype.bindEvents=function(){var e=this,t=this.options.wrapper,n=i("a",t,"next"),r=i("a",t,"prev");n.click(function(){0===e._position&&e.generateSteps(),e.move(!0)}),r.click(function(){e._position===e._steps.length-1&&e.updateStepsBackWay(),e.move(!1)}),window.onresize=function(){e.responsive()}},s.prototype.updateStepsBackWay=function(){var e=this._steps.splice(1,this._steps.length-2),t=1;for(var n in e){var r=e[n],i=parseInt(this._rest*this._itemWidth),s=parseInt(r-i);this._steps.splice(t,0,s),t++}},s.prototype.move=function(e){if(e){if(!(this._position<this._nbSteps-1))return;this._position=this._position+1}else{if(!(this._position>0))return;this._position=this._position-1}this.setPosition(this._position)},s.prototype.setPosition=function(e){var t=r("-",this._steps[e],"px");document.addEventListener?$(this.options.wrapper).find(this.options.container).css("transform","translateX("+t+")"):$(this.options.wrapper).find(this.options.container).animate({left:t})},s.prototype.responsive=function(){if(document.addEventListener)var e=window.matchMedia("(max-width:"+this.options.breakpoint.px+"px)").matches;else var e=$(document).width()>this.options.breakpoint.px?!1:!0;this._nbView=e?this.options.breakpoint.nb:this.options.nbView,this._position=0,this.setPosition(this._position),this.getSizes(),this.generateSteps()},this.init()};t.exports=s},{"./modules/contructTransitionValue":"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/contructTransitionValue.js","./modules/extends":"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/extends.js","./modules/extractFloating":"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/extractFloating.js","./modules/findElementByHasClass":"/Users/gdias/www/rwdSlider/rwdSlider/src/javascripts/modules/findElementByHasClass.js"}]},{},["./src/javascripts/bundle.js"]);
//# sourceMappingURL=data:application/json;base64,